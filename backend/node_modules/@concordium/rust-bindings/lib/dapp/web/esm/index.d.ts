/* tslint:disable */
/* eslint-disable */
/**
* @param {string} contract_name
* @param {string} state_bytes
* @param {string} schema
* @param {boolean | undefined} verbose_error_message
* @returns {string}
*/
export function deserializeState(contract_name: string, state_bytes: string, schema: string, verbose_error_message?: boolean): string;
/**
* @param {string} return_value_bytes
* @param {string} module_schema
* @param {string} contract_name
* @param {string} function_name
* @param {number | undefined} schema_version
* @param {boolean | undefined} verbose_error_message
* @returns {string}
*/
export function deserializeReceiveReturnValue(return_value_bytes: string, module_schema: string, contract_name: string, function_name: string, schema_version?: number, verbose_error_message?: boolean): string;
/**
* @param {string} error_bytes
* @param {string} schema
* @param {string} contract_name
* @param {string} function_name
* @param {boolean | undefined} verbose_error_message
* @returns {string}
*/
export function deserializeReceiveError(error_bytes: string, schema: string, contract_name: string, function_name: string, verbose_error_message?: boolean): string;
/**
* @param {string} error_bytes
* @param {string} schema
* @param {string} contract_name
* @param {boolean | undefined} verbose_error_message
* @returns {string}
*/
export function deserializeInitError(error_bytes: string, schema: string, contract_name: string, verbose_error_message?: boolean): string;
/**
* @param {string} parameters
* @param {string} schema
* @param {string} contract_name
* @param {string} function_name
* @param {number | undefined} schema_version
* @param {boolean | undefined} verbose_error_message
* @returns {string}
*/
export function serializeReceiveContractParameters(parameters: string, schema: string, contract_name: string, function_name: string, schema_version?: number, verbose_error_message?: boolean): string;
/**
* @param {string} parameters
* @param {string} schema
* @param {string} contract_name
* @param {number | undefined} schema_version
* @param {boolean | undefined} verbose_error_message
* @returns {string}
*/
export function serializeInitContractParameters(parameters: string, schema: string, contract_name: string, schema_version?: number, verbose_error_message?: boolean): string;
/**
* @param {string} schema
* @param {string} contract_name
* @param {string} function_name
* @param {number | undefined} schema_version
* @returns {string}
*/
export function getReceiveContractParameterSchema(schema: string, contract_name: string, function_name: string, schema_version?: number): string;
/**
* @param {string} schema
* @param {string} contract_name
* @param {number | undefined} schema_version
* @returns {string}
*/
export function getInitContractParameterSchema(schema: string, contract_name: string, schema_version?: number): string;
/**
* @param {string} value
* @param {string} schema
* @param {boolean | undefined} verbose_error_message
* @returns {string}
*/
export function serializeTypeValue(value: string, schema: string, verbose_error_message?: boolean): string;
/**
* @param {string} serialized_value
* @param {string} schema
* @param {boolean | undefined} verbose_error_message
* @returns {string}
*/
export function deserializeTypeValue(serialized_value: string, schema: string, verbose_error_message?: boolean): string;
/**
* @param {string} schema
* @returns {string}
*/
export function displayTypeSchemaTemplate(schema: string): string;

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly deserializeState: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => void;
  readonly deserializeReceiveReturnValue: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number) => void;
  readonly deserializeReceiveError: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
  readonly deserializeInitError: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => void;
  readonly serializeReceiveContractParameters: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number) => void;
  readonly serializeInitContractParameters: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
  readonly getReceiveContractParameterSchema: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => void;
  readonly getInitContractParameterSchema: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly serializeTypeValue: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly deserializeTypeValue: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly displayTypeSchemaTemplate: (a: number, b: number, c: number) => void;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_malloc: (a: number, b: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
  readonly __wbindgen_free: (a: number, b: number, c: number) => void;
}

export type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {SyncInitInput} module
*
* @returns {InitOutput}
*/
export function initSync(module: SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
export default function __wbg_init (module_or_path?: InitInput | Promise<InitInput>): Promise<InitOutput>;
