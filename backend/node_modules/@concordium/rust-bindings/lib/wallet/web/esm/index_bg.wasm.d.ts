/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function generateUnsignedCredential(a: number, b: number, c: number): void;
export function getDeploymentDetails(a: number, b: number, c: number, d: number, e: number): void;
export function getDeploymentInfo(a: number, b: number, c: number, d: number): void;
export function createIdRequestV1(a: number, b: number, c: number): void;
export function createIdentityRecoveryRequest(a: number, b: number, c: number): void;
export function createCredentialV1(a: number, b: number, c: number): void;
export function createUnsignedCredentialV1(a: number, b: number, c: number): void;
export function createIdProof(a: number, b: number, c: number): void;
export function getAccountSigningKey(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function getAccountPublicKey(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function deserializeCredentialDeployment(a: number, b: number, c: number): void;
export function getCredentialId(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function getPrfKey(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function getIdCredSec(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function getSignatureBlindingRandomness(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function getAttributeCommitmentRandomness(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function getVerifiableCredentialSigningKey(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function getVerifiableCredentialPublicKey(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function getVerifiableCredentialBackupEncryptionKey(a: number, b: number, c: number, d: number, e: number): void;
export function serializeCredentialDeploymentPayload(a: number, b: number, c: number, d: number): void;
export function generateBakerKeys(a: number, b: number, c: number): void;
export function createWeb3IdProof(a: number, b: number, c: number): void;
export function verifyWeb3IdCredentialSignature(a: number, b: number, c: number): void;
export function verifyPresentation(a: number, b: number, c: number): void;
export function __wbg_subdivision_free(a: number): void;
export function subdivision_country_name(a: number, b: number): void;
export function subdivision_country_code(a: number, b: number): void;
export function subdivision_region_code(a: number, b: number): void;
export function from_code_iso_3166_2(a: number, b: number): number;
export function __wbg_countrycode_free(a: number): void;
export function countrycode_name(a: number, b: number): void;
export function countrycode_alpha2(a: number, b: number): void;
export function countrycode_alpha3(a: number, b: number): void;
export function countrycode_numeric(a: number): number;
export function countrycode_numeric_str(a: number, b: number): void;
export function countrycode_subdivisions(a: number): number;
export function from_alpha2(a: number, b: number): number;
export function from_alpha3(a: number, b: number): number;
export function from_numeric(a: number): number;
export function from_numeric_str(a: number, b: number): number;
export function subdivision_name(a: number, b: number): void;
export function subdivision_subdivision_type(a: number, b: number): void;
export function subdivision_code(a: number, b: number): void;
export function __wbg_countrycode3_free(a: number): void;
export function countrycode3_code(a: number, b: number): void;
export function countrycode3_name(a: number, b: number): void;
export function countrycode3_former(a: number): number;
export function countrycode3_new_countries(a: number): number;
export function countrycode3_desc(a: number, b: number): void;
export function from_code_iso_3166_3(a: number, b: number): number;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
