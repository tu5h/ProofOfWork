// @generated by protobuf-ts 2.9.1 with parameter optimize_code_size
// @generated from protobuf file "v2/concordium/types.proto" (package "concordium.v2", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
/**
 * A message that contains no information.
 *
 * @generated from protobuf message concordium.v2.Empty
 */
export interface Empty {
}
/**
 * Hash of a block. This is always 32 bytes long.
 *
 * @generated from protobuf message concordium.v2.BlockHash
 */
export interface BlockHash {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * A SHA256 hash. This is always 32 bytes long.
 *
 * @generated from protobuf message concordium.v2.Sha256Hash
 */
export interface Sha256Hash {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Hash of a transaction. This is always 32 bytes long.
 *
 * @generated from protobuf message concordium.v2.TransactionHash
 */
export interface TransactionHash {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Hash of the state after some block. This is always 32 bytes long.
 *
 * @generated from protobuf message concordium.v2.StateHash
 */
export interface StateHash {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * The absolute height of a block. This is the number of ancestors of a block
 * since the genesis block. In particular, the chain genesis block has absolute
 * height 0.
 *
 * @generated from protobuf message concordium.v2.AbsoluteBlockHeight
 */
export interface AbsoluteBlockHeight {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * The height of a block relative to the last genesis. This differs from the
 * absolute block height in that it counts height from the last protocol update.
 *
 * @generated from protobuf message concordium.v2.BlockHeight
 */
export interface BlockHeight {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * The ID of a baker, which is the index of its account.
 *
 * @generated from protobuf message concordium.v2.BakerId
 */
export interface BakerId {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * Index of the account in the account table. These are assigned sequentially
 * in the order of creation of accounts. The first account has index 0.
 *
 * @generated from protobuf message concordium.v2.AccountIndex
 */
export interface AccountIndex {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * A smart contract module reference. This is always 32 bytes long.
 *
 * @generated from protobuf message concordium.v2.ModuleRef
 */
export interface ModuleRef {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Source bytes of a versioned smart contract module.
 *
 * @generated from protobuf message concordium.v2.VersionedModuleSource
 */
export interface VersionedModuleSource {
    /**
     * @generated from protobuf oneof: module
     */
    module: {
        oneofKind: "v0";
        /**
         * @generated from protobuf field: concordium.v2.VersionedModuleSource.ModuleSourceV0 v0 = 1;
         */
        v0: VersionedModuleSource_ModuleSourceV0;
    } | {
        oneofKind: "v1";
        /**
         * @generated from protobuf field: concordium.v2.VersionedModuleSource.ModuleSourceV1 v1 = 2;
         */
        v1: VersionedModuleSource_ModuleSourceV1;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Source bytes of a smart contract v0 module.
 *
 * @generated from protobuf message concordium.v2.VersionedModuleSource.ModuleSourceV0
 */
export interface VersionedModuleSource_ModuleSourceV0 {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Source bytes of a smart contract v1 module.
 *
 * @generated from protobuf message concordium.v2.VersionedModuleSource.ModuleSourceV1
 */
export interface VersionedModuleSource_ModuleSourceV1 {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Unix timestamp in milliseconds.
 *
 * @generated from protobuf message concordium.v2.Timestamp
 */
export interface Timestamp {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * An individual release of a locked balance.
 *
 * @generated from protobuf message concordium.v2.Release
 */
export interface Release {
    /**
     * Effective time of the release in milliseconds since unix epoch.
     *
     * @generated from protobuf field: concordium.v2.Timestamp timestamp = 1;
     */
    timestamp?: Timestamp;
    /**
     * Amount to be released.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 2;
     */
    amount?: Amount;
    /**
     * List of transaction hashes that contribute a balance to this release.
     *
     * @generated from protobuf field: repeated concordium.v2.TransactionHash transactions = 3;
     */
    transactions: TransactionHash[];
}
/**
 * A new individual release. Part of a single transfer with schedule transaction.
 *
 * @generated from protobuf message concordium.v2.NewRelease
 */
export interface NewRelease {
    /**
     * Effective time of the release in milliseconds since unix epoch.
     *
     * @generated from protobuf field: concordium.v2.Timestamp timestamp = 1;
     */
    timestamp?: Timestamp;
    /**
     * Amount to be released.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 2;
     */
    amount?: Amount;
}
/**
 * State of the account's release schedule. This is the balance of the account
 * that is owned by the account, but cannot be used until the release point.
 *
 * @generated from protobuf message concordium.v2.ReleaseSchedule
 */
export interface ReleaseSchedule {
    /**
     * Total amount locked in the release schedule.
     *
     * @generated from protobuf field: concordium.v2.Amount total = 1;
     */
    total?: Amount;
    /**
     * A list of releases, ordered by increasing timestamp.
     *
     * @generated from protobuf field: repeated concordium.v2.Release schedules = 2;
     */
    schedules: Release[];
}
/**
 * An encrypted amount, in two chunks in "little endian limbs". That is, the
 * first chunk represents the low 32 bits of an amount, and the second chunk
 * represents the high 32 bits. The chunks are serialized in order and
 * represented as a byte array.
 * Always 192 bytes.
 *
 * @generated from protobuf message concordium.v2.EncryptedAmount
 */
export interface EncryptedAmount {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * @generated from protobuf message concordium.v2.EncryptedBalance
 */
export interface EncryptedBalance {
    /**
     * Encrypted amount that is a result of this account's actions.
     * In particular this list includes the aggregate of
     *
     * - remaining amounts that result when transferring to public balance
     * - remaining amounts when transferring to another account
     * - encrypted amounts that are transferred from public balance
     *
     * When a transfer is made all of these must always be used.
     *
     * @generated from protobuf field: concordium.v2.EncryptedAmount self_amount = 1;
     */
    selfAmount?: EncryptedAmount;
    /**
     * Starting index for incoming encrypted amounts. If an aggregated amount
     * is present then this index is associated with such an amount and the
     * list of incoming encrypted amounts starts at the index `start_index
     * + 1`.
     *
     * @generated from protobuf field: uint64 start_index = 2;
     */
    startIndex: bigint;
    /**
     * If present, the amount that has resulted from aggregating other amounts
     * If this field is present so is `num_aggregated`.
     *
     * @generated from protobuf field: optional concordium.v2.EncryptedAmount aggregated_amount = 3;
     */
    aggregatedAmount?: EncryptedAmount;
    /**
     * The number of aggregated amounts (must be at least 2 if present). This
     * field is present if and only if `aggregated_amount` is present.
     *
     * @generated from protobuf field: optional uint32 num_aggregated = 4;
     */
    numAggregated?: number;
    /**
     * Amounts starting at `start_index` (or at `start_index + 1` if there is
     * an aggregated amount present). They are assumed to be numbered
     * sequentially. The length of this list is bounded by the maximum number
     * of incoming amounts on the accounts, which is currently 32. After
     * that aggregation kicks in.
     *
     * @generated from protobuf field: repeated concordium.v2.EncryptedAmount incoming_amounts = 5;
     */
    incomingAmounts: EncryptedAmount[];
}
/**
 * Entity to which the account delegates a portion of its stake.
 *
 * @generated from protobuf message concordium.v2.DelegationTarget
 */
export interface DelegationTarget {
    /**
     * @generated from protobuf oneof: target
     */
    target: {
        oneofKind: "passive";
        /**
         * Delegate passively, i.e., to no specific baker.
         *
         * @generated from protobuf field: concordium.v2.Empty passive = 1;
         */
        passive: Empty;
    } | {
        oneofKind: "baker";
        /**
         * Delegate to a specific baker.
         *
         * @generated from protobuf field: concordium.v2.BakerId baker = 2;
         */
        baker: BakerId;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Baker's public key used to check whether they won the lottery or not.
 *
 * @generated from protobuf message concordium.v2.BakerElectionVerifyKey
 */
export interface BakerElectionVerifyKey {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Baker's public key used to check that they are indeed the ones who
 * produced the block.
 *
 * @generated from protobuf message concordium.v2.BakerSignatureVerifyKey
 */
export interface BakerSignatureVerifyKey {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Baker's public key used to check signatures on finalization records.
 * This is only used if the baker has sufficient stake to participate in
 * finalization.
 *
 * @generated from protobuf message concordium.v2.BakerAggregationVerifyKey
 */
export interface BakerAggregationVerifyKey {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Information about a baker.
 *
 * @generated from protobuf message concordium.v2.BakerInfo
 */
export interface BakerInfo {
    /**
     * Identity of the baker. This is actually the account index of
     * the account controlling the baker.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;
     */
    bakerId?: BakerId;
    /**
     * Baker's public key used to check whether they won the lottery or not.
     *
     * @generated from protobuf field: concordium.v2.BakerElectionVerifyKey election_key = 2;
     */
    electionKey?: BakerElectionVerifyKey;
    /**
     * Baker's public key used to check that they are indeed the ones who
     * produced the block.
     *
     * @generated from protobuf field: concordium.v2.BakerSignatureVerifyKey signature_key = 3;
     */
    signatureKey?: BakerSignatureVerifyKey;
    /**
     * Baker's public key used to check signatures on finalization records.
     * This is only used if the baker has sufficient stake to participate in
     * finalization.
     *
     * @generated from protobuf field: concordium.v2.BakerAggregationVerifyKey aggregation_key = 4;
     */
    aggregationKey?: BakerAggregationVerifyKey;
}
/**
 * Pending change to the stake either of a baker or delegator.
 *
 * @generated from protobuf message concordium.v2.StakePendingChange
 */
export interface StakePendingChange {
    /**
     * @generated from protobuf oneof: change
     */
    change: {
        oneofKind: "reduce";
        /**
         * @generated from protobuf field: concordium.v2.StakePendingChange.Reduce reduce = 1;
         */
        reduce: StakePendingChange_Reduce;
    } | {
        oneofKind: "remove";
        /**
         * Remove the stake. The value is a Unix timestamp of the effective time in
         * milliseconds.
         *
         * @generated from protobuf field: concordium.v2.Timestamp remove = 2;
         */
        remove: Timestamp;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message concordium.v2.StakePendingChange.Reduce
 */
export interface StakePendingChange_Reduce {
    /**
     * @generated from protobuf field: concordium.v2.Amount new_stake = 1;
     */
    newStake?: Amount;
    /**
     * Unix timestamp in milliseconds when the change takes effect.
     *
     * @generated from protobuf field: concordium.v2.Timestamp effective_time = 2;
     */
    effectiveTime?: Timestamp;
}
/**
 * A fraction of an amount with a precision of `1/100_000`.
 *
 * @generated from protobuf message concordium.v2.AmountFraction
 */
export interface AmountFraction {
    /**
     * Must not exceed 100000.
     *
     * @generated from protobuf field: uint32 parts_per_hundred_thousand = 1;
     */
    partsPerHundredThousand: number;
}
/**
 * Distribution of the rewards for the particular pool.
 *
 * @generated from protobuf message concordium.v2.CommissionRates
 */
export interface CommissionRates {
    /**
     * Fraction of finalization rewards charged by the pool owner.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction finalization = 1;
     */
    finalization?: AmountFraction;
    /**
     * Fraction of baking rewards charged by the pool owner.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction baking = 2;
     */
    baking?: AmountFraction;
    /**
     * Fraction of transaction rewards charged by the pool owner.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction transaction = 3;
     */
    transaction?: AmountFraction;
}
/**
 * Additional information about a baking pool.
 * This information is added with the introduction of delegation.
 *
 * @generated from protobuf message concordium.v2.BakerPoolInfo
 */
export interface BakerPoolInfo {
    /**
     * Whether the pool allows delegators.
     *
     * @generated from protobuf field: concordium.v2.OpenStatus open_status = 1;
     */
    openStatus: OpenStatus;
    /**
     * The URL that links to the metadata about the pool.
     *
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * The commission rates charged by the pool owner.
     *
     * @generated from protobuf field: concordium.v2.CommissionRates commission_rates = 3;
     */
    commissionRates?: CommissionRates;
}
/**
 * Information about the account stake, if the account is either a baker or a
 * delegator.
 *
 * @generated from protobuf message concordium.v2.AccountStakingInfo
 */
export interface AccountStakingInfo {
    /**
     * @generated from protobuf oneof: staking_info
     */
    stakingInfo: {
        oneofKind: "baker";
        /**
         * The account is a baker.
         *
         * @generated from protobuf field: concordium.v2.AccountStakingInfo.Baker baker = 1;
         */
        baker: AccountStakingInfo_Baker;
    } | {
        oneofKind: "delegator";
        /**
         * The account is a delegator.
         *
         * @generated from protobuf field: concordium.v2.AccountStakingInfo.Delegator delegator = 2;
         */
        delegator: AccountStakingInfo_Delegator;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message concordium.v2.AccountStakingInfo.Baker
 */
export interface AccountStakingInfo_Baker {
    /**
     * Amount staked at present.
     *
     * @generated from protobuf field: concordium.v2.Amount staked_amount = 1;
     */
    stakedAmount?: Amount;
    /**
     * A flag indicating whether rewards paid to the baker are automatically
     * restaked or not.
     *
     * @generated from protobuf field: bool restake_earnings = 2;
     */
    restakeEarnings: boolean;
    /**
     * Information about the baker that is staking.
     *
     * @generated from protobuf field: concordium.v2.BakerInfo baker_info = 3;
     */
    bakerInfo?: BakerInfo;
    /**
     * If present, any pending change to the delegated stake.
     *
     * @generated from protobuf field: optional concordium.v2.StakePendingChange pending_change = 4;
     */
    pendingChange?: StakePendingChange;
    /**
     * Present if the account is currently a baker, i.e., it is in the baking
     * committee of the current epoch.
     *
     * @generated from protobuf field: optional concordium.v2.BakerPoolInfo pool_info = 5;
     */
    poolInfo?: BakerPoolInfo;
}
/**
 * @generated from protobuf message concordium.v2.AccountStakingInfo.Delegator
 */
export interface AccountStakingInfo_Delegator {
    /**
     * The amount that the account delegates.
     *
     * @generated from protobuf field: concordium.v2.Amount staked_amount = 1;
     */
    stakedAmount?: Amount;
    /**
     * Whether the earnings are automatically added to the staked amount.
     *
     * @generated from protobuf field: bool restake_earnings = 2;
     */
    restakeEarnings: boolean;
    /**
     * The entity to which the account delegates.
     *
     * @generated from protobuf field: concordium.v2.DelegationTarget target = 3;
     */
    target?: DelegationTarget;
    /**
     * If present, any pending change to the delegated stake.
     *
     * @generated from protobuf field: optional concordium.v2.StakePendingChange pending_change = 4;
     */
    pendingChange?: StakePendingChange;
}
/**
 * A sequence number that determines the ordering of transactions from the
 * account. The minimum sequence number is 1.
 *
 * @generated from protobuf message concordium.v2.SequenceNumber
 */
export interface SequenceNumber {
    /**
     * The sequence number.
     *
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * A sequence number that determines the ordering of update transactions.
 * Equivalent to `SequenceNumber` for account transactions.
 * Update sequence numbers are per update type and the minimum value is 1.
 *
 * @generated from protobuf message concordium.v2.UpdateSequenceNumber
 */
export interface UpdateSequenceNumber {
    /**
     * The sequence number.
     *
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * An amount of microCCD.
 *
 * @generated from protobuf message concordium.v2.Amount
 */
export interface Amount {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * Index of a credential on an account.
 *
 * @generated from protobuf message concordium.v2.CredentialIndex
 */
export interface CredentialIndex {
    /**
     * @generated from protobuf field: uint32 value = 1;
     */
    value: number;
}
/**
 * The number of signatures required to sign.
 *
 * @generated from protobuf message concordium.v2.SignatureThreshold
 */
export interface SignatureThreshold {
    /**
     * @generated from protobuf field: uint32 value = 1;
     */
    value: number;
}
/**
 * The number of credentials required to sign an account transaction.
 *
 * @generated from protobuf message concordium.v2.AccountThreshold
 */
export interface AccountThreshold {
    /**
     * @generated from protobuf field: uint32 value = 1;
     */
    value: number;
}
/**
 * An account encryption key. Always 96 bytes.
 *
 * @generated from protobuf message concordium.v2.EncryptionKey
 */
export interface EncryptionKey {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * An address of an account. Always 32 bytes.
 *
 * @generated from protobuf message concordium.v2.AccountAddress
 */
export interface AccountAddress {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * An address of either a contract or an account.
 *
 * @generated from protobuf message concordium.v2.Address
 */
export interface Address {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "account";
        /**
         * @generated from protobuf field: concordium.v2.AccountAddress account = 1;
         */
        account: AccountAddress;
    } | {
        oneofKind: "contract";
        /**
         * @generated from protobuf field: concordium.v2.ContractAddress contract = 2;
         */
        contract: ContractAddress;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A public key used to verify transaction signatures from an account.
 *
 * @generated from protobuf message concordium.v2.AccountVerifyKey
 */
export interface AccountVerifyKey {
    /**
     * @generated from protobuf oneof: key
     */
    key: {
        oneofKind: "ed25519Key";
        /**
         * @generated from protobuf field: bytes ed25519_key = 1;
         */
        ed25519Key: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Public keys of a single credential.
 *
 * @generated from protobuf message concordium.v2.CredentialPublicKeys
 */
export interface CredentialPublicKeys {
    /**
     * @generated from protobuf field: map<uint32, concordium.v2.AccountVerifyKey> keys = 1;
     */
    keys: {
        [key: number]: AccountVerifyKey;
    };
    /**
     * @generated from protobuf field: concordium.v2.SignatureThreshold threshold = 2;
     */
    threshold?: SignatureThreshold;
}
/**
 * A registration ID of a credential, derived from the secret PRF key and a
 * nonce. This is always 48 bytes long.
 *
 * @generated from protobuf message concordium.v2.CredentialRegistrationId
 */
export interface CredentialRegistrationId {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * An index of the identity provider that identifies them uniquely in the
 * context of a specific chain.
 *
 * @generated from protobuf message concordium.v2.IdentityProviderIdentity
 */
export interface IdentityProviderIdentity {
    /**
     * @generated from protobuf field: uint32 value = 1;
     */
    value: number;
}
/**
 * Representation of the pair of a year and month.
 *
 * @generated from protobuf message concordium.v2.YearMonth
 */
export interface YearMonth {
    /**
     * @generated from protobuf field: uint32 year = 1;
     */
    year: number;
    /**
     * @generated from protobuf field: uint32 month = 2;
     */
    month: number;
}
/**
 * Policy on a credential.
 *
 * @generated from protobuf message concordium.v2.Policy
 */
export interface Policy {
    /**
     * The year and month when the identity object from which the credential is
     * derived was created.
     *
     * @generated from protobuf field: concordium.v2.YearMonth created_at = 1;
     */
    createdAt?: YearMonth;
    /**
     * The last year and month when the credential is still valid. After this
     * expires an account can no longer be created from the credential.
     *
     * @generated from protobuf field: concordium.v2.YearMonth valid_to = 2;
     */
    validTo?: YearMonth;
    /**
     * Mapping from attribute tags to attribute values. Attribute tags are always
     * representable in a single `u8`, attribute values are never more than 31
     * bytes in length.
     *
     * @generated from protobuf field: map<uint32, bytes> attributes = 3;
     */
    attributes: {
        [key: number]: Uint8Array;
    };
}
/**
 * Values contained in an initial credential.
 *
 * @generated from protobuf message concordium.v2.InitialCredentialValues
 */
export interface InitialCredentialValues {
    /**
     * Public keys of the credential.
     *
     * @generated from protobuf field: concordium.v2.CredentialPublicKeys keys = 1;
     */
    keys?: CredentialPublicKeys;
    /**
     * Its registration ID.
     *
     * @generated from protobuf field: concordium.v2.CredentialRegistrationId cred_id = 2;
     */
    credId?: CredentialRegistrationId;
    /**
     * The identity provider who signed the identity object from which this
     * credential is derived.
     *
     * @generated from protobuf field: concordium.v2.IdentityProviderIdentity ip_id = 3;
     */
    ipId?: IdentityProviderIdentity;
    /**
     * Policy of this credential.
     *
     * @generated from protobuf field: concordium.v2.Policy policy = 4;
     */
    policy?: Policy;
}
/**
 * Data relating to a single anonymity revoker sent by the account holder to
 * the chain.
 *
 * @generated from protobuf message concordium.v2.ChainArData
 */
export interface ChainArData {
    /**
     * Share of the encryption of IdCredPub.
     *
     * @generated from protobuf field: bytes enc_id_cred_pub_share = 1;
     */
    encIdCredPubShare: Uint8Array;
}
/**
 * The number of anonymity revokers needed to revoke anonymity of a credential
 * holder.
 *
 * @generated from protobuf message concordium.v2.ArThreshold
 */
export interface ArThreshold {
    /**
     * @generated from protobuf field: uint32 value = 1;
     */
    value: number;
}
/**
 * A single commitment in the G1 group of the BLS curve. This is always 48 bytes
 * in length.
 *
 * @generated from protobuf message concordium.v2.Commitment
 */
export interface Commitment {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Commitments that are part of a normal credential.
 *
 * @generated from protobuf message concordium.v2.CredentialCommitments
 */
export interface CredentialCommitments {
    /**
     * Commitment to the PRF key.
     *
     * @generated from protobuf field: concordium.v2.Commitment prf = 1;
     */
    prf?: Commitment;
    /**
     * Commitment to the counter used to generate the credential registration id.
     *
     * @generated from protobuf field: concordium.v2.Commitment cred_counter = 2;
     */
    credCounter?: Commitment;
    /**
     * Commitment to the `max_accounts` value, which determines the maximum number
     * of credentials that may be created from the identity object.
     *
     * @generated from protobuf field: concordium.v2.Commitment max_accounts = 3;
     */
    maxAccounts?: Commitment;
    /**
     * Commitments to the attributes which have not been revealed in the policy.
     *
     * @generated from protobuf field: map<uint32, concordium.v2.Commitment> attributes = 4;
     */
    attributes: {
        [key: number]: Commitment;
    };
    /**
     * List of commitments to the coefficients of the sharing polynomial. This
     * polynomial is used in a shared encryption of `id_cred_pub` among the
     * anonymity revokers.
     *
     * @generated from protobuf field: repeated concordium.v2.Commitment id_cred_sec_sharing_coeff = 5;
     */
    idCredSecSharingCoeff: Commitment[];
}
/**
 * Values contained in a normal (non-initial) credential.
 *
 * @generated from protobuf message concordium.v2.NormalCredentialValues
 */
export interface NormalCredentialValues {
    /**
     * Public keys of the credential.
     *
     * @generated from protobuf field: concordium.v2.CredentialPublicKeys keys = 1;
     */
    keys?: CredentialPublicKeys;
    /**
     * Its registration ID.
     *
     * @generated from protobuf field: concordium.v2.CredentialRegistrationId cred_id = 2;
     */
    credId?: CredentialRegistrationId;
    /**
     * The identity provider who signed the identity object from which this
     * credential is derived.
     *
     * @generated from protobuf field: concordium.v2.IdentityProviderIdentity ip_id = 3;
     */
    ipId?: IdentityProviderIdentity;
    /**
     * Policy of this credential.
     *
     * @generated from protobuf field: concordium.v2.Policy policy = 4;
     */
    policy?: Policy;
    /**
     * The number of anonymity revokers that must work together to revoke the
     * anonymity of the credential holder.
     *
     * @generated from protobuf field: concordium.v2.ArThreshold ar_threshold = 5;
     */
    arThreshold?: ArThreshold;
    /**
     * Mapping from anonymity revoker identities to revocation data for the given anonymity revoker.
     *
     * @generated from protobuf field: map<uint32, concordium.v2.ChainArData> ar_data = 6;
     */
    arData: {
        [key: number]: ChainArData;
    };
    /**
     * Commitments to attributes which have not been revealed.
     *
     * @generated from protobuf field: concordium.v2.CredentialCommitments commitments = 7;
     */
    commitments?: CredentialCommitments;
}
/**
 * Credential that is part of an account.
 *
 * @generated from protobuf message concordium.v2.AccountCredential
 */
export interface AccountCredential {
    /**
     * @generated from protobuf oneof: credential_values
     */
    credentialValues: {
        oneofKind: "initial";
        /**
         * @generated from protobuf field: concordium.v2.InitialCredentialValues initial = 1;
         */
        initial: InitialCredentialValues;
    } | {
        oneofKind: "normal";
        /**
         * @generated from protobuf field: concordium.v2.NormalCredentialValues normal = 2;
         */
        normal: NormalCredentialValues;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message concordium.v2.Cooldown
 */
export interface Cooldown {
    /**
     * The time in milliseconds since the Unix epoch when the cooldown period
     * ends.
     *
     * @generated from protobuf field: concordium.v2.Timestamp end_time = 1;
     */
    endTime?: Timestamp;
    /**
     * The amount that is in cooldown and set to be released at the end of the
     * cooldown period.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 2;
     */
    amount?: Amount;
    /**
     * The status of the cooldown.
     *
     * @generated from protobuf field: concordium.v2.Cooldown.CooldownStatus status = 3;
     */
    status: Cooldown_CooldownStatus;
}
/**
 * The status of a cooldown. When stake is removed from a baker or delegator
 * (from protocol version 7) it first enters the pre-pre-cooldown state.
 * The next time the stake snaphot is taken (at the epoch transition before
 * a payday) it enters the pre-cooldown state. At the subsequent payday, it
 * enters the cooldown state. At the payday after the end of the cooldown
 * period, the stake is finally released.
 *
 * @generated from protobuf enum concordium.v2.Cooldown.CooldownStatus
 */
export enum Cooldown_CooldownStatus {
    /**
     * The amount is in cooldown and will expire at the specified time, becoming available
     * at the subsequent pay day.
     *
     * @generated from protobuf enum value: COOLDOWN = 0;
     */
    COOLDOWN = 0,
    /**
     * The amount will enter cooldown at the next pay day. The specified end time is
     * projected to be the end of the cooldown period, but the actual end time will be
     * determined at the payday, and may be different if the global cooldown period
     * changes.
     *
     * @generated from protobuf enum value: PRE_COOLDOWN = 1;
     */
    PRE_COOLDOWN = 1,
    /**
     * The amount will enter pre-cooldown at the next snapshot epoch (i.e. the epoch
     * transition before a pay day transition). As with pre-cooldown, the specified
     * end time is projected, but the actual end time will be determined later.
     *
     * @generated from protobuf enum value: PRE_PRE_COOLDOWN = 2;
     */
    PRE_PRE_COOLDOWN = 2
}
/**
 * Information about the account at a particular point in time.
 *
 * @generated from protobuf message concordium.v2.AccountInfo
 */
export interface AccountInfo {
    /**
     * Next sequence number to be used for transactions signed from this account.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber sequence_number = 1;
     */
    sequenceNumber?: SequenceNumber;
    /**
     * Current (unencrypted) balance of the account.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 2;
     */
    amount?: Amount;
    /**
     * Release schedule for any locked up amount. This could be an empty
     * release schedule.
     *
     * @generated from protobuf field: concordium.v2.ReleaseSchedule schedule = 3;
     */
    schedule?: ReleaseSchedule;
    /**
     * Map of all currently active credentials on the account.
     * This includes public keys that can sign for the given credentials, as
     * well as any revealed attributes. This map always contains a credential
     * with index 0.
     *
     * @generated from protobuf field: map<uint32, concordium.v2.AccountCredential> creds = 4;
     */
    creds: {
        [key: number]: AccountCredential;
    };
    /**
     * Lower bound on how many credentials must sign any given transaction from
     * this account.
     *
     * @generated from protobuf field: concordium.v2.AccountThreshold threshold = 5;
     */
    threshold?: AccountThreshold;
    /**
     * The encrypted balance of the account.
     *
     * @generated from protobuf field: concordium.v2.EncryptedBalance encrypted_balance = 6;
     */
    encryptedBalance?: EncryptedBalance;
    /**
     * The public key for sending encrypted balances to the account.
     *
     * @generated from protobuf field: concordium.v2.EncryptionKey encryption_key = 7;
     */
    encryptionKey?: EncryptionKey;
    /**
     * Internal index of the account. Accounts on the chain get sequential
     * indices. These should generally not be used outside of the chain,
     * the account address is meant to be used to refer to accounts,
     * however the account index serves the role of the baker id, if the
     * account is a baker. Hence it is exposed here as well.
     *
     * @generated from protobuf field: concordium.v2.AccountIndex index = 8;
     */
    index?: AccountIndex;
    /**
     * Present if the account is a baker or delegator. In that case
     * it is the information about the baker or delegator.
     *
     * @generated from protobuf field: optional concordium.v2.AccountStakingInfo stake = 9;
     */
    stake?: AccountStakingInfo;
    /**
     * Canonical address of the account. This is derived from the first credential
     * that created the account.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress address = 10;
     */
    address?: AccountAddress;
    /**
     * The stake on the account that is in cooldown.
     * There can be multiple amounts in cooldown that expire at different times.
     * This was introduced in protocol version 7, and so is not present in
     * earlier protocol versions.
     *
     * @generated from protobuf field: repeated concordium.v2.Cooldown cooldowns = 11;
     */
    cooldowns: Cooldown[];
    /**
     * The available (unencrypted) balance of the account (i.e. that can be transferred
     * or used to pay for transactions). This is the balance minus the locked amount.
     * The locked amount is the maximum of the amount in the release schedule and
     * the total amount that is actively staked or in cooldown (inactive stake).
     * This was introduced in node version 7.0.
     *
     * @generated from protobuf field: concordium.v2.Amount available_balance = 12;
     */
    availableBalance?: Amount;
}
/**
 * Input to queries which take a block as a parameter.
 *
 * @generated from protobuf message concordium.v2.BlockHashInput
 */
export interface BlockHashInput {
    /**
     * @generated from protobuf oneof: block_hash_input
     */
    blockHashInput: {
        oneofKind: "best";
        /**
         * Query for the best block.
         *
         * @generated from protobuf field: concordium.v2.Empty best = 1;
         */
        best: Empty;
    } | {
        oneofKind: "lastFinal";
        /**
         * Query for the last finalized block.
         *
         * @generated from protobuf field: concordium.v2.Empty last_final = 2;
         */
        lastFinal: Empty;
    } | {
        oneofKind: "given";
        /**
         * Query for the block specified by the hash. This hash should always be 32 bytes.
         *
         * @generated from protobuf field: concordium.v2.BlockHash given = 3;
         */
        given: BlockHash;
    } | {
        oneofKind: "absoluteHeight";
        /**
         * Query for a block at absolute height, if a unique block can be identified at that height.
         *
         * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight absolute_height = 4;
         */
        absoluteHeight: AbsoluteBlockHeight;
    } | {
        oneofKind: "relativeHeight";
        /**
         * Query for a block at height relative to a genesis index.
         *
         * @generated from protobuf field: concordium.v2.BlockHashInput.RelativeHeight relative_height = 5;
         */
        relativeHeight: BlockHashInput_RelativeHeight;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Request using a relative block height.
 *
 * @generated from protobuf message concordium.v2.BlockHashInput.RelativeHeight
 */
export interface BlockHashInput_RelativeHeight {
    /**
     * Genesis index to start from.
     *
     * @generated from protobuf field: concordium.v2.GenesisIndex genesis_index = 1;
     */
    genesisIndex?: GenesisIndex;
    /**
     * Height starting from the genesis block at the genesis index.
     *
     * @generated from protobuf field: concordium.v2.BlockHeight height = 2;
     */
    height?: BlockHeight;
    /**
     * Whether to return results only from the specified genesis index (`true`),
     * or allow results from more recent genesis indices as well (`false`).
     *
     * @generated from protobuf field: bool restrict = 3;
     */
    restrict: boolean;
}
/**
 * Input to queries which take an epoch as a parameter.
 *
 * @generated from protobuf message concordium.v2.EpochRequest
 */
export interface EpochRequest {
    /**
     * @generated from protobuf oneof: epoch_request_input
     */
    epochRequestInput: {
        oneofKind: "relativeEpoch";
        /**
         * Query by genesis index and epoch number.
         *
         * @generated from protobuf field: concordium.v2.EpochRequest.RelativeEpoch relative_epoch = 1;
         */
        relativeEpoch: EpochRequest_RelativeEpoch;
    } | {
        oneofKind: "blockHash";
        /**
         * Query for the epoch of a specified block.
         *
         * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 2;
         */
        blockHash: BlockHashInput;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Request an epoch by number at a given genesis index.
 *
 * @generated from protobuf message concordium.v2.EpochRequest.RelativeEpoch
 */
export interface EpochRequest_RelativeEpoch {
    /**
     * The genesis index to query at. The query is restricted to this genesis index, and
     * will not return results for other indices even if the epoch number is out of bounds.
     *
     * @generated from protobuf field: concordium.v2.GenesisIndex genesis_index = 1;
     */
    genesisIndex?: GenesisIndex;
    /**
     * The epoch number to query at.
     *
     * @generated from protobuf field: concordium.v2.Epoch epoch = 2;
     */
    epoch?: Epoch;
}
/**
 * Input to queries which take an account as a parameter.
 *
 * @generated from protobuf message concordium.v2.AccountIdentifierInput
 */
export interface AccountIdentifierInput {
    /**
     * @generated from protobuf oneof: account_identifier_input
     */
    accountIdentifierInput: {
        oneofKind: "address";
        /**
         * Identify the account by the address of the account.
         *
         * @generated from protobuf field: concordium.v2.AccountAddress address = 1;
         */
        address: AccountAddress;
    } | {
        oneofKind: "credId";
        /**
         * Identify the account by the credential that belongs or has belonged to it.
         *
         * @generated from protobuf field: concordium.v2.CredentialRegistrationId cred_id = 2;
         */
        credId: CredentialRegistrationId;
    } | {
        oneofKind: "accountIndex";
        /**
         * Identify the account via its index.
         *
         * @generated from protobuf field: concordium.v2.AccountIndex account_index = 3;
         */
        accountIndex: AccountIndex;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Request for account information.
 *
 * @generated from protobuf message concordium.v2.AccountInfoRequest
 */
export interface AccountInfoRequest {
    /**
     * Block in which to query the account information.
     *
     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;
     */
    blockHash?: BlockHashInput;
    /**
     * Specification of the account.
     *
     * @generated from protobuf field: concordium.v2.AccountIdentifierInput account_identifier = 2;
     */
    accountIdentifier?: AccountIdentifierInput;
}
/**
 * Information about a finalized block that is part of the streaming response.
 *
 * @generated from protobuf message concordium.v2.FinalizedBlockInfo
 */
export interface FinalizedBlockInfo {
    /**
     * Hash of the block.
     *
     * @generated from protobuf field: concordium.v2.BlockHash hash = 1;
     */
    hash?: BlockHash;
    /**
     * Absolute height of the block, height 0 is the genesis block.
     *
     * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight height = 2;
     */
    height?: AbsoluteBlockHeight;
}
/**
 * Request the ancestors for the given block.
 *
 * @generated from protobuf message concordium.v2.AncestorsRequest
 */
export interface AncestorsRequest {
    /**
     * The block to get ancestors of.
     *
     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;
     */
    blockHash?: BlockHashInput;
    /**
     * The maximum number of ancestors returned.
     *
     * @generated from protobuf field: uint64 amount = 2;
     */
    amount: bigint;
}
/**
 * Request for getting the source of a smart contract module.
 *
 * @generated from protobuf message concordium.v2.ModuleSourceRequest
 */
export interface ModuleSourceRequest {
    /**
     * The block to be used for the query.
     *
     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;
     */
    blockHash?: BlockHashInput;
    /**
     * The reference of the module.
     *
     * @generated from protobuf field: concordium.v2.ModuleRef module_ref = 2;
     */
    moduleRef?: ModuleRef;
}
/**
 * Address of a smart contract instance.
 *
 * @generated from protobuf message concordium.v2.ContractAddress
 */
export interface ContractAddress {
    /**
     * The index of the smart contract.
     *
     * @generated from protobuf field: uint64 index = 1;
     */
    index: bigint;
    /**
     * The subindex of the smart contract instance.
     * Currently not used, so it is always 0.
     *
     * @generated from protobuf field: uint64 subindex = 2;
     */
    subindex: bigint;
}
/**
 * Request for getting information about a smart contract instance.
 *
 * @generated from protobuf message concordium.v2.InstanceInfoRequest
 */
export interface InstanceInfoRequest {
    /**
     * The block to be used for the query.
     *
     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;
     */
    blockHash?: BlockHashInput;
    /**
     * The address of the smart contract instance.
     *
     * @generated from protobuf field: concordium.v2.ContractAddress address = 2;
     */
    address?: ContractAddress;
}
/**
 * Information about a smart contract instance.
 *
 * @generated from protobuf message concordium.v2.InstanceInfo
 */
export interface InstanceInfo {
    /**
     * @generated from protobuf oneof: version
     */
    version: {
        oneofKind: "v0";
        /**
         * @generated from protobuf field: concordium.v2.InstanceInfo.V0 v0 = 1;
         */
        v0: InstanceInfo_V0;
    } | {
        oneofKind: "v1";
        /**
         * @generated from protobuf field: concordium.v2.InstanceInfo.V1 v1 = 2;
         */
        v1: InstanceInfo_V1;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Version 0 smart contract instance information.
 *
 * @generated from protobuf message concordium.v2.InstanceInfo.V0
 */
export interface InstanceInfo_V0 {
    /**
     * The state of the instance.
     *
     * @generated from protobuf field: concordium.v2.ContractStateV0 model = 1;
     */
    model?: ContractStateV0;
    /**
     * The account address which deployed the instance.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress owner = 2;
     */
    owner?: AccountAddress;
    /**
     * The amount of CCD tokens in the balance of the instance.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 3;
     */
    amount?: Amount;
    /**
     * A list of endpoints exposed by the instance.
     *
     * @generated from protobuf field: repeated concordium.v2.ReceiveName methods = 4;
     */
    methods: ReceiveName[];
    /**
     * The name of the smart contract of the instance.
     *
     * @generated from protobuf field: concordium.v2.InitName name = 5;
     */
    name?: InitName;
    /**
     * The module reference for the smart contract module of the instance.
     *
     * @generated from protobuf field: concordium.v2.ModuleRef source_module = 6;
     */
    sourceModule?: ModuleRef;
}
/**
 * Version 1 smart contract instance information.
 *
 * @generated from protobuf message concordium.v2.InstanceInfo.V1
 */
export interface InstanceInfo_V1 {
    /**
     * The account address which deployed the instance.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress owner = 2;
     */
    owner?: AccountAddress;
    /**
     * The amount of CCD tokens in the balance of the instance.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 3;
     */
    amount?: Amount;
    /**
     * A list of endpoints exposed by the instance.
     *
     * @generated from protobuf field: repeated concordium.v2.ReceiveName methods = 4;
     */
    methods: ReceiveName[];
    /**
     * The name of the smart contract of the instance.
     *
     * @generated from protobuf field: concordium.v2.InitName name = 5;
     */
    name?: InitName;
    /**
     * The module reference for the smart contract module of the instance.
     *
     * @generated from protobuf field: concordium.v2.ModuleRef source_module = 6;
     */
    sourceModule?: ModuleRef;
}
/**
 * A smart contract instance key-value pair.
 *
 * @generated from protobuf message concordium.v2.InstanceStateKVPair
 */
export interface InstanceStateKVPair {
    /**
     * @generated from protobuf field: bytes key = 1;
     */
    key: Uint8Array;
    /**
     * @generated from protobuf field: bytes value = 2;
     */
    value: Uint8Array;
}
/**
 * Request for a specific key of a smart contract instance state.
 *
 * @generated from protobuf message concordium.v2.InstanceStateLookupRequest
 */
export interface InstanceStateLookupRequest {
    /**
     * The block to be used for the query.
     *
     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;
     */
    blockHash?: BlockHashInput;
    /**
     * The address of the smart contract instance.
     *
     * @generated from protobuf field: concordium.v2.ContractAddress address = 2;
     */
    address?: ContractAddress;
    /**
     * Key to look up. If the instance is a V0 instance then this will not be used.
     *
     * @generated from protobuf field: bytes key = 3;
     */
    key: Uint8Array;
}
/**
 * Value at the requested key of a smart contract instance state. For V0
 * contracts this will always be the entire state of the contract.
 *
 * @generated from protobuf message concordium.v2.InstanceStateValueAtKey
 */
export interface InstanceStateValueAtKey {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * The receive name of a smart contract function. Expected format:
 * `<contract_name>.<func_name>`. It must only consist of atmost 100 ASCII
 * alphanumeric or punctuation characters, and must contain a '.'.
 *
 * @generated from protobuf message concordium.v2.ReceiveName
 */
export interface ReceiveName {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
/**
 * The init name of a smart contract function. Expected format:
 * `init_<contract_name>`. It must only consist of atmost 100 ASCII alphanumeric
 * or punctuation characters, must not contain a '.' and must start with
 * 'init_'.
 *
 * @generated from protobuf message concordium.v2.InitName
 */
export interface InitName {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
/**
 * Parameter to a smart contract initialization or invocation.
 *
 * @generated from protobuf message concordium.v2.Parameter
 */
export interface Parameter {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * A smart contract v0 state.
 *
 * @generated from protobuf message concordium.v2.ContractStateV0
 */
export interface ContractStateV0 {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Status of a block item known to the node.
 *
 * @generated from protobuf message concordium.v2.BlockItemStatus
 */
export interface BlockItemStatus {
    /**
     * @generated from protobuf oneof: status
     */
    status: {
        oneofKind: "received";
        /**
         * Block item is received, but not yet in any blocks.
         *
         * @generated from protobuf field: concordium.v2.Empty received = 1;
         */
        received: Empty;
    } | {
        oneofKind: "committed";
        /**
         * Block item is committed to one or more blocks. The outcomes are listed
         * for each block. Note that in the vast majority of cases the outcome of a
         * transaction should not be dependent on the block it is in, but this
         * can in principle happen.
         *
         * @generated from protobuf field: concordium.v2.BlockItemStatus.Committed committed = 2;
         */
        committed: BlockItemStatus_Committed;
    } | {
        oneofKind: "finalized";
        /**
         * Block item is finalized in the given block, with the given summary.
         *
         * @generated from protobuf field: concordium.v2.BlockItemStatus.Finalized finalized = 3;
         */
        finalized: BlockItemStatus_Finalized;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message concordium.v2.BlockItemStatus.Committed
 */
export interface BlockItemStatus_Committed {
    /**
     * @generated from protobuf field: repeated concordium.v2.BlockItemSummaryInBlock outcomes = 1;
     */
    outcomes: BlockItemSummaryInBlock[];
}
/**
 * @generated from protobuf message concordium.v2.BlockItemStatus.Finalized
 */
export interface BlockItemStatus_Finalized {
    /**
     * @generated from protobuf field: concordium.v2.BlockItemSummaryInBlock outcome = 1;
     */
    outcome?: BlockItemSummaryInBlock;
}
/**
 * A block item summary together with a block hash. Used in BlockItemStatus.
 *
 * @generated from protobuf message concordium.v2.BlockItemSummaryInBlock
 */
export interface BlockItemSummaryInBlock {
    /**
     * The block hash.
     *
     * @generated from protobuf field: concordium.v2.BlockHash block_hash = 1;
     */
    blockHash?: BlockHash;
    /**
     * The block item summary.
     *
     * @generated from protobuf field: concordium.v2.BlockItemSummary outcome = 2;
     */
    outcome?: BlockItemSummary;
}
/**
 * Energy is used to count exact execution cost.
 * This cost is then converted to CCD amounts.
 *
 * @generated from protobuf message concordium.v2.Energy
 */
export interface Energy {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * A number representing a slot for baking a block.
 *
 * @generated from protobuf message concordium.v2.Slot
 */
export interface Slot {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * The response for getNextAccountSequenceNumber.
 *
 * @generated from protobuf message concordium.v2.NextAccountSequenceNumber
 */
export interface NextAccountSequenceNumber {
    /**
     * The best guess for the available account sequence number.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber sequence_number = 1;
     */
    sequenceNumber?: SequenceNumber;
    /**
     * Whether the guess relies on any non-finalized transactions. If true all of the relevant transactions are finalized.
     *
     * @generated from protobuf field: bool all_final = 2;
     */
    allFinal: boolean;
}
/**
 * A duration of milliseconds.
 *
 * @generated from protobuf message concordium.v2.Duration
 */
export interface Duration {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * A reason for why a transaction was rejected. Rejected means included in a
 * block, but the desired action was not achieved. The only effect of a
 * rejected transaction is payment.
 *
 * @generated from protobuf message concordium.v2.RejectReason
 */
export interface RejectReason {
    /**
     * @generated from protobuf oneof: reason
     */
    reason: {
        oneofKind: "moduleNotWf";
        /**
         * Raised while validating a Wasm module that is not well formed.
         *
         * @generated from protobuf field: concordium.v2.Empty module_not_wf = 1;
         */
        moduleNotWf: Empty;
    } | {
        oneofKind: "moduleHashAlreadyExists";
        /**
         * The smart contract module hash already exists.
         *
         * @generated from protobuf field: concordium.v2.ModuleRef module_hash_already_exists = 2;
         */
        moduleHashAlreadyExists: ModuleRef;
    } | {
        oneofKind: "invalidAccountReference";
        /**
         * Account does not exist.
         *
         * @generated from protobuf field: concordium.v2.AccountAddress invalid_account_reference = 3;
         */
        invalidAccountReference: AccountAddress;
    } | {
        oneofKind: "invalidInitMethod";
        /**
         * Reference to a non-existing contract init method.
         *
         * @generated from protobuf field: concordium.v2.RejectReason.InvalidInitMethod invalid_init_method = 4;
         */
        invalidInitMethod: RejectReason_InvalidInitMethod;
    } | {
        oneofKind: "invalidReceiveMethod";
        /**
         * Reference to a non-existing contract receive method.
         *
         * @generated from protobuf field: concordium.v2.RejectReason.InvalidReceiveMethod invalid_receive_method = 5;
         */
        invalidReceiveMethod: RejectReason_InvalidReceiveMethod;
    } | {
        oneofKind: "invalidModuleReference";
        /**
         * Reference to a non-existing smart contract module.
         *
         * @generated from protobuf field: concordium.v2.ModuleRef invalid_module_reference = 6;
         */
        invalidModuleReference: ModuleRef;
    } | {
        oneofKind: "invalidContractAddress";
        /**
         * Contract instance does not exist.
         *
         * @generated from protobuf field: concordium.v2.ContractAddress invalid_contract_address = 7;
         */
        invalidContractAddress: ContractAddress;
    } | {
        oneofKind: "runtimeFailure";
        /**
         * Runtime exception occurred when running either the init or receive
         * method.
         *
         * @generated from protobuf field: concordium.v2.Empty runtime_failure = 8;
         */
        runtimeFailure: Empty;
    } | {
        oneofKind: "amountTooLarge";
        /**
         * When one wishes to transfer an amount from A to B but there
         * are not enough funds on account/contract A to make this
         * possible. The data are the from address and the amount to transfer.
         *
         * @generated from protobuf field: concordium.v2.RejectReason.AmountTooLarge amount_too_large = 9;
         */
        amountTooLarge: RejectReason_AmountTooLarge;
    } | {
        oneofKind: "serializationFailure";
        /**
         * Serialization of the body failed.
         *
         * @generated from protobuf field: concordium.v2.Empty serialization_failure = 10;
         */
        serializationFailure: Empty;
    } | {
        oneofKind: "outOfEnergy";
        /**
         * We ran of out energy to process this transaction.
         *
         * @generated from protobuf field: concordium.v2.Empty out_of_energy = 11;
         */
        outOfEnergy: Empty;
    } | {
        oneofKind: "rejectedInit";
        /**
         * Rejected due to contract logic in init function of a contract.
         *
         * @generated from protobuf field: concordium.v2.RejectReason.RejectedInit rejected_init = 12;
         */
        rejectedInit: RejectReason_RejectedInit;
    } | {
        oneofKind: "rejectedReceive";
        /**
         * Rejected due to contract logic in receive function of a contract.
         *
         * @generated from protobuf field: concordium.v2.RejectReason.RejectedReceive rejected_receive = 13;
         */
        rejectedReceive: RejectReason_RejectedReceive;
    } | {
        oneofKind: "invalidProof";
        /**
         * Proof that the baker owns relevant private keys is not valid.
         *
         * @generated from protobuf field: concordium.v2.Empty invalid_proof = 14;
         */
        invalidProof: Empty;
    } | {
        oneofKind: "alreadyABaker";
        /**
         * Tried to add baker for an account that already has a baker.
         *
         * @generated from protobuf field: concordium.v2.BakerId already_a_baker = 15;
         */
        alreadyABaker: BakerId;
    } | {
        oneofKind: "notABaker";
        /**
         * Tried to remove a baker for an account that has no baker.
         *
         * @generated from protobuf field: concordium.v2.AccountAddress not_a_baker = 16;
         */
        notABaker: AccountAddress;
    } | {
        oneofKind: "insufficientBalanceForBakerStake";
        /**
         * The amount on the account was insufficient to cover the proposed stake.
         *
         * @generated from protobuf field: concordium.v2.Empty insufficient_balance_for_baker_stake = 17;
         */
        insufficientBalanceForBakerStake: Empty;
    } | {
        oneofKind: "stakeUnderMinimumThresholdForBaking";
        /**
         * The amount provided is under the threshold required for becoming a baker.
         *
         * @generated from protobuf field: concordium.v2.Empty stake_under_minimum_threshold_for_baking = 18;
         */
        stakeUnderMinimumThresholdForBaking: Empty;
    } | {
        oneofKind: "bakerInCooldown";
        /**
         * The change could not be made because the baker is in cooldown for
         * another change.
         *
         * @generated from protobuf field: concordium.v2.Empty baker_in_cooldown = 19;
         */
        bakerInCooldown: Empty;
    } | {
        oneofKind: "duplicateAggregationKey";
        /**
         * A baker with the given aggregation key already exists.
         *
         * @generated from protobuf field: concordium.v2.BakerAggregationVerifyKey duplicate_aggregation_key = 20;
         */
        duplicateAggregationKey: BakerAggregationVerifyKey;
    } | {
        oneofKind: "nonExistentCredentialId";
        /**
         * Encountered credential ID that does not exist.
         *
         * @generated from protobuf field: concordium.v2.Empty non_existent_credential_id = 21;
         */
        nonExistentCredentialId: Empty;
    } | {
        oneofKind: "keyIndexAlreadyInUse";
        /**
         * Attempted to add an account key to a key index already in use.
         *
         * @generated from protobuf field: concordium.v2.Empty key_index_already_in_use = 22;
         */
        keyIndexAlreadyInUse: Empty;
    } | {
        oneofKind: "invalidAccountThreshold";
        /**
         * When the account threshold is updated, it must not exceed the amount of
         * existing keys.
         *
         * @generated from protobuf field: concordium.v2.Empty invalid_account_threshold = 23;
         */
        invalidAccountThreshold: Empty;
    } | {
        oneofKind: "invalidCredentialKeySignThreshold";
        /**
         * When the credential key threshold is updated, it must not exceed the
         * amount of existing keys.
         *
         * @generated from protobuf field: concordium.v2.Empty invalid_credential_key_sign_threshold = 24;
         */
        invalidCredentialKeySignThreshold: Empty;
    } | {
        oneofKind: "invalidEncryptedAmountTransferProof";
        /**
         * Proof for an encrypted amount transfer did not validate.
         *
         * @generated from protobuf field: concordium.v2.Empty invalid_encrypted_amount_transfer_proof = 25;
         */
        invalidEncryptedAmountTransferProof: Empty;
    } | {
        oneofKind: "invalidTransferToPublicProof";
        /**
         * Proof for a secret to public transfer did not validate.
         *
         * @generated from protobuf field: concordium.v2.Empty invalid_transfer_to_public_proof = 26;
         */
        invalidTransferToPublicProof: Empty;
    } | {
        oneofKind: "encryptedAmountSelfTransfer";
        /**
         * Account tried to transfer an encrypted amount to itself, that's not
         * allowed.
         *
         * @generated from protobuf field: concordium.v2.AccountAddress encrypted_amount_self_transfer = 27;
         */
        encryptedAmountSelfTransfer: AccountAddress;
    } | {
        oneofKind: "invalidIndexOnEncryptedTransfer";
        /**
         * The provided index is below the start index or above `startIndex +
         * length incomingAmounts`.
         *
         * @generated from protobuf field: concordium.v2.Empty invalid_index_on_encrypted_transfer = 28;
         */
        invalidIndexOnEncryptedTransfer: Empty;
    } | {
        oneofKind: "zeroScheduledAmount";
        /**
         * The transfer with schedule is going to send 0 tokens.
         *
         * @generated from protobuf field: concordium.v2.Empty zero_scheduledAmount = 29;
         */
        zeroScheduledAmount: Empty;
    } | {
        oneofKind: "nonIncreasingSchedule";
        /**
         * The transfer with schedule has a non strictly increasing schedule.
         *
         * @generated from protobuf field: concordium.v2.Empty non_increasing_schedule = 30;
         */
        nonIncreasingSchedule: Empty;
    } | {
        oneofKind: "firstScheduledReleaseExpired";
        /**
         * The first scheduled release in a transfer with schedule has already
         * expired.
         *
         * @generated from protobuf field: concordium.v2.Empty first_scheduled_release_expired = 31;
         */
        firstScheduledReleaseExpired: Empty;
    } | {
        oneofKind: "scheduledSelfTransfer";
        /**
         * Account tried to transfer with schedule to itself, that's not allowed.
         *
         * @generated from protobuf field: concordium.v2.AccountAddress scheduled_self_transfer = 32;
         */
        scheduledSelfTransfer: AccountAddress;
    } | {
        oneofKind: "invalidCredentials";
        /**
         * At least one of the credentials was either malformed or its proof was
         * incorrect.
         *
         * @generated from protobuf field: concordium.v2.Empty invalid_credentials = 33;
         */
        invalidCredentials: Empty;
    } | {
        oneofKind: "duplicateCredIds";
        /**
         * Some of the credential IDs already exist or are duplicated in the
         * transaction.
         *
         * @generated from protobuf field: concordium.v2.RejectReason.DuplicateCredIds duplicate_cred_ids = 34;
         */
        duplicateCredIds: RejectReason_DuplicateCredIds;
    } | {
        oneofKind: "nonExistentCredIds";
        /**
         * A credential id that was to be removed is not part of the account.
         *
         * @generated from protobuf field: concordium.v2.RejectReason.NonExistentCredIds non_existent_cred_ids = 35;
         */
        nonExistentCredIds: RejectReason_NonExistentCredIds;
    } | {
        oneofKind: "removeFirstCredential";
        /**
         * Attemp to remove the first credential.
         *
         * @generated from protobuf field: concordium.v2.Empty remove_first_credential = 36;
         */
        removeFirstCredential: Empty;
    } | {
        oneofKind: "credentialHolderDidNotSign";
        /**
         * The credential holder of the keys to be updated did not sign the
         * transaction.
         *
         * @generated from protobuf field: concordium.v2.Empty credential_holder_did_not_sign = 37;
         */
        credentialHolderDidNotSign: Empty;
    } | {
        oneofKind: "notAllowedMultipleCredentials";
        /**
         * Account is not allowed to have multiple credentials because it contains
         * a non-zero encrypted transfer.
         *
         * @generated from protobuf field: concordium.v2.Empty not_allowed_multiple_credentials = 38;
         */
        notAllowedMultipleCredentials: Empty;
    } | {
        oneofKind: "notAllowedToReceiveEncrypted";
        /**
         * The account is not allowed to receive encrypted transfers because it has
         * multiple credentials.
         *
         * @generated from protobuf field: concordium.v2.Empty not_allowed_to_receive_encrypted = 39;
         */
        notAllowedToReceiveEncrypted: Empty;
    } | {
        oneofKind: "notAllowedToHandleEncrypted";
        /**
         * The account is not allowed to send encrypted transfers (or transfer
         * from/to public to/from encrypted).
         *
         * @generated from protobuf field: concordium.v2.Empty not_allowed_to_handle_encrypted = 40;
         */
        notAllowedToHandleEncrypted: Empty;
    } | {
        oneofKind: "missingBakerAddParameters";
        /**
         * A configure baker transaction is missing one or more arguments in order
         * to add a baker.
         *
         * @generated from protobuf field: concordium.v2.Empty missing_baker_add_parameters = 41;
         */
        missingBakerAddParameters: Empty;
    } | {
        oneofKind: "finalizationRewardCommissionNotInRange";
        /**
         * Finalization reward commission is not in the valid range for a baker.
         *
         * @generated from protobuf field: concordium.v2.Empty finalization_reward_commission_not_in_range = 42;
         */
        finalizationRewardCommissionNotInRange: Empty;
    } | {
        oneofKind: "bakingRewardCommissionNotInRange";
        /**
         * Baking reward commission is not in the valid range for a baker.
         *
         * @generated from protobuf field: concordium.v2.Empty baking_reward_commission_not_in_range = 43;
         */
        bakingRewardCommissionNotInRange: Empty;
    } | {
        oneofKind: "transactionFeeCommissionNotInRange";
        /**
         * Transaction fee commission is not in the valid range for a baker.
         *
         * @generated from protobuf field: concordium.v2.Empty transaction_fee_commission_not_in_range = 44;
         */
        transactionFeeCommissionNotInRange: Empty;
    } | {
        oneofKind: "alreadyADelegator";
        /**
         * Tried to add baker for an account that already has a delegator.
         *
         * @generated from protobuf field: concordium.v2.Empty already_a_delegator = 45;
         */
        alreadyADelegator: Empty;
    } | {
        oneofKind: "insufficientBalanceForDelegationStake";
        /**
         * The amount on the account was insufficient to cover the proposed stake.
         *
         * @generated from protobuf field: concordium.v2.Empty insufficient_balance_for_delegation_stake = 46;
         */
        insufficientBalanceForDelegationStake: Empty;
    } | {
        oneofKind: "missingDelegationAddParameters";
        /**
         * A configure delegation transaction is missing one or more arguments in
         * order to add a delegator.
         *
         * @generated from protobuf field: concordium.v2.Empty missing_delegation_add_parameters = 47;
         */
        missingDelegationAddParameters: Empty;
    } | {
        oneofKind: "insufficientDelegationStake";
        /**
         * Delegation stake when adding a delegator was 0.
         *
         * @generated from protobuf field: concordium.v2.Empty insufficient_delegation_stake = 48;
         */
        insufficientDelegationStake: Empty;
    } | {
        oneofKind: "delegatorInCooldown";
        /**
         * Account is not a delegation account.
         *
         * @generated from protobuf field: concordium.v2.Empty delegator_in_cooldown = 49;
         */
        delegatorInCooldown: Empty;
    } | {
        oneofKind: "notADelegator";
        /**
         * Account is not a delegation account.
         *
         * @generated from protobuf field: concordium.v2.AccountAddress not_a_delegator = 50;
         */
        notADelegator: AccountAddress;
    } | {
        oneofKind: "delegationTargetNotABaker";
        /**
         * Delegation target is not a baker
         *
         * @generated from protobuf field: concordium.v2.BakerId delegation_target_not_a_baker = 51;
         */
        delegationTargetNotABaker: BakerId;
    } | {
        oneofKind: "stakeOverMaximumThresholdForPool";
        /**
         * The amount would result in pool capital higher than the maximum
         * threshold.
         *
         * @generated from protobuf field: concordium.v2.Empty stake_over_maximum_threshold_for_pool = 52;
         */
        stakeOverMaximumThresholdForPool: Empty;
    } | {
        oneofKind: "poolWouldBecomeOverDelegated";
        /**
         * The amount would result in pool with a too high fraction of delegated
         * capital.
         *
         * @generated from protobuf field: concordium.v2.Empty pool_would_become_over_delegated = 53;
         */
        poolWouldBecomeOverDelegated: Empty;
    } | {
        oneofKind: "poolClosed";
        /**
         * The pool is not open to delegators.
         *
         * @generated from protobuf field: concordium.v2.Empty pool_closed = 54;
         */
        poolClosed: Empty;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message concordium.v2.RejectReason.InvalidInitMethod
 */
export interface RejectReason_InvalidInitMethod {
    /**
     * @generated from protobuf field: concordium.v2.ModuleRef module_ref = 1;
     */
    moduleRef?: ModuleRef;
    /**
     * @generated from protobuf field: concordium.v2.InitName init_name = 2;
     */
    initName?: InitName;
}
/**
 * @generated from protobuf message concordium.v2.RejectReason.InvalidReceiveMethod
 */
export interface RejectReason_InvalidReceiveMethod {
    /**
     * @generated from protobuf field: concordium.v2.ModuleRef module_ref = 1;
     */
    moduleRef?: ModuleRef;
    /**
     * @generated from protobuf field: concordium.v2.ReceiveName receive_name = 2;
     */
    receiveName?: ReceiveName;
}
/**
 * @generated from protobuf message concordium.v2.RejectReason.AmountTooLarge
 */
export interface RejectReason_AmountTooLarge {
    /**
     * @generated from protobuf field: concordium.v2.Address address = 1;
     */
    address?: Address;
    /**
     * @generated from protobuf field: concordium.v2.Amount amount = 2;
     */
    amount?: Amount;
}
/**
 * @generated from protobuf message concordium.v2.RejectReason.RejectedInit
 */
export interface RejectReason_RejectedInit {
    /**
     * @generated from protobuf field: int32 reject_reason = 1;
     */
    rejectReason: number;
}
/**
 * @generated from protobuf message concordium.v2.RejectReason.RejectedReceive
 */
export interface RejectReason_RejectedReceive {
    /**
     * @generated from protobuf field: int32 reject_reason = 1;
     */
    rejectReason: number;
    /**
     * @generated from protobuf field: concordium.v2.ContractAddress contract_address = 2;
     */
    contractAddress?: ContractAddress;
    /**
     * @generated from protobuf field: concordium.v2.ReceiveName receive_name = 3;
     */
    receiveName?: ReceiveName;
    /**
     * @generated from protobuf field: concordium.v2.Parameter parameter = 4;
     */
    parameter?: Parameter;
}
/**
 * @generated from protobuf message concordium.v2.RejectReason.DuplicateCredIds
 */
export interface RejectReason_DuplicateCredIds {
    /**
     * @generated from protobuf field: repeated concordium.v2.CredentialRegistrationId ids = 1;
     */
    ids: CredentialRegistrationId[];
}
/**
 * @generated from protobuf message concordium.v2.RejectReason.NonExistentCredIds
 */
export interface RejectReason_NonExistentCredIds {
    /**
     * @generated from protobuf field: repeated concordium.v2.CredentialRegistrationId ids = 1;
     */
    ids: CredentialRegistrationId[];
}
/**
 * Data generated as part of initializing a single contract instance.
 *
 * @generated from protobuf message concordium.v2.ContractInitializedEvent
 */
export interface ContractInitializedEvent {
    /**
     * Contract version.
     *
     * @generated from protobuf field: concordium.v2.ContractVersion contract_version = 1;
     */
    contractVersion: ContractVersion;
    /**
     * Module with the source code of the contract.
     *
     * @generated from protobuf field: concordium.v2.ModuleRef origin_ref = 2;
     */
    originRef?: ModuleRef;
    /**
     * The newly assigned address of the contract.
     *
     * @generated from protobuf field: concordium.v2.ContractAddress address = 3;
     */
    address?: ContractAddress;
    /**
     * The amount the instance was initialized with.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 4;
     */
    amount?: Amount;
    /**
     * The name of the contract.
     *
     * @generated from protobuf field: concordium.v2.InitName init_name = 5;
     */
    initName?: InitName;
    /**
     * Any contract events that might have been genereated by the contract initialization.
     *
     * @generated from protobuf field: repeated concordium.v2.ContractEvent events = 6;
     */
    events: ContractEvent[];
}
/**
 * An event generated by a smart contract.
 *
 * @generated from protobuf message concordium.v2.ContractEvent
 */
export interface ContractEvent {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Data generated as part of updating a single contract instance.
 * In general a single Update transaction will
 * generate one or more of these events, together with possibly some transfers.
 *
 * @generated from protobuf message concordium.v2.InstanceUpdatedEvent
 */
export interface InstanceUpdatedEvent {
    /**
     * Contract version.
     *
     * @generated from protobuf field: concordium.v2.ContractVersion contract_version = 1;
     */
    contractVersion: ContractVersion;
    /**
     * Address of the affected instance.
     *
     * @generated from protobuf field: concordium.v2.ContractAddress address = 2;
     */
    address?: ContractAddress;
    /**
     * The origin of the message to the smart contract. This can be
     * either an account or a smart contract.
     *
     * @generated from protobuf field: concordium.v2.Address instigator = 3;
     */
    instigator?: Address;
    /**
     * The amount the method was invoked with.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 4;
     */
    amount?: Amount;
    /**
     * The parameter passed to the method.
     *
     * @generated from protobuf field: concordium.v2.Parameter parameter = 5;
     */
    parameter?: Parameter;
    /**
     * The name of the method that was executed.
     *
     * @generated from protobuf field: concordium.v2.ReceiveName receive_name = 6;
     */
    receiveName?: ReceiveName;
    /**
     * Any contract events that might have been generated by the contract execution.
     *
     * @generated from protobuf field: repeated concordium.v2.ContractEvent events = 7;
     */
    events: ContractEvent[];
}
/**
 * Effects produced by successful smart contract invocations.
 * A single invocation will produce a sequence of these effects.
 *
 * @generated from protobuf message concordium.v2.ContractTraceElement
 */
export interface ContractTraceElement {
    /**
     * @generated from protobuf oneof: element
     */
    element: {
        oneofKind: "updated";
        /**
         * A contract instance was updated.
         *
         * @generated from protobuf field: concordium.v2.InstanceUpdatedEvent updated = 1;
         */
        updated: InstanceUpdatedEvent;
    } | {
        oneofKind: "transferred";
        /**
         * A contract transferred an amount to an account.
         *
         * @generated from protobuf field: concordium.v2.ContractTraceElement.Transferred transferred = 2;
         */
        transferred: ContractTraceElement_Transferred;
    } | {
        oneofKind: "interrupted";
        /**
         * A contract was interrupted.
         * This occurs when a contract invokes another contract or makes a transfer to an account.
         *
         * @generated from protobuf field: concordium.v2.ContractTraceElement.Interrupted interrupted = 3;
         */
        interrupted: ContractTraceElement_Interrupted;
    } | {
        oneofKind: "resumed";
        /**
         * A previously interrupted contract was resumed.
         *
         * @generated from protobuf field: concordium.v2.ContractTraceElement.Resumed resumed = 4;
         */
        resumed: ContractTraceElement_Resumed;
    } | {
        oneofKind: "upgraded";
        /**
         * A contract was upgraded.
         *
         * @generated from protobuf field: concordium.v2.ContractTraceElement.Upgraded upgraded = 5;
         */
        upgraded: ContractTraceElement_Upgraded;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A contract transferred an amount to an account.
 *
 * @generated from protobuf message concordium.v2.ContractTraceElement.Transferred
 */
export interface ContractTraceElement_Transferred {
    /**
     * Sender contract.
     *
     * @generated from protobuf field: concordium.v2.ContractAddress sender = 1;
     */
    sender?: ContractAddress;
    /**
     * Amount transferred.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 2;
     */
    amount?: Amount;
    /**
     * Receiver account.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress receiver = 3;
     */
    receiver?: AccountAddress;
}
/**
 * A contract was interrupted.
 * This occurs when a contract invokes another contract or makes a transfer to an account.
 *
 * @generated from protobuf message concordium.v2.ContractTraceElement.Interrupted
 */
export interface ContractTraceElement_Interrupted {
    /**
     * The contract interrupted.
     *
     * @generated from protobuf field: concordium.v2.ContractAddress address = 1;
     */
    address?: ContractAddress;
    /**
     * The events generated up until the interruption.
     *
     * @generated from protobuf field: repeated concordium.v2.ContractEvent events = 2;
     */
    events: ContractEvent[];
}
/**
 * A previously interrupted contract was resumed.
 *
 * @generated from protobuf message concordium.v2.ContractTraceElement.Resumed
 */
export interface ContractTraceElement_Resumed {
    /**
     * The contract resumed.
     *
     * @generated from protobuf field: concordium.v2.ContractAddress address = 1;
     */
    address?: ContractAddress;
    /**
     * Whether the action that caused the interruption (invoke contract or make transfer) was successful or not.
     *
     * @generated from protobuf field: bool success = 2;
     */
    success: boolean;
}
/**
 * A previously interrupted contract was resumed.
 *
 * @generated from protobuf message concordium.v2.ContractTraceElement.Upgraded
 */
export interface ContractTraceElement_Upgraded {
    /**
     * The that was upgraded.
     *
     * @generated from protobuf field: concordium.v2.ContractAddress address = 1;
     */
    address?: ContractAddress;
    /**
     * The module from which the contract was upgraded.
     *
     * @generated from protobuf field: concordium.v2.ModuleRef from = 2;
     */
    from?: ModuleRef;
    /**
     * The module to which it was upgraded.
     *
     * @generated from protobuf field: concordium.v2.ModuleRef to = 3;
     */
    to?: ModuleRef;
}
/**
 * Result of a successful change of baker keys.
 *
 * @generated from protobuf message concordium.v2.BakerKeysEvent
 */
export interface BakerKeysEvent {
    /**
     * ID of the baker whose keys were changed.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;
     */
    bakerId?: BakerId;
    /**
     * Account address of the baker.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress account = 2;
     */
    account?: AccountAddress;
    /**
     * The new public key for verifying block signatures.
     *
     * @generated from protobuf field: concordium.v2.BakerSignatureVerifyKey sign_key = 3;
     */
    signKey?: BakerSignatureVerifyKey;
    /**
     * The new public key for verifying whether the baker won the block
     * lottery.
     *
     * @generated from protobuf field: concordium.v2.BakerElectionVerifyKey election_key = 4;
     */
    electionKey?: BakerElectionVerifyKey;
    /**
     * The new public key for verifying finalization records.
     *
     * @generated from protobuf field: concordium.v2.BakerAggregationVerifyKey aggregation_key = 5;
     */
    aggregationKey?: BakerAggregationVerifyKey;
}
/**
 * A memo which can be included as part of a transfer. Max size is 256 bytes.
 *
 * @generated from protobuf message concordium.v2.Memo
 */
export interface Memo {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * @generated from protobuf message concordium.v2.BakerStakeUpdatedData
 */
export interface BakerStakeUpdatedData {
    /**
     * Affected baker.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;
     */
    bakerId?: BakerId;
    /**
     * New stake.
     *
     * @generated from protobuf field: concordium.v2.Amount new_stake = 2;
     */
    newStake?: Amount;
    /**
     * A boolean which indicates whether it increased
     * (`true`) or decreased (`false`).
     *
     * @generated from protobuf field: bool increased = 3;
     */
    increased: boolean;
}
/**
 * Event generated when one or more encrypted amounts are consumed from the account.
 *
 * @generated from protobuf message concordium.v2.EncryptedAmountRemovedEvent
 */
export interface EncryptedAmountRemovedEvent {
    /**
     * The affected account.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress account = 1;
     */
    account?: AccountAddress;
    /**
     * The new self encrypted amount on the affected account.
     *
     * @generated from protobuf field: concordium.v2.EncryptedAmount new_amount = 2;
     */
    newAmount?: EncryptedAmount;
    /**
     * The input encrypted amount that was removed.
     *
     * @generated from protobuf field: concordium.v2.EncryptedAmount input_amount = 3;
     */
    inputAmount?: EncryptedAmount;
    /**
     * The index indicating which amounts were used.
     *
     * @generated from protobuf field: uint64 up_to_index = 4;
     */
    upToIndex: bigint;
}
/**
 * Event generated when an account receives a new encrypted amount.
 *
 * @generated from protobuf message concordium.v2.NewEncryptedAmountEvent
 */
export interface NewEncryptedAmountEvent {
    /**
     * The account onto which the amount was added.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress receiver = 1;
     */
    receiver?: AccountAddress;
    /**
     * The index the amount was assigned.
     *
     * @generated from protobuf field: uint64 new_index = 2;
     */
    newIndex: bigint;
    /**
     * The encrypted amount that was added.
     *
     * @generated from protobuf field: concordium.v2.EncryptedAmount encrypted_amount = 3;
     */
    encryptedAmount?: EncryptedAmount;
}
/**
 * @generated from protobuf message concordium.v2.EncryptedSelfAmountAddedEvent
 */
export interface EncryptedSelfAmountAddedEvent {
    /**
     * The affected account.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress account = 1;
     */
    account?: AccountAddress;
    /**
     * The new self encrypted amount of the account.
     *
     * @generated from protobuf field: concordium.v2.EncryptedAmount new_amount = 2;
     */
    newAmount?: EncryptedAmount;
    /**
     * The amount that was transferred from public to encrypted balance.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 3;
     */
    amount?: Amount;
}
/**
 * Data registered on the chain with a register data transaction.
 *
 * @generated from protobuf message concordium.v2.RegisteredData
 */
export interface RegisteredData {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Events that may result from the ConfigureBaker transaction.
 *
 * @generated from protobuf message concordium.v2.BakerEvent
 */
export interface BakerEvent {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "bakerAdded";
        /**
         * A baker was added.
         *
         * @generated from protobuf field: concordium.v2.BakerEvent.BakerAdded baker_added = 1;
         */
        bakerAdded: BakerEvent_BakerAdded;
    } | {
        oneofKind: "bakerRemoved";
        /**
         * A baker was removed.
         *
         * @generated from protobuf field: concordium.v2.BakerId baker_removed = 2;
         */
        bakerRemoved: BakerId;
    } | {
        oneofKind: "bakerStakeIncreased";
        /**
         * The baker's stake was increased.
         *
         * @generated from protobuf field: concordium.v2.BakerEvent.BakerStakeIncreased baker_stake_increased = 3;
         */
        bakerStakeIncreased: BakerEvent_BakerStakeIncreased;
    } | {
        oneofKind: "bakerStakeDecreased";
        /**
         * The baker's stake was decreased.
         *
         * @generated from protobuf field: concordium.v2.BakerEvent.BakerStakeDecreased baker_stake_decreased = 4;
         */
        bakerStakeDecreased: BakerEvent_BakerStakeDecreased;
    } | {
        oneofKind: "bakerRestakeEarningsUpdated";
        /**
         * The baker's setting for restaking earnings was updated.
         *
         * @generated from protobuf field: concordium.v2.BakerEvent.BakerRestakeEarningsUpdated baker_restake_earnings_updated = 5;
         */
        bakerRestakeEarningsUpdated: BakerEvent_BakerRestakeEarningsUpdated;
    } | {
        oneofKind: "bakerKeysUpdated";
        /**
         * Baker keys were updated.
         *
         * @generated from protobuf field: concordium.v2.BakerKeysEvent baker_keys_updated = 6;
         */
        bakerKeysUpdated: BakerKeysEvent;
    } | {
        oneofKind: "bakerSetOpenStatus";
        /**
         * The baker's open status was updated.
         *
         * @generated from protobuf field: concordium.v2.BakerEvent.BakerSetOpenStatus baker_set_open_status = 7;
         */
        bakerSetOpenStatus: BakerEvent_BakerSetOpenStatus;
    } | {
        oneofKind: "bakerSetMetadataUrl";
        /**
         * The baker's metadata URL was updated.
         *
         * @generated from protobuf field: concordium.v2.BakerEvent.BakerSetMetadataUrl baker_set_metadata_url = 8;
         */
        bakerSetMetadataUrl: BakerEvent_BakerSetMetadataUrl;
    } | {
        oneofKind: "bakerSetTransactionFeeCommission";
        /**
         * The baker's transaction fee commission was updated.
         *
         * @generated from protobuf field: concordium.v2.BakerEvent.BakerSetTransactionFeeCommission baker_set_transaction_fee_commission = 9;
         */
        bakerSetTransactionFeeCommission: BakerEvent_BakerSetTransactionFeeCommission;
    } | {
        oneofKind: "bakerSetBakingRewardCommission";
        /**
         * The baker's baking reward commission was updated.
         *
         * @generated from protobuf field: concordium.v2.BakerEvent.BakerSetBakingRewardCommission baker_set_baking_reward_commission = 10;
         */
        bakerSetBakingRewardCommission: BakerEvent_BakerSetBakingRewardCommission;
    } | {
        oneofKind: "bakerSetFinalizationRewardCommission";
        /**
         * The baker's finalization reward commission was updated.
         *
         * @generated from protobuf field: concordium.v2.BakerEvent.BakerSetFinalizationRewardCommission baker_set_finalization_reward_commission = 11;
         */
        bakerSetFinalizationRewardCommission: BakerEvent_BakerSetFinalizationRewardCommission;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A baker was added.
 *
 * @generated from protobuf message concordium.v2.BakerEvent.BakerAdded
 */
export interface BakerEvent_BakerAdded {
    /**
     * The keys with which the baker registered.
     *
     * @generated from protobuf field: concordium.v2.BakerKeysEvent keys_event = 1;
     */
    keysEvent?: BakerKeysEvent;
    /**
     * The amount the account staked to become a baker. This amount is
     * locked.
     *
     * @generated from protobuf field: concordium.v2.Amount stake = 2;
     */
    stake?: Amount;
    /**
     * Whether the baker will automatically add earnings to their stake or
     * not.
     *
     * @generated from protobuf field: bool restake_earnings = 3;
     */
    restakeEarnings: boolean;
}
/**
 * Baker stake increased.
 *
 * @generated from protobuf message concordium.v2.BakerEvent.BakerStakeIncreased
 */
export interface BakerEvent_BakerStakeIncreased {
    /**
     * Baker's id.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;
     */
    bakerId?: BakerId;
    /**
     * The new stake.
     *
     * @generated from protobuf field: concordium.v2.Amount new_stake = 2;
     */
    newStake?: Amount;
}
/**
 * @generated from protobuf message concordium.v2.BakerEvent.BakerStakeDecreased
 */
export interface BakerEvent_BakerStakeDecreased {
    /**
     * Baker's id.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;
     */
    bakerId?: BakerId;
    /**
     * The new stake.
     *
     * @generated from protobuf field: concordium.v2.Amount new_stake = 2;
     */
    newStake?: Amount;
}
/**
 * @generated from protobuf message concordium.v2.BakerEvent.BakerRestakeEarningsUpdated
 */
export interface BakerEvent_BakerRestakeEarningsUpdated {
    /**
     * Baker's id.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;
     */
    bakerId?: BakerId;
    /**
     * The new value of the flag.
     *
     * @generated from protobuf field: bool restake_earnings = 2;
     */
    restakeEarnings: boolean;
}
/**
 * Updated open status for a baker pool.
 *
 * @generated from protobuf message concordium.v2.BakerEvent.BakerSetOpenStatus
 */
export interface BakerEvent_BakerSetOpenStatus {
    /**
     * Baker's id.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;
     */
    bakerId?: BakerId;
    /**
     * The new open status.
     *
     * @generated from protobuf field: concordium.v2.OpenStatus open_status = 2;
     */
    openStatus: OpenStatus;
}
/**
 * Updated metadata url for a baker pool.
 *
 * @generated from protobuf message concordium.v2.BakerEvent.BakerSetMetadataUrl
 */
export interface BakerEvent_BakerSetMetadataUrl {
    /**
     * Baker's id.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;
     */
    bakerId?: BakerId;
    /**
     * The URL.
     *
     * @generated from protobuf field: string url = 2;
     */
    url: string;
}
/**
 * Updated transaction fee commission for a baker pool.
 *
 * @generated from protobuf message concordium.v2.BakerEvent.BakerSetTransactionFeeCommission
 */
export interface BakerEvent_BakerSetTransactionFeeCommission {
    /**
     * Baker's id.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;
     */
    bakerId?: BakerId;
    /**
     * The transaction fee commission.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction transaction_fee_commission = 2;
     */
    transactionFeeCommission?: AmountFraction;
}
/**
 * Updated baking reward commission for baker pool
 *
 * @generated from protobuf message concordium.v2.BakerEvent.BakerSetBakingRewardCommission
 */
export interface BakerEvent_BakerSetBakingRewardCommission {
    /**
     * Baker's id
     *
     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;
     */
    bakerId?: BakerId;
    /**
     * The baking reward commission
     *
     * @generated from protobuf field: concordium.v2.AmountFraction baking_reward_commission = 2;
     */
    bakingRewardCommission?: AmountFraction;
}
/**
 * Updated finalization reward commission for baker pool
 *
 * @generated from protobuf message concordium.v2.BakerEvent.BakerSetFinalizationRewardCommission
 */
export interface BakerEvent_BakerSetFinalizationRewardCommission {
    /**
     * Baker's id
     *
     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;
     */
    bakerId?: BakerId;
    /**
     * The finalization reward commission
     *
     * @generated from protobuf field: concordium.v2.AmountFraction finalization_reward_commission = 2;
     */
    finalizationRewardCommission?: AmountFraction;
}
/**
 * The identifier for a delegator.
 *
 * @generated from protobuf message concordium.v2.DelegatorId
 */
export interface DelegatorId {
    /**
     * @generated from protobuf field: concordium.v2.AccountIndex id = 1;
     */
    id?: AccountIndex;
}
/**
 * @generated from protobuf message concordium.v2.DelegationEvent
 */
export interface DelegationEvent {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "delegationStakeIncreased";
        /**
         * The delegator's stake increased.
         *
         * @generated from protobuf field: concordium.v2.DelegationEvent.DelegationStakeIncreased delegation_stake_increased = 1;
         */
        delegationStakeIncreased: DelegationEvent_DelegationStakeIncreased;
    } | {
        oneofKind: "delegationStakeDecreased";
        /**
         * The delegator's stake decreased.
         *
         * @generated from protobuf field: concordium.v2.DelegationEvent.DelegationStakeDecreased delegation_stake_decreased = 2;
         */
        delegationStakeDecreased: DelegationEvent_DelegationStakeDecreased;
    } | {
        oneofKind: "delegationSetRestakeEarnings";
        /**
         * The delegator's restaking setting was updated.
         *
         * @generated from protobuf field: concordium.v2.DelegationEvent.DelegationSetRestakeEarnings delegation_set_restake_earnings = 3;
         */
        delegationSetRestakeEarnings: DelegationEvent_DelegationSetRestakeEarnings;
    } | {
        oneofKind: "delegationSetDelegationTarget";
        /**
         * The delegator's delegation target was updated.
         *
         * @generated from protobuf field: concordium.v2.DelegationEvent.DelegationSetDelegationTarget delegation_set_delegation_target = 4;
         */
        delegationSetDelegationTarget: DelegationEvent_DelegationSetDelegationTarget;
    } | {
        oneofKind: "delegationAdded";
        /**
         * A delegator was added.
         *
         * @generated from protobuf field: concordium.v2.DelegatorId delegation_added = 5;
         */
        delegationAdded: DelegatorId;
    } | {
        oneofKind: "delegationRemoved";
        /**
         * A delegator was removed.
         *
         * @generated from protobuf field: concordium.v2.DelegatorId delegation_removed = 6;
         */
        delegationRemoved: DelegatorId;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message concordium.v2.DelegationEvent.DelegationStakeIncreased
 */
export interface DelegationEvent_DelegationStakeIncreased {
    /**
     * Delegator's id
     *
     * @generated from protobuf field: concordium.v2.DelegatorId delegator_id = 1;
     */
    delegatorId?: DelegatorId;
    /**
     * New stake
     *
     * @generated from protobuf field: concordium.v2.Amount new_stake = 2;
     */
    newStake?: Amount;
}
/**
 * @generated from protobuf message concordium.v2.DelegationEvent.DelegationStakeDecreased
 */
export interface DelegationEvent_DelegationStakeDecreased {
    /**
     * Delegator's id
     *
     * @generated from protobuf field: concordium.v2.DelegatorId delegator_id = 1;
     */
    delegatorId?: DelegatorId;
    /**
     * New stake
     *
     * @generated from protobuf field: concordium.v2.Amount new_stake = 2;
     */
    newStake?: Amount;
}
/**
 * @generated from protobuf message concordium.v2.DelegationEvent.DelegationSetRestakeEarnings
 */
export interface DelegationEvent_DelegationSetRestakeEarnings {
    /**
     * Delegator's id
     *
     * @generated from protobuf field: concordium.v2.DelegatorId delegator_id = 1;
     */
    delegatorId?: DelegatorId;
    /**
     * Whether earnings will be restaked
     *
     * @generated from protobuf field: bool restake_earnings = 2;
     */
    restakeEarnings: boolean;
}
/**
 * @generated from protobuf message concordium.v2.DelegationEvent.DelegationSetDelegationTarget
 */
export interface DelegationEvent_DelegationSetDelegationTarget {
    /**
     * Delegator's id
     *
     * @generated from protobuf field: concordium.v2.DelegatorId delegator_id = 1;
     */
    delegatorId?: DelegatorId;
    /**
     * New delegation target
     *
     * @generated from protobuf field: concordium.v2.DelegationTarget delegation_target = 2;
     */
    delegationTarget?: DelegationTarget;
}
/**
 * Effects of an account transaction. All variants except `None`
 * correspond to a unique transaction that was successful.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionEffects
 */
export interface AccountTransactionEffects {
    /**
     * @generated from protobuf oneof: effect
     */
    effect: {
        oneofKind: "none";
        /**
         * No effects other than payment from this transaction.
         * The rejection reason indicates why the transaction failed.
         *
         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.None none = 1;
         */
        none: AccountTransactionEffects_None;
    } | {
        oneofKind: "moduleDeployed";
        /**
         * A smart contract module with the attached reference was deployed.
         *
         * @generated from protobuf field: concordium.v2.ModuleRef module_deployed = 2;
         */
        moduleDeployed: ModuleRef;
    } | {
        oneofKind: "contractInitialized";
        /**
         * A smart contract was initialized.
         *
         * @generated from protobuf field: concordium.v2.ContractInitializedEvent contract_initialized = 3;
         */
        contractInitialized: ContractInitializedEvent;
    } | {
        oneofKind: "contractUpdateIssued";
        /**
         * A smart contract instance updated was issued.
         *
         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.ContractUpdateIssued contract_update_issued = 4;
         */
        contractUpdateIssued: AccountTransactionEffects_ContractUpdateIssued;
    } | {
        oneofKind: "accountTransfer";
        /**
         * A simple account to account transfer occurred.
         *
         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.AccountTransfer account_transfer = 5;
         */
        accountTransfer: AccountTransactionEffects_AccountTransfer;
    } | {
        oneofKind: "bakerAdded";
        /**
         * A baker was added.
         *
         * @generated from protobuf field: concordium.v2.BakerEvent.BakerAdded baker_added = 6;
         */
        bakerAdded: BakerEvent_BakerAdded;
    } | {
        oneofKind: "bakerRemoved";
        /**
         * A baker was removed.
         *
         * @generated from protobuf field: concordium.v2.BakerId baker_removed = 7;
         */
        bakerRemoved: BakerId;
    } | {
        oneofKind: "bakerStakeUpdated";
        /**
         * A baker's stake was updated.
         *
         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.BakerStakeUpdated baker_stake_updated = 8;
         */
        bakerStakeUpdated: AccountTransactionEffects_BakerStakeUpdated;
    } | {
        oneofKind: "bakerRestakeEarningsUpdated";
        /**
         * A baker's restake earnings setting was updated.
         *
         * @generated from protobuf field: concordium.v2.BakerEvent.BakerRestakeEarningsUpdated baker_restake_earnings_updated = 9;
         */
        bakerRestakeEarningsUpdated: BakerEvent_BakerRestakeEarningsUpdated;
    } | {
        oneofKind: "bakerKeysUpdated";
        /**
         * A baker's keys were updated.
         *
         * @generated from protobuf field: concordium.v2.BakerKeysEvent baker_keys_updated = 10;
         */
        bakerKeysUpdated: BakerKeysEvent;
    } | {
        oneofKind: "encryptedAmountTransferred";
        /**
         * An encrypted amount was transferred.
         *
         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.EncryptedAmountTransferred encrypted_amount_transferred = 11;
         */
        encryptedAmountTransferred: AccountTransactionEffects_EncryptedAmountTransferred;
    } | {
        oneofKind: "transferredToEncrypted";
        /**
         * An account transferred part of its public balance to its encrypted
         * balance.
         *
         * @generated from protobuf field: concordium.v2.EncryptedSelfAmountAddedEvent transferred_to_encrypted = 12;
         */
        transferredToEncrypted: EncryptedSelfAmountAddedEvent;
    } | {
        oneofKind: "transferredToPublic";
        /**
         * An account transferred part of its encrypted balance to its public balance.
         *
         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.TransferredToPublic transferred_to_public = 13;
         */
        transferredToPublic: AccountTransactionEffects_TransferredToPublic;
    } | {
        oneofKind: "transferredWithSchedule";
        /**
         * A transfer with a release schedule was made.
         *
         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.TransferredWithSchedule transferred_with_schedule = 14;
         */
        transferredWithSchedule: AccountTransactionEffects_TransferredWithSchedule;
    } | {
        oneofKind: "credentialKeysUpdated";
        /**
         * Keys of a specific credential were updated.
         *
         * @generated from protobuf field: concordium.v2.CredentialRegistrationId credential_keys_updated = 15;
         */
        credentialKeysUpdated: CredentialRegistrationId;
    } | {
        oneofKind: "credentialsUpdated";
        /**
         * Account credentials were updated.
         *
         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.CredentialsUpdated credentials_updated = 16;
         */
        credentialsUpdated: AccountTransactionEffects_CredentialsUpdated;
    } | {
        oneofKind: "dataRegistered";
        /**
         * Some data was registered on the chain.
         *
         * @generated from protobuf field: concordium.v2.RegisteredData data_registered = 17;
         */
        dataRegistered: RegisteredData;
    } | {
        oneofKind: "bakerConfigured";
        /**
         * A baker was configured. The details of what happened are contained in a list of BakerEvents.
         *
         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.BakerConfigured baker_configured = 18;
         */
        bakerConfigured: AccountTransactionEffects_BakerConfigured;
    } | {
        oneofKind: "delegationConfigured";
        /**
         * A delegator was configured. The details of what happened are contained in a list of DelegatorEvents.
         *
         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.DelegationConfigured delegation_configured = 19;
         */
        delegationConfigured: AccountTransactionEffects_DelegationConfigured;
    } | {
        oneofKind: undefined;
    };
}
/**
 * No effects other than payment from this transaction.
 * The rejection reason indicates why the transaction failed.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionEffects.None
 */
export interface AccountTransactionEffects_None {
    /**
     * Transaction type of a failed transaction, if known.
     * In case of serialization failure this will not be set.
     *
     * @generated from protobuf field: optional concordium.v2.TransactionType transaction_type = 1;
     */
    transactionType?: TransactionType;
    /**
     * Reason for rejection of the transaction.
     *
     * @generated from protobuf field: concordium.v2.RejectReason reject_reason = 2;
     */
    rejectReason?: RejectReason;
}
/**
 * A contract update transaction was issued and produced the given trace.
 * This is the result of Update transaction.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionEffects.ContractUpdateIssued
 */
export interface AccountTransactionEffects_ContractUpdateIssued {
    /**
     * @generated from protobuf field: repeated concordium.v2.ContractTraceElement effects = 1;
     */
    effects: ContractTraceElement[];
}
/**
 * A simple account to account transfer occurred. This is the result of a
 * successful Transfer transaction.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionEffects.AccountTransfer
 */
export interface AccountTransactionEffects_AccountTransfer {
    /**
     * Amount that was transferred.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 1;
     */
    amount?: Amount;
    /**
     * Receiver account.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress receiver = 2;
     */
    receiver?: AccountAddress;
    /**
     * Memo.
     *
     * @generated from protobuf field: optional concordium.v2.Memo memo = 3;
     */
    memo?: Memo;
}
/**
 * An account was deregistered as a baker. This is the result of a
 * successful UpdateBakerStake transaction.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionEffects.BakerStakeUpdated
 */
export interface AccountTransactionEffects_BakerStakeUpdated {
    /**
     * If the stake was updated (that is, it changed and did not stay the
     * same) then this is present, otherwise it is not present.
     *
     * @generated from protobuf field: optional concordium.v2.BakerStakeUpdatedData update = 1;
     */
    update?: BakerStakeUpdatedData;
}
/**
 * An encrypted amount was transferred. This is the result of a successful
 * EncryptedAmountTransfer transaction.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionEffects.EncryptedAmountTransferred
 */
export interface AccountTransactionEffects_EncryptedAmountTransferred {
    /**
     * @generated from protobuf field: concordium.v2.EncryptedAmountRemovedEvent removed = 1;
     */
    removed?: EncryptedAmountRemovedEvent;
    /**
     * @generated from protobuf field: concordium.v2.NewEncryptedAmountEvent added = 2;
     */
    added?: NewEncryptedAmountEvent;
    /**
     * @generated from protobuf field: optional concordium.v2.Memo memo = 3;
     */
    memo?: Memo;
}
/**
 * An account transferred part of its encrypted balance to its public
 * balance. This is the result of a successful TransferToPublic transaction.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionEffects.TransferredToPublic
 */
export interface AccountTransactionEffects_TransferredToPublic {
    /**
     * @generated from protobuf field: concordium.v2.EncryptedAmountRemovedEvent removed = 1;
     */
    removed?: EncryptedAmountRemovedEvent;
    /**
     * @generated from protobuf field: concordium.v2.Amount amount = 2;
     */
    amount?: Amount;
}
/**
 * A transfer with schedule was performed. This is the result of a
 * successful TransferWithSchedule transaction.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionEffects.TransferredWithSchedule
 */
export interface AccountTransactionEffects_TransferredWithSchedule {
    /**
     * Receiver account.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress receiver = 1;
     */
    receiver?: AccountAddress;
    /**
     * The list of releases. Ordered by increasing timestamp.
     *
     * @generated from protobuf field: repeated concordium.v2.NewRelease amount = 2;
     */
    amount: NewRelease[];
    /**
     * Optional memo.
     *
     * @generated from protobuf field: optional concordium.v2.Memo memo = 3;
     */
    memo?: Memo;
}
/**
 * Account's credentials were updated. This is the result of a
 * successful UpdateCredentials transaction.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionEffects.CredentialsUpdated
 */
export interface AccountTransactionEffects_CredentialsUpdated {
    /**
     * The credential ids that were added.
     *
     * @generated from protobuf field: repeated concordium.v2.CredentialRegistrationId new_cred_ids = 1;
     */
    newCredIds: CredentialRegistrationId[];
    /**
     * The credentials that were removed.
     *
     * @generated from protobuf field: repeated concordium.v2.CredentialRegistrationId removed_cred_ids = 2;
     */
    removedCredIds: CredentialRegistrationId[];
    /**
     * The (possibly) updated account threshold.
     *
     * @generated from protobuf field: concordium.v2.AccountThreshold new_threshold = 3;
     */
    newThreshold?: AccountThreshold;
}
/**
 * A baker was configured. The details of what happened are contained in
 * the list of BakerEvents.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionEffects.BakerConfigured
 */
export interface AccountTransactionEffects_BakerConfigured {
    /**
     * @generated from protobuf field: repeated concordium.v2.BakerEvent events = 1;
     */
    events: BakerEvent[];
}
/**
 * An account configured delegation. The details of what happened are
 * contained in the list of DelegationEvents.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionEffects.DelegationConfigured
 */
export interface AccountTransactionEffects_DelegationConfigured {
    /**
     * @generated from protobuf field: repeated concordium.v2.DelegationEvent events = 1;
     */
    events: DelegationEvent[];
}
/**
 * Election difficulty parameter.
 *
 * @generated from protobuf message concordium.v2.ElectionDifficulty
 */
export interface ElectionDifficulty {
    /**
     * @generated from protobuf field: concordium.v2.AmountFraction value = 1;
     */
    value?: AmountFraction;
}
/**
 * Parameters that determine timeouts in the consensus protocol used from protocol version 6.
 *
 * @generated from protobuf message concordium.v2.TimeoutParameters
 */
export interface TimeoutParameters {
    /**
     * The base value for triggering a timeout
     *
     * @generated from protobuf field: concordium.v2.Duration timeout_base = 1;
     */
    timeoutBase?: Duration;
    /**
     * Factor for increasing the timeout. Must be greater than 1.
     *
     * @generated from protobuf field: concordium.v2.Ratio timeout_increase = 2;
     */
    timeoutIncrease?: Ratio;
    /**
     * Factor for decreasing the timeout. Must be between 0 and 1.
     *
     * @generated from protobuf field: concordium.v2.Ratio timeout_decrease = 3;
     */
    timeoutDecrease?: Ratio;
}
/**
 * Finalization committee parameters used from protocol version 6
 *
 * @generated from protobuf message concordium.v2.FinalizationCommitteeParameters
 */
export interface FinalizationCommitteeParameters {
    /**
     * The minimum size of a finalization committee before `finalizer_relative_stake_threshold` takes effect.
     *
     * @generated from protobuf field: uint32 minimum_finalizers = 1;
     */
    minimumFinalizers: number;
    /**
     * The maximum size of a finalization committee.
     *
     * @generated from protobuf field: uint32 maximum_finalizers = 2;
     */
    maximumFinalizers: number;
    /**
     * The threshold for determining the stake required for being eligible the finalization committee.
     * The amount is given by `total stake in pools * finalizer_relative_stake_threshold`
     *
     * @generated from protobuf field: concordium.v2.AmountFraction finalizer_relative_stake_threshold = 3;
     */
    finalizerRelativeStakeThreshold?: AmountFraction;
}
/**
 * Parameters for the consensus protocol used from protocol version 6.
 *
 * @generated from protobuf message concordium.v2.ConsensusParametersV1
 */
export interface ConsensusParametersV1 {
    /**
     * Parameters controlling round timeouts.
     *
     * @generated from protobuf field: concordium.v2.TimeoutParameters timeout_parameters = 1;
     */
    timeoutParameters?: TimeoutParameters;
    /**
     * Minimum time interval between blocks.
     *
     * @generated from protobuf field: concordium.v2.Duration min_block_time = 2;
     */
    minBlockTime?: Duration;
    /**
     * Maximum energy allowed per block.
     *
     * @generated from protobuf field: concordium.v2.Energy block_energy_limit = 3;
     */
    blockEnergyLimit?: Energy;
}
/**
 * Represents an exchange rate.
 *
 * @generated from protobuf message concordium.v2.ExchangeRate
 */
export interface ExchangeRate {
    /**
     * @generated from protobuf field: concordium.v2.Ratio value = 1;
     */
    value?: Ratio;
}
/**
 * Represents a ratio, i.e., 'numerator / denominator'.
 *
 * @generated from protobuf message concordium.v2.Ratio
 */
export interface Ratio {
    /**
     * The numerator.
     *
     * @generated from protobuf field: uint64 numerator = 1;
     */
    numerator: bigint;
    /**
     * The denominator.
     *
     * @generated from protobuf field: uint64 denominator = 2;
     */
    denominator: bigint;
}
/**
 * A public key used for chain updates.
 *
 * @generated from protobuf message concordium.v2.UpdatePublicKey
 */
export interface UpdatePublicKey {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * The threshold for how many UpdatePublicKeys are need to make a certain chain update.
 *
 * @generated from protobuf message concordium.v2.UpdateKeysThreshold
 */
export interface UpdateKeysThreshold {
    /**
     * Is ensured to be within between 1 and 2^16.
     *
     * @generated from protobuf field: uint32 value = 1;
     */
    value: number;
}
/**
 * Index of a key in an authorizations update payload.
 *
 * @generated from protobuf message concordium.v2.UpdateKeysIndex
 */
export interface UpdateKeysIndex {
    /**
     * @generated from protobuf field: uint32 value = 1;
     */
    value: number;
}
/**
 * Represents root or level 1 keys.
 *
 * @generated from protobuf message concordium.v2.HigherLevelKeys
 */
export interface HigherLevelKeys {
    /**
     * The keys.
     *
     * @generated from protobuf field: repeated concordium.v2.UpdatePublicKey keys = 1;
     */
    keys: UpdatePublicKey[];
    /**
     * The number of keys needed to make a chain update.
     *
     * @generated from protobuf field: concordium.v2.UpdateKeysThreshold threshold = 2;
     */
    threshold?: UpdateKeysThreshold;
}
/**
 * An access structure which specifies which UpdatePublicKeys in a HigherLevelKeys that are allowed
 * to make chain update of a specific type. The threshold defines the minimum number of allowed keys needed
 * to make the actual update.
 *
 * @generated from protobuf message concordium.v2.AccessStructure
 */
export interface AccessStructure {
    /**
     * Unique indexes into the set of keys in AuthorizationV0.
     *
     * @generated from protobuf field: repeated concordium.v2.UpdateKeysIndex access_public_keys = 1;
     */
    accessPublicKeys: UpdateKeysIndex[];
    /**
     * Number of keys requred to authorize an update.
     *
     * @generated from protobuf field: concordium.v2.UpdateKeysThreshold access_threshold = 2;
     */
    accessThreshold?: UpdateKeysThreshold;
}
/**
 * The set of keys authorized for chain updates, together with access structures
 * determining which keys are authorized for which update types.
 * This is the payload of an update to authorization.
 *
 * @generated from protobuf message concordium.v2.AuthorizationsV0
 */
export interface AuthorizationsV0 {
    /**
     * The set of keys authorized for chain updates.
     *
     * @generated from protobuf field: repeated concordium.v2.UpdatePublicKey keys = 1;
     */
    keys: UpdatePublicKey[];
    /**
     * New emergency keys.
     *
     * @generated from protobuf field: concordium.v2.AccessStructure emergency = 2;
     */
    emergency?: AccessStructure;
    /**
     * New protocol update keys.
     *
     * @generated from protobuf field: concordium.v2.AccessStructure protocol = 3;
     */
    protocol?: AccessStructure;
    /**
     * Access structure for updating the consensus parameters.
     * Previously, this was the election difficulty.
     *
     * @generated from protobuf field: concordium.v2.AccessStructure parameter_consensus = 4;
     */
    parameterConsensus?: AccessStructure;
    /**
     * Access structure for updating the euro per energy.
     *
     * @generated from protobuf field: concordium.v2.AccessStructure parameter_euro_per_energy = 5;
     */
    parameterEuroPerEnergy?: AccessStructure;
    /**
     * Access structure for updating the micro CCD per euro.
     *
     * @generated from protobuf field: concordium.v2.AccessStructure parameter_micro_CCD_per_euro = 6;
     */
    parameterMicroCCDPerEuro?: AccessStructure;
    /**
     * Access structure for updating the foundation account.
     *
     * @generated from protobuf field: concordium.v2.AccessStructure parameter_foundation_account = 7;
     */
    parameterFoundationAccount?: AccessStructure;
    /**
     * Access structure for updating the mint distribution.
     *
     * @generated from protobuf field: concordium.v2.AccessStructure parameter_mint_distribution = 8;
     */
    parameterMintDistribution?: AccessStructure;
    /**
     * Access structure for updating the transaction fee distribution.
     *
     * @generated from protobuf field: concordium.v2.AccessStructure parameter_transaction_fee_distribution = 9;
     */
    parameterTransactionFeeDistribution?: AccessStructure;
    /**
     * Access structure for updating the gas rewards.
     *
     * @generated from protobuf field: concordium.v2.AccessStructure parameter_gas_rewards = 10;
     */
    parameterGasRewards?: AccessStructure;
    /**
     * Access structure for updating the pool parameters. For V0 this is only
     * the baker stake threshold, for V1 there are more.
     *
     * @generated from protobuf field: concordium.v2.AccessStructure pool_parameters = 11;
     */
    poolParameters?: AccessStructure;
    /**
     * Access structure for adding new anonymity revokers.
     *
     * @generated from protobuf field: concordium.v2.AccessStructure add_anonymity_revoker = 12;
     */
    addAnonymityRevoker?: AccessStructure;
    /**
     * Access structure for adding new identity providers.
     *
     * @generated from protobuf field: concordium.v2.AccessStructure add_identity_provider = 13;
     */
    addIdentityProvider?: AccessStructure;
}
/**
 * The set of keys authorized for chain updates, together with access structures
 * determining which keys are authorized for which update types.
 * This is the payload of an update to authorization.
 *
 * @generated from protobuf message concordium.v2.AuthorizationsV1
 */
export interface AuthorizationsV1 {
    /**
     * @generated from protobuf field: concordium.v2.AuthorizationsV0 v0 = 1;
     */
    v0?: AuthorizationsV0;
    /**
     * Access structure for updating the cooldown periods related to baking and delegation.
     *
     * @generated from protobuf field: concordium.v2.AccessStructure parameter_cooldown = 2;
     */
    parameterCooldown?: AccessStructure;
    /**
     * Access structure for updating the length of the reward period.
     *
     * @generated from protobuf field: concordium.v2.AccessStructure parameter_time = 3;
     */
    parameterTime?: AccessStructure;
}
/**
 * Description either of an anonymity revoker or identity provider.
 * Metadata that should be visible on the chain.
 *
 * @generated from protobuf message concordium.v2.Description
 */
export interface Description {
    /**
     * The name.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * A link to more information about the anonymity revoker or identity provider.
     *
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * A free form description of the revoker or provider.
     *
     * @generated from protobuf field: string description = 3;
     */
    description: string;
}
/**
 * Information on a single anonymity revoker help by the identity provider.
 * Typically an identity provider will hold more than one.
 *
 * @generated from protobuf message concordium.v2.ArInfo
 */
export interface ArInfo {
    /**
     * Unique identifier of the anonymity revoker.
     *
     * @generated from protobuf field: concordium.v2.ArInfo.ArIdentity identity = 1;
     */
    identity?: ArInfo_ArIdentity;
    /**
     * Description of the anonymity revoker.
     *
     * @generated from protobuf field: concordium.v2.Description description = 2;
     */
    description?: Description;
    /**
     * Elgamal encryption key of the anonymity revoker.
     *
     * @generated from protobuf field: concordium.v2.ArInfo.ArPublicKey public_key = 3;
     */
    publicKey?: ArInfo_ArPublicKey;
}
/**
 * Identity of the anonymity revoker on the chain. This defines their
 * evaluateion point for secret sharing, and thus it cannot be 0.
 *
 * @generated from protobuf message concordium.v2.ArInfo.ArIdentity
 */
export interface ArInfo_ArIdentity {
    /**
     * @generated from protobuf field: uint32 value = 1;
     */
    value: number;
}
/**
 * Public key of an anonymity revoker.
 *
 * @generated from protobuf message concordium.v2.ArInfo.ArPublicKey
 */
export interface ArInfo_ArPublicKey {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * A succinct identifier of an identity provider on the chain.
 * In credential deployments, and other interactions with the chain this is
 * used to identify which identity provider is meant.
 *
 * @generated from protobuf message concordium.v2.IpIdentity
 */
export interface IpIdentity {
    /**
     * @generated from protobuf field: uint32 value = 1;
     */
    value: number;
}
/**
 * Public information about an identity provider.
 *
 * @generated from protobuf message concordium.v2.IpInfo
 */
export interface IpInfo {
    /**
     * Unique identifier of the identity provider.
     *
     * @generated from protobuf field: concordium.v2.IpIdentity identity = 1;
     */
    identity?: IpIdentity;
    /**
     * Description of the identity provider.
     *
     * @generated from protobuf field: concordium.v2.Description description = 2;
     */
    description?: Description;
    /**
     * Pointcheval-Sanders public key of the identity provider.
     *
     * @generated from protobuf field: concordium.v2.IpInfo.IpVerifyKey verify_key = 3;
     */
    verifyKey?: IpInfo_IpVerifyKey;
    /**
     * Ed25519 public key of the identity provider.
     *
     * @generated from protobuf field: concordium.v2.IpInfo.IpCdiVerifyKey cdi_verify_key = 4;
     */
    cdiVerifyKey?: IpInfo_IpCdiVerifyKey;
}
/**
 * Pointcheval-Sanders public key of the identity provider.
 *
 * @generated from protobuf message concordium.v2.IpInfo.IpVerifyKey
 */
export interface IpInfo_IpVerifyKey {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Ed25519 public key of the identity provider.
 *
 * @generated from protobuf message concordium.v2.IpInfo.IpCdiVerifyKey
 */
export interface IpInfo_IpCdiVerifyKey {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * A duration in seconds.
 *
 * @generated from protobuf message concordium.v2.DurationSeconds
 */
export interface DurationSeconds {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * Inclusive range of amount fractions.
 *
 * @generated from protobuf message concordium.v2.InclusiveRangeAmountFraction
 */
export interface InclusiveRangeAmountFraction {
    /**
     * @generated from protobuf field: concordium.v2.AmountFraction min = 1;
     */
    min?: AmountFraction;
    /**
     * @generated from protobuf field: concordium.v2.AmountFraction max_ = 2;
     */
    max?: AmountFraction;
}
/**
 * Ranges of allowed commission values that pools may choose from.
 *
 * @generated from protobuf message concordium.v2.CommissionRanges
 */
export interface CommissionRanges {
    /**
     * The range of allowed finalization commissions.
     *
     * @generated from protobuf field: concordium.v2.InclusiveRangeAmountFraction finalization = 1;
     */
    finalization?: InclusiveRangeAmountFraction;
    /**
     * The range of allowed baker commissions.
     *
     * @generated from protobuf field: concordium.v2.InclusiveRangeAmountFraction baking = 2;
     */
    baking?: InclusiveRangeAmountFraction;
    /**
     * The range of allowed transaction commissions.
     *
     * @generated from protobuf field: concordium.v2.InclusiveRangeAmountFraction transaction = 3;
     */
    transaction?: InclusiveRangeAmountFraction;
}
/**
 * A bound on the relative share of the total staked capital that a baker can
 * have as its stake. This is required to be greater than 0.
 *
 * @generated from protobuf message concordium.v2.CapitalBound
 */
export interface CapitalBound {
    /**
     * @generated from protobuf field: concordium.v2.AmountFraction value = 1;
     */
    value?: AmountFraction;
}
/**
 * A leverage factor.
 *
 * @generated from protobuf message concordium.v2.LeverageFactor
 */
export interface LeverageFactor {
    /**
     * @generated from protobuf field: concordium.v2.Ratio value = 1;
     */
    value?: Ratio;
}
/**
 * A chain epoch.
 *
 * @generated from protobuf message concordium.v2.Epoch
 */
export interface Epoch {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * A round.
 *
 * @generated from protobuf message concordium.v2.Round
 */
export interface Round {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * Length of a reward period in epochs.
 * Must always be a strictly positive number.
 *
 * @generated from protobuf message concordium.v2.RewardPeriodLength
 */
export interface RewardPeriodLength {
    /**
     * @generated from protobuf field: concordium.v2.Epoch value = 1;
     */
    value?: Epoch;
}
/**
 * A minting rate of CCD.
 * The value is `mantissa * 10^(-exponent)`.
 *
 * @generated from protobuf message concordium.v2.MintRate
 */
export interface MintRate {
    /**
     * @generated from protobuf field: uint32 mantissa = 1;
     */
    mantissa: number;
    /**
     * This will never exceed 255 and can thus be stored in a single byte.
     *
     * @generated from protobuf field: uint32 exponent = 2;
     */
    exponent: number;
}
/**
 * @generated from protobuf message concordium.v2.CooldownParametersCpv1
 */
export interface CooldownParametersCpv1 {
    /**
     * Number of seconds that pool owners must cooldown
     * when reducing their equity capital or closing the pool.
     *
     * @generated from protobuf field: concordium.v2.DurationSeconds pool_owner_cooldown = 1;
     */
    poolOwnerCooldown?: DurationSeconds;
    /**
     * Number of seconds that a delegator must cooldown
     * when reducing their delegated stake.
     *
     * @generated from protobuf field: concordium.v2.DurationSeconds delegator_cooldown = 2;
     */
    delegatorCooldown?: DurationSeconds;
}
/**
 * Parameters related to staking pools.
 *
 * @generated from protobuf message concordium.v2.PoolParametersCpv1
 */
export interface PoolParametersCpv1 {
    /**
     * Fraction of finalization rewards charged by the passive delegation.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction passive_finalization_commission = 1;
     */
    passiveFinalizationCommission?: AmountFraction;
    /**
     * Fraction of baking rewards charged by the passive delegation.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction passive_baking_commission = 2;
     */
    passiveBakingCommission?: AmountFraction;
    /**
     * Fraction of transaction rewards charged by the L-pool.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction passive_transaction_commission = 3;
     */
    passiveTransactionCommission?: AmountFraction;
    /**
     * Bounds on the commission rates that may be charged by bakers.
     *
     * @generated from protobuf field: concordium.v2.CommissionRanges commission_bounds = 4;
     */
    commissionBounds?: CommissionRanges;
    /**
     * Minimum equity capital required for a new baker.
     *
     * @generated from protobuf field: concordium.v2.Amount minimum_equity_capital = 5;
     */
    minimumEquityCapital?: Amount;
    /**
     * Maximum fraction of the total staked capital of that a new baker can
     * have.
     *
     * @generated from protobuf field: concordium.v2.CapitalBound capital_bound = 6;
     */
    capitalBound?: CapitalBound;
    /**
     * The maximum leverage that a baker can have as a ratio of total stake
     * to equity capital.
     *
     * @generated from protobuf field: concordium.v2.LeverageFactor leverage_bound = 7;
     */
    leverageBound?: LeverageFactor;
}
/**
 * The time parameters are introduced as of protocol version 4, and consist of
 * the reward period length and the mint rate per payday. These are coupled as
 * a change to either affects the overall rate of minting.
 *
 * @generated from protobuf message concordium.v2.TimeParametersCpv1
 */
export interface TimeParametersCpv1 {
    /**
     * @generated from protobuf field: concordium.v2.RewardPeriodLength reward_period_length = 1;
     */
    rewardPeriodLength?: RewardPeriodLength;
    /**
     * @generated from protobuf field: concordium.v2.MintRate mint_per_payday = 2;
     */
    mintPerPayday?: MintRate;
}
/**
 * Mint distribution payload as it looks in protocol version 4 and onward.
 *
 * @generated from protobuf message concordium.v2.MintDistributionCpv1
 */
export interface MintDistributionCpv1 {
    /**
     * @generated from protobuf field: concordium.v2.AmountFraction baking_reward = 1;
     */
    bakingReward?: AmountFraction;
    /**
     * @generated from protobuf field: concordium.v2.AmountFraction finalization_reward = 2;
     */
    finalizationReward?: AmountFraction;
}
/**
 * @generated from protobuf message concordium.v2.ProtocolUpdate
 */
export interface ProtocolUpdate {
    /**
     * A brief message about the update.
     *
     * @generated from protobuf field: string message_ = 1;
     */
    message: string;
    /**
     * A URL of a document describing the update.
     *
     * @generated from protobuf field: string specification_url = 2;
     */
    specificationUrl: string;
    /**
     * SHA256 hash of the specification document.
     *
     * @generated from protobuf field: concordium.v2.Sha256Hash specificationHash = 3;
     */
    specificationHash?: Sha256Hash;
    /**
     * Auxiliary data whose interpretation is defined by the new specification.
     *
     * @generated from protobuf field: bytes specification_auxiliary_data = 4;
     */
    specificationAuxiliaryData: Uint8Array;
}
/**
 * The minting rate and the distribution of newly-minted CCD among bakers,
 * finalizers, and the foundation account. It must be the case that
 * baking_reward + finalization_reward <= 1. The remaining amount is the
 * platform development charge.
 *
 * @generated from protobuf message concordium.v2.MintDistributionCpv0
 */
export interface MintDistributionCpv0 {
    /**
     * Mint rate per slot.
     *
     * @generated from protobuf field: concordium.v2.MintRate mint_per_slot = 1;
     */
    mintPerSlot?: MintRate;
    /**
     * The fraction of newly created CCD allocated to baker rewards.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction baking_reward = 2;
     */
    bakingReward?: AmountFraction;
    /**
     * The fraction of newly created CCD allocated to finalization rewards.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction finalization_reward = 3;
     */
    finalizationReward?: AmountFraction;
}
/**
 * Parameters determining the distribution of transaction fees.
 *
 * @generated from protobuf message concordium.v2.TransactionFeeDistribution
 */
export interface TransactionFeeDistribution {
    /**
     * The fraction allocated to the baker.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction baker = 1;
     */
    baker?: AmountFraction;
    /**
     * The fraction allocated to the GAS account.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction gas_account = 2;
     */
    gasAccount?: AmountFraction;
}
/**
 * Distribution of gas rewards for chain parameters version 0 and 1.
 *
 * @generated from protobuf message concordium.v2.GasRewards
 */
export interface GasRewards {
    /**
     * The fraction paid to the baker.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction baker = 1;
     */
    baker?: AmountFraction;
    /**
     * Fraction paid for including a finalization proof in a block.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction finalization_proof = 2;
     */
    finalizationProof?: AmountFraction;
    /**
     * Fraction paid for including each account creation transaction in a block.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction account_creation = 3;
     */
    accountCreation?: AmountFraction;
    /**
     * Fraction paid for including an update transaction in a block.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction chain_update = 4;
     */
    chainUpdate?: AmountFraction;
}
/**
 * Distribution of gas rewards for chain parameters version 2.
 *
 * @generated from protobuf message concordium.v2.GasRewardsCpv2
 */
export interface GasRewardsCpv2 {
    /**
     * The fraction paid to the baker.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction baker = 1;
     */
    baker?: AmountFraction;
    /**
     * Fraction paid for including each account creation transaction in a block.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction account_creation = 3;
     */
    accountCreation?: AmountFraction;
    /**
     * Fraction paid for including an update transaction in a block.
     *
     * @generated from protobuf field: concordium.v2.AmountFraction chain_update = 4;
     */
    chainUpdate?: AmountFraction;
}
/**
 * Minimum stake needed to become a baker. This only applies to protocol version
 * 1-3.
 *
 * @generated from protobuf message concordium.v2.BakerStakeThreshold
 */
export interface BakerStakeThreshold {
    /**
     * Minimum threshold required for registering as a baker.
     *
     * @generated from protobuf field: concordium.v2.Amount baker_stake_threshold = 1;
     */
    bakerStakeThreshold?: Amount;
}
/**
 * Root updates are the highest kind of key updates. They can update every other set of keys,
 * even themselves. They can only be performed by Root level keys.
 *
 * @generated from protobuf message concordium.v2.RootUpdate
 */
export interface RootUpdate {
    /**
     * @generated from protobuf oneof: update_type
     */
    updateType: {
        oneofKind: "rootKeysUpdate";
        /**
         * The root keys were updated.
         *
         * @generated from protobuf field: concordium.v2.HigherLevelKeys root_keys_update = 1;
         */
        rootKeysUpdate: HigherLevelKeys;
    } | {
        oneofKind: "level1KeysUpdate";
        /**
         * The level 1 keys were updated.
         *
         * @generated from protobuf field: concordium.v2.HigherLevelKeys level_1_keys_update = 2;
         */
        level1KeysUpdate: HigherLevelKeys;
    } | {
        oneofKind: "level2KeysUpdateV0";
        /**
         * The level 2 keys were updated.
         *
         * @generated from protobuf field: concordium.v2.AuthorizationsV0 level_2_keys_update_v0 = 3;
         */
        level2KeysUpdateV0: AuthorizationsV0;
    } | {
        oneofKind: "level2KeysUpdateV1";
        /**
         * The level 2 keys were updated. This is similar to `level_2_keys_update_v0` except that a few more keys can be updated.
         *
         * @generated from protobuf field: concordium.v2.AuthorizationsV1 level_2_keys_update_v1 = 4;
         */
        level2KeysUpdateV1: AuthorizationsV1;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Level 1 updates are the intermediate update kind.
 * They can update themselves or level 2 keys. They can only be performed by level 1 keys.
 *
 * @generated from protobuf message concordium.v2.Level1Update
 */
export interface Level1Update {
    /**
     * @generated from protobuf oneof: update_type
     */
    updateType: {
        oneofKind: "level1KeysUpdate";
        /**
         * The level 1 keys were updated.
         *
         * @generated from protobuf field: concordium.v2.HigherLevelKeys level_1_keys_update = 1;
         */
        level1KeysUpdate: HigherLevelKeys;
    } | {
        oneofKind: "level2KeysUpdateV0";
        /**
         * The level 2 keys were updated.
         *
         * @generated from protobuf field: concordium.v2.AuthorizationsV0 level_2_keys_update_v0 = 2;
         */
        level2KeysUpdateV0: AuthorizationsV0;
    } | {
        oneofKind: "level2KeysUpdateV1";
        /**
         * The level 2 keys were updated. This is similar to `level_2_keys_update_v0` except that a few more keys can be updated.
         *
         * @generated from protobuf field: concordium.v2.AuthorizationsV1 level_2_keys_update_v1 = 3;
         */
        level2KeysUpdateV1: AuthorizationsV1;
    } | {
        oneofKind: undefined;
    };
}
/**
 * The payload of a chain update.
 *
 * @generated from protobuf message concordium.v2.UpdatePayload
 */
export interface UpdatePayload {
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "protocolUpdate";
        /**
         * The protocol version was updated.
         *
         * @generated from protobuf field: concordium.v2.ProtocolUpdate protocol_update = 1;
         */
        protocolUpdate: ProtocolUpdate;
    } | {
        oneofKind: "electionDifficultyUpdate";
        /**
         * The election difficulty was updated.
         *
         * @generated from protobuf field: concordium.v2.ElectionDifficulty election_difficulty_update = 2;
         */
        electionDifficultyUpdate: ElectionDifficulty;
    } | {
        oneofKind: "euroPerEnergyUpdate";
        /**
         * The euro per energy exchange rate was updated.
         *
         * @generated from protobuf field: concordium.v2.ExchangeRate euro_per_energy_update = 3;
         */
        euroPerEnergyUpdate: ExchangeRate;
    } | {
        oneofKind: "microCcdPerEuroUpdate";
        /**
         * The microCCD per euro exchange rate was updated.
         *
         * @generated from protobuf field: concordium.v2.ExchangeRate micro_ccd_per_euro_update = 4;
         */
        microCcdPerEuroUpdate: ExchangeRate;
    } | {
        oneofKind: "foundationAccountUpdate";
        /**
         * The foundation account address was updated.
         *
         * @generated from protobuf field: concordium.v2.AccountAddress foundation_account_update = 5;
         */
        foundationAccountUpdate: AccountAddress;
    } | {
        oneofKind: "mintDistributionUpdate";
        /**
         * The mint distribution was updated.
         *
         * @generated from protobuf field: concordium.v2.MintDistributionCpv0 mint_distribution_update = 6;
         */
        mintDistributionUpdate: MintDistributionCpv0;
    } | {
        oneofKind: "transactionFeeDistributionUpdate";
        /**
         * The transaction fee distribtuion was updated.
         *
         * @generated from protobuf field: concordium.v2.TransactionFeeDistribution transaction_fee_distribution_update = 7;
         */
        transactionFeeDistributionUpdate: TransactionFeeDistribution;
    } | {
        oneofKind: "gasRewardsUpdate";
        /**
         * The gas rewards were updated.
         *
         * @generated from protobuf field: concordium.v2.GasRewards gas_rewards_update = 8;
         */
        gasRewardsUpdate: GasRewards;
    } | {
        oneofKind: "bakerStakeThresholdUpdate";
        /**
         * The minimum amount of CCD needed to be come a baker was updated.
         *
         * @generated from protobuf field: concordium.v2.BakerStakeThreshold baker_stake_threshold_update = 9;
         */
        bakerStakeThresholdUpdate: BakerStakeThreshold;
    } | {
        oneofKind: "rootUpdate";
        /**
         * The root keys were updated.
         *
         * @generated from protobuf field: concordium.v2.RootUpdate root_update = 10;
         */
        rootUpdate: RootUpdate;
    } | {
        oneofKind: "level1Update";
        /**
         * The level 1 keys were updated.
         *
         * @generated from protobuf field: concordium.v2.Level1Update level_1_update = 11;
         */
        level1Update: Level1Update;
    } | {
        oneofKind: "addAnonymityRevokerUpdate";
        /**
         * An anonymity revoker was added.
         *
         * @generated from protobuf field: concordium.v2.ArInfo add_anonymity_revoker_update = 12;
         */
        addAnonymityRevokerUpdate: ArInfo;
    } | {
        oneofKind: "addIdentityProviderUpdate";
        /**
         * An identity provider was added.
         *
         * @generated from protobuf field: concordium.v2.IpInfo add_identity_provider_update = 13;
         */
        addIdentityProviderUpdate: IpInfo;
    } | {
        oneofKind: "cooldownParametersCpv1Update";
        /**
         * The cooldown parameters were updated.
         *
         * @generated from protobuf field: concordium.v2.CooldownParametersCpv1 cooldown_parameters_cpv_1_update = 14;
         */
        cooldownParametersCpv1Update: CooldownParametersCpv1;
    } | {
        oneofKind: "poolParametersCpv1Update";
        /**
         * The pool parameters were updated.
         *
         * @generated from protobuf field: concordium.v2.PoolParametersCpv1 pool_parameters_cpv_1_update = 15;
         */
        poolParametersCpv1Update: PoolParametersCpv1;
    } | {
        oneofKind: "timeParametersCpv1Update";
        /**
         * The time parameters were updated.
         *
         * @generated from protobuf field: concordium.v2.TimeParametersCpv1 time_parameters_cpv_1_update = 16;
         */
        timeParametersCpv1Update: TimeParametersCpv1;
    } | {
        oneofKind: "mintDistributionCpv1Update";
        /**
         * The mint distribution was updated.
         *
         * @generated from protobuf field: concordium.v2.MintDistributionCpv1 mint_distribution_cpv_1_update = 17;
         */
        mintDistributionCpv1Update: MintDistributionCpv1;
    } | {
        oneofKind: "gasRewardsCpv2Update";
        /**
         * The gas rewards were updated (chain parameters version 2).
         *
         * @generated from protobuf field: concordium.v2.GasRewardsCpv2 gas_rewards_cpv_2_update = 18;
         */
        gasRewardsCpv2Update: GasRewardsCpv2;
    } | {
        oneofKind: "timeoutParametersUpdate";
        /**
         * The consensus timeouts were updated (chain parameters version 2).
         *
         * @generated from protobuf field: concordium.v2.TimeoutParameters timeout_parameters_update = 19;
         */
        timeoutParametersUpdate: TimeoutParameters;
    } | {
        oneofKind: "minBlockTimeUpdate";
        /**
         * The minimum time between blocks was updated (chain parameters version 2).
         *
         * @generated from protobuf field: concordium.v2.Duration min_block_time_update = 20;
         */
        minBlockTimeUpdate: Duration;
    } | {
        oneofKind: "blockEnergyLimitUpdate";
        /**
         * The block energy limit was updated (chain parameters version 2).
         *
         * @generated from protobuf field: concordium.v2.Energy block_energy_limit_update = 21;
         */
        blockEnergyLimitUpdate: Energy;
    } | {
        oneofKind: "finalizationCommitteeParametersUpdate";
        /**
         * Finalization committee parameters (chain parameters version 2).
         *
         * @generated from protobuf field: concordium.v2.FinalizationCommitteeParameters finalization_committee_parameters_update = 22;
         */
        finalizationCommitteeParametersUpdate: FinalizationCommitteeParameters;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Details about an account transaction.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionDetails
 */
export interface AccountTransactionDetails {
    /**
     * The cost of the transaction. Paid by the sender.
     *
     * @generated from protobuf field: concordium.v2.Amount cost = 1;
     */
    cost?: Amount;
    /**
     * The sender of the transaction.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress sender = 2;
     */
    sender?: AccountAddress;
    /**
     * The effects of the transaction.
     *
     * @generated from protobuf field: concordium.v2.AccountTransactionEffects effects = 3;
     */
    effects?: AccountTransactionEffects;
}
/**
 * Details of an account creation. These transactions are free, and we only
 * ever get a response for them if the account is created, hence no failure
 * cases.
 *
 * @generated from protobuf message concordium.v2.AccountCreationDetails
 */
export interface AccountCreationDetails {
    /**
     * Whether this is an initial or normal account.
     *
     * @generated from protobuf field: concordium.v2.CredentialType credential_type = 1;
     */
    credentialType: CredentialType;
    /**
     * Address of the newly created account.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress address = 2;
     */
    address?: AccountAddress;
    /**
     * Credential registration ID of the first credential.
     *
     * @generated from protobuf field: concordium.v2.CredentialRegistrationId reg_id = 3;
     */
    regId?: CredentialRegistrationId;
}
/**
 * Transaction time specified as seconds since unix epoch.
 *
 * @generated from protobuf message concordium.v2.TransactionTime
 */
export interface TransactionTime {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * Details of an update instruction. These are free, and we only ever get a
 * response for them if the update is successfully enqueued, hence no failure
 * cases.
 *
 * @generated from protobuf message concordium.v2.UpdateDetails
 */
export interface UpdateDetails {
    /**
     * The time at which the update will be effective.
     *
     * @generated from protobuf field: concordium.v2.TransactionTime effective_time = 1;
     */
    effectiveTime?: TransactionTime;
    /**
     * The paylaod for the update.
     *
     * @generated from protobuf field: concordium.v2.UpdatePayload payload = 2;
     */
    payload?: UpdatePayload;
}
/**
 * Summary of the outcome of a block item in structured form.
 * The summary determines which transaction type it was.
 *
 * @generated from protobuf message concordium.v2.BlockItemSummary
 */
export interface BlockItemSummary {
    /**
     * Index of the transaction in the block where it is included.
     *
     * @generated from protobuf field: concordium.v2.BlockItemSummary.TransactionIndex index = 1;
     */
    index?: BlockItemSummary_TransactionIndex;
    /**
     * The amount of NRG the transaction cost.
     *
     * @generated from protobuf field: concordium.v2.Energy energy_cost = 2;
     */
    energyCost?: Energy;
    /**
     * Hash of the transaction.
     *
     * @generated from protobuf field: concordium.v2.TransactionHash hash = 3;
     */
    hash?: TransactionHash;
    /**
     * @generated from protobuf oneof: details
     */
    details: {
        oneofKind: "accountTransaction";
        /**
         * Details about an account transaction.
         *
         * @generated from protobuf field: concordium.v2.AccountTransactionDetails account_transaction = 4;
         */
        accountTransaction: AccountTransactionDetails;
    } | {
        oneofKind: "accountCreation";
        /**
         * Details about an account creation.
         *
         * @generated from protobuf field: concordium.v2.AccountCreationDetails account_creation = 5;
         */
        accountCreation: AccountCreationDetails;
    } | {
        oneofKind: "update";
        /**
         * Details about a chain update.
         *
         * @generated from protobuf field: concordium.v2.UpdateDetails update = 6;
         */
        update: UpdateDetails;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message concordium.v2.BlockItemSummary.TransactionIndex
 */
export interface BlockItemSummary_TransactionIndex {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * The number of chain restarts via a protocol update. An effected
 * protocol update instruction might not change the protocol version
 * specified in the previous field, but it always increments the genesis
 * index.
 *
 * @generated from protobuf message concordium.v2.GenesisIndex
 */
export interface GenesisIndex {
    /**
     * @generated from protobuf field: uint32 value = 1;
     */
    value: number;
}
/**
 * The response for GetConsensusInfo.
 *
 * @generated from protobuf message concordium.v2.ConsensusInfo
 */
export interface ConsensusInfo {
    /**
     * Hash of the current best block.
     *
     * @generated from protobuf field: concordium.v2.BlockHash best_block = 1;
     */
    bestBlock?: BlockHash;
    /**
     * Hash of the (original) genesis block.
     *
     * @generated from protobuf field: concordium.v2.BlockHash genesis_block = 2;
     */
    genesisBlock?: BlockHash;
    /**
     * Time of the (original) genesis block.
     *
     * @generated from protobuf field: concordium.v2.Timestamp genesis_time = 3;
     */
    genesisTime?: Timestamp;
    /**
     * (Current) slot duration in milliseconds. Present only in protocol versions 1-5.
     *
     * @generated from protobuf field: optional concordium.v2.Duration slot_duration = 4;
     */
    slotDuration?: Duration;
    /**
     * (Current) epoch duration in milliseconds.
     *
     * @generated from protobuf field: concordium.v2.Duration epoch_duration = 5;
     */
    epochDuration?: Duration;
    /**
     * Hash of the last finalized block.
     *
     * @generated from protobuf field: concordium.v2.BlockHash last_finalized_block = 6;
     */
    lastFinalizedBlock?: BlockHash;
    /**
     * Absolute height of the best block.
     *
     * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight best_block_height = 7;
     */
    bestBlockHeight?: AbsoluteBlockHeight;
    /**
     * Absolute height of the last finalized block.
     *
     * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight last_finalized_block_height = 8;
     */
    lastFinalizedBlockHeight?: AbsoluteBlockHeight;
    /**
     * Total number of blocks received.
     *
     * @generated from protobuf field: uint32 blocks_received_count = 9;
     */
    blocksReceivedCount: number;
    /**
     * The last time a block was received.
     *
     * @generated from protobuf field: optional concordium.v2.Timestamp block_last_received_time = 10;
     */
    blockLastReceivedTime?: Timestamp;
    /**
     * Exponential moving average latency between a block's slot time and received time.
     *
     * @generated from protobuf field: double block_receive_latency_ema = 11;
     */
    blockReceiveLatencyEma: number;
    /**
     * Standard deviation of exponential moving average latency between a block's slot time and received time.
     *
     * @generated from protobuf field: double block_receive_latency_emsd = 12;
     */
    blockReceiveLatencyEmsd: number;
    /**
     * Exponential moving average time between receiving blocks.
     *
     * @generated from protobuf field: optional double block_receive_period_ema = 13;
     */
    blockReceivePeriodEma?: number;
    /**
     * Standard deviation of exponential moving average time between receiving blocks.
     *
     * @generated from protobuf field: optional double block_receive_period_emsd = 14;
     */
    blockReceivePeriodEmsd?: number;
    /**
     * Total number of blocks received and verified.
     *
     * @generated from protobuf field: uint32 blocks_verified_count = 15;
     */
    blocksVerifiedCount: number;
    /**
     * The last time a block was verified (added to the tree).
     *
     * @generated from protobuf field: optional concordium.v2.Timestamp block_last_arrived_time = 16;
     */
    blockLastArrivedTime?: Timestamp;
    /**
     * Exponential moving average latency between a block's slot time and its arrival.
     *
     * @generated from protobuf field: double block_arrive_latency_ema = 17;
     */
    blockArriveLatencyEma: number;
    /**
     * Standard deviation of exponential moving average latency between a block's slot time and its arrival.
     *
     * @generated from protobuf field: double block_arrive_latency_emsd = 18;
     */
    blockArriveLatencyEmsd: number;
    /**
     * Exponential moving average time between block arrivals.
     *
     * @generated from protobuf field: optional double block_arrive_period_ema = 19;
     */
    blockArrivePeriodEma?: number;
    /**
     * Standard deviation of exponential moving average time between block arrivals.
     *
     * @generated from protobuf field: optional double block_arrive_period_emsd = 20;
     */
    blockArrivePeriodEmsd?: number;
    /**
     * Exponential moving average number of transactions per block.
     *
     * @generated from protobuf field: double transactions_per_block_ema = 21;
     */
    transactionsPerBlockEma: number;
    /**
     * Standard deviation of exponential moving average number of transactions per block.
     *
     * @generated from protobuf field: double transactions_per_block_emsd = 22;
     */
    transactionsPerBlockEmsd: number;
    /**
     * Number of finalizations.
     *
     * @generated from protobuf field: uint32 finalization_count = 23;
     */
    finalizationCount: number;
    /**
     * Time of last verified finalization.
     *
     * @generated from protobuf field: optional concordium.v2.Timestamp last_finalized_time = 24;
     */
    lastFinalizedTime?: Timestamp;
    /**
     * Exponential moving average time between finalizations.
     *
     * @generated from protobuf field: optional double finalization_period_ema = 25;
     */
    finalizationPeriodEma?: number;
    /**
     * Standard deviation of exponential moving average time between finalizations.
     *
     * @generated from protobuf field: optional double finalization_period_emsd = 26;
     */
    finalizationPeriodEmsd?: number;
    /**
     * Currently active protocol version.
     *
     * @generated from protobuf field: concordium.v2.ProtocolVersion protocol_version = 27;
     */
    protocolVersion: ProtocolVersion;
    /**
     * The number of chain restarts via a protocol update. A completed
     * protocol update instruction might not change the protocol version
     * specified in the previous field, but it always increments the genesis
     * index.
     *
     * @generated from protobuf field: concordium.v2.GenesisIndex genesis_index = 28;
     */
    genesisIndex?: GenesisIndex;
    /**
     * Block hash of the genesis block of current era, i.e., since the last protocol update.
     * Initially this is equal to 'genesis_block'.
     *
     * @generated from protobuf field: concordium.v2.BlockHash current_era_genesis_block = 29;
     */
    currentEraGenesisBlock?: BlockHash;
    /**
     * Time when the current era started.
     *
     * @generated from protobuf field: concordium.v2.Timestamp current_era_genesis_time = 30;
     */
    currentEraGenesisTime?: Timestamp;
    /**
     * The current duration to wait before a round times out. Present from protocol version 6.
     *
     * @generated from protobuf field: optional concordium.v2.Duration current_timeout_duration = 31;
     */
    currentTimeoutDuration?: Duration;
    /**
     * The current round. Present from protocol version 6.
     *
     * @generated from protobuf field: optional concordium.v2.Round current_round = 32;
     */
    currentRound?: Round;
    /**
     * The current epoch. Present from protocol version 6.
     *
     * @generated from protobuf field: optional concordium.v2.Epoch current_epoch = 33;
     */
    currentEpoch?: Epoch;
    /**
     * The first block in the epoch with timestamp at least this is considered to be the trigger block
     * for the epoch transition. Present from protocol version 6.
     *
     * @generated from protobuf field: optional concordium.v2.Timestamp trigger_block_time = 34;
     */
    triggerBlockTime?: Timestamp;
}
/**
 * Information about an arrived block that is part of the streaming response.
 *
 * @generated from protobuf message concordium.v2.ArrivedBlockInfo
 */
export interface ArrivedBlockInfo {
    /**
     * Hash of the block.
     *
     * @generated from protobuf field: concordium.v2.BlockHash hash = 1;
     */
    hash?: BlockHash;
    /**
     * Absolute height of the block, height 0 is the genesis block.
     *
     * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight height = 2;
     */
    height?: AbsoluteBlockHeight;
}
/**
 * The response for GetCryptographicParameters.
 *
 * @generated from protobuf message concordium.v2.CryptographicParameters
 */
export interface CryptographicParameters {
    /**
     * A free-form string used to distinguish between different chains even if they share other parameters.
     *
     * @generated from protobuf field: string genesis_string = 1;
     */
    genesisString: string;
    /**
     * Generators for the bulletproofs.
     * It is a serialized list of 256 group elements in the G1 group of the BLS12-381 curve.
     *
     * @generated from protobuf field: bytes bulletproof_generators = 2;
     */
    bulletproofGenerators: Uint8Array;
    /**
     * A shared commitment key known to the chain and the account holder (and therefore it is public).
     * The account holder uses this commitment key to generate commitments to values in the attribute list.
     * It is a serialized pair of group elements  in the G1 group of the BLS12-381 curve.
     *
     * @generated from protobuf field: bytes on_chain_commitment_key = 3;
     */
    onChainCommitmentKey: Uint8Array;
}
/**
 * The response for GetBlockInfo.
 *
 * @generated from protobuf message concordium.v2.BlockInfo
 */
export interface BlockInfo {
    /**
     * Hash of the block.
     *
     * @generated from protobuf field: concordium.v2.BlockHash hash = 1;
     */
    hash?: BlockHash;
    /**
     * Absolute height of the block, height 0 is the genesis block.
     *
     * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight height = 2;
     */
    height?: AbsoluteBlockHeight;
    /**
     * The parent block hash. For a re-genesis block, this will be the terminal block of the
     * previous chain. For the initial genesis block, this will be the hash of the block itself.
     *
     * @generated from protobuf field: concordium.v2.BlockHash parent_block = 3;
     */
    parentBlock?: BlockHash;
    /**
     * The last finalized block when this block was baked.
     *
     * @generated from protobuf field: concordium.v2.BlockHash last_finalized_block = 4;
     */
    lastFinalizedBlock?: BlockHash;
    /**
     * The genesis index for this block. This counts the number of protocol updates that have
     * preceded this block, and defines the era of the block.
     *
     * @generated from protobuf field: concordium.v2.GenesisIndex genesis_index = 5;
     */
    genesisIndex?: GenesisIndex;
    /**
     * The height of this block relative to the (re)genesis block of its era.
     *
     * @generated from protobuf field: concordium.v2.BlockHeight era_block_height = 6;
     */
    eraBlockHeight?: BlockHeight;
    /**
     * The time the block was received.
     *
     * @generated from protobuf field: concordium.v2.Timestamp receive_time = 7;
     */
    receiveTime?: Timestamp;
    /**
     * The time the block was verified.
     *
     * @generated from protobuf field: concordium.v2.Timestamp arrive_time = 8;
     */
    arriveTime?: Timestamp;
    /**
     * The slot number in which the block was baked. Present in protocol versions 1-5.
     *
     * @generated from protobuf field: optional concordium.v2.Slot slot_number = 9;
     */
    slotNumber?: Slot;
    /**
     * The time of the slot in which the block was baked.
     *
     * @generated from protobuf field: concordium.v2.Timestamp slot_time = 10;
     */
    slotTime?: Timestamp;
    /**
     * The baker id of account baking this block. Not provided for a genesis block.
     *
     * @generated from protobuf field: optional concordium.v2.BakerId baker = 11;
     */
    baker?: BakerId;
    /**
     * Whether the block is finalized.
     *
     * @generated from protobuf field: bool finalized = 12;
     */
    finalized: boolean;
    /**
     * The number of transactions in the block.
     *
     * @generated from protobuf field: uint32 transaction_count = 13;
     */
    transactionCount: number;
    /**
     * The energy cost of the transactions in the block.
     *
     * @generated from protobuf field: concordium.v2.Energy transactions_energy_cost = 14;
     */
    transactionsEnergyCost?: Energy;
    /**
     * The total byte size of all transactions in the block.
     *
     * @generated from protobuf field: uint32 transactions_size = 15;
     */
    transactionsSize: number;
    /**
     * The hash of the block state after this block.
     *
     * @generated from protobuf field: concordium.v2.StateHash state_hash = 16;
     */
    stateHash?: StateHash;
    /**
     * Protocol version to which the block belongs.
     *
     * @generated from protobuf field: concordium.v2.ProtocolVersion protocol_version = 17;
     */
    protocolVersion: ProtocolVersion;
    /**
     * Block round. Present from protocol version 6.
     *
     * @generated from protobuf field: optional concordium.v2.Round round = 18;
     */
    round?: Round;
    /**
     * Block epoch. Present from protocol version 6.
     *
     * @generated from protobuf field: optional concordium.v2.Epoch epoch = 19;
     */
    epoch?: Epoch;
}
/**
 * Request for GetPoolInfo.
 *
 * @generated from protobuf message concordium.v2.PoolInfoRequest
 */
export interface PoolInfoRequest {
    /**
     * Block in which to query the pool information.
     *
     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;
     */
    blockHash?: BlockHashInput;
    /**
     * The 'BakerId' of the pool owner.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker = 2;
     */
    baker?: BakerId;
}
/**
 * A pending change to a baker pool.
 *
 * @generated from protobuf message concordium.v2.PoolPendingChange
 */
export interface PoolPendingChange {
    /**
     * @generated from protobuf oneof: change
     */
    change: {
        oneofKind: "reduce";
        /**
         * @generated from protobuf field: concordium.v2.PoolPendingChange.Reduce reduce = 1;
         */
        reduce: PoolPendingChange_Reduce;
    } | {
        oneofKind: "remove";
        /**
         * @generated from protobuf field: concordium.v2.PoolPendingChange.Remove remove = 2;
         */
        remove: PoolPendingChange_Remove;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A reduction in baker equity capital is pending.
 *
 * @generated from protobuf message concordium.v2.PoolPendingChange.Reduce
 */
export interface PoolPendingChange_Reduce {
    /**
     * New baker equity capital.
     *
     * @generated from protobuf field: concordium.v2.Amount reduced_equity_capital = 1;
     */
    reducedEquityCapital?: Amount;
    /**
     * Timestamp when the change takes effect.
     *
     * @generated from protobuf field: concordium.v2.Timestamp effective_time = 2;
     */
    effectiveTime?: Timestamp;
}
/**
 * Removal of the pool is pending.
 *
 * @generated from protobuf message concordium.v2.PoolPendingChange.Remove
 */
export interface PoolPendingChange_Remove {
    /**
     * Timestamp when the change takes effect.
     *
     * @generated from protobuf field: concordium.v2.Timestamp effective_time = 1;
     */
    effectiveTime?: Timestamp;
}
/**
 * Information about a baker pool in the current reward period.
 *
 * @generated from protobuf message concordium.v2.PoolCurrentPaydayInfo
 */
export interface PoolCurrentPaydayInfo {
    /**
     * The number of blocks baked in the current reward period.
     *
     * @generated from protobuf field: uint64 blocks_baked = 1;
     */
    blocksBaked: bigint;
    /**
     * Whether the baker has contributed a finalization proof in the current reward period.
     *
     * @generated from protobuf field: bool finalization_live = 2;
     */
    finalizationLive: boolean;
    /**
     * The transaction fees accruing to the pool in the current reward period.
     *
     * @generated from protobuf field: concordium.v2.Amount transaction_fees_earned = 3;
     */
    transactionFeesEarned?: Amount;
    /**
     * The effective stake of the baker in the current reward period.
     *
     * @generated from protobuf field: concordium.v2.Amount effective_stake = 4;
     */
    effectiveStake?: Amount;
    /**
     * The lottery power of the baker in the current reward period.
     *
     * @generated from protobuf field: double lottery_power = 5;
     */
    lotteryPower: number;
    /**
     * The effective equity capital of the baker for the current reward period.
     *
     * @generated from protobuf field: concordium.v2.Amount baker_equity_capital = 6;
     */
    bakerEquityCapital?: Amount;
    /**
     * The effective delegated capital to the pool for the current reward period.
     *
     * @generated from protobuf field: concordium.v2.Amount delegated_capital = 7;
     */
    delegatedCapital?: Amount;
    /**
     * The commission rates that apply for the current reward period.
     *
     * @generated from protobuf field: concordium.v2.CommissionRates commission_rates = 8;
     */
    commissionRates?: CommissionRates;
}
/**
 * Type for the response of GetPoolInfo.
 * Contains information about a given pool at the end of a given block.
 * From protocol version 7, pool removal has immediate effect, however, the
 * pool may still be present for the current (and possibly next) reward period.
 * In this case, the `current_payday_info` field will be set, but the
 * `equity_capital`, `delegated_capital`, `delegated_capital_cap` and,
 * `pool_info` fields will all be absent. The `equity_pending_change` field
 * will also be absent, as stake changes are immediate.
 *
 * @generated from protobuf message concordium.v2.PoolInfoResponse
 */
export interface PoolInfoResponse {
    /**
     * The 'BakerId' of the pool owner.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker = 1;
     */
    baker?: BakerId;
    /**
     * The account address of the pool owner.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress address = 2;
     */
    address?: AccountAddress;
    /**
     * The equity capital provided by the pool owner. Absent if the pool is removed.
     *
     * @generated from protobuf field: optional concordium.v2.Amount equity_capital = 3;
     */
    equityCapital?: Amount;
    /**
     * The capital delegated to the pool by other accounts. Absent if the pool is removed.
     *
     * @generated from protobuf field: optional concordium.v2.Amount delegated_capital = 4;
     */
    delegatedCapital?: Amount;
    /**
     * The maximum amount that may be delegated to the pool, accounting for leverage and stake limits.
     * Absent if the pool is removed.
     *
     * @generated from protobuf field: optional concordium.v2.Amount delegated_capital_cap = 5;
     */
    delegatedCapitalCap?: Amount;
    /**
     * The pool info associated with the pool: open status, metadata URL and commission rates.
     * Absent if the pool is removed.
     *
     * @generated from protobuf field: optional concordium.v2.BakerPoolInfo pool_info = 6;
     */
    poolInfo?: BakerPoolInfo;
    /**
     * Any pending change to the equity capital.
     * This is not used from protocol version 7 onwards, as stake changes are immediate.
     *
     * @generated from protobuf field: optional concordium.v2.PoolPendingChange equity_pending_change = 7;
     */
    equityPendingChange?: PoolPendingChange;
    /**
     * Information of the pool in the current reward period.
     *
     * @generated from protobuf field: optional concordium.v2.PoolCurrentPaydayInfo current_payday_info = 8;
     */
    currentPaydayInfo?: PoolCurrentPaydayInfo;
    /**
     * Total capital staked across all pools, including passive delegation.
     *
     * @generated from protobuf field: concordium.v2.Amount all_pool_total_capital = 9;
     */
    allPoolTotalCapital?: Amount;
}
/**
 * Type for the response of GetPassiveDelegationInfo.
 * Contains information about passive delegators at the end of a given block.
 *
 * @generated from protobuf message concordium.v2.PassiveDelegationInfo
 */
export interface PassiveDelegationInfo {
    /**
     * The total capital delegated passively.
     *
     * @generated from protobuf field: concordium.v2.Amount delegated_capital = 1;
     */
    delegatedCapital?: Amount;
    /**
     * The passive delegation commission rates.
     *
     * @generated from protobuf field: concordium.v2.CommissionRates commission_rates = 2;
     */
    commissionRates?: CommissionRates;
    /**
     * The transaction fees accruing to the passive delegators in the current reward period.
     *
     * @generated from protobuf field: concordium.v2.Amount current_payday_transaction_fees_earned = 3;
     */
    currentPaydayTransactionFeesEarned?: Amount;
    /**
     * The effective delegated capital of passive delegators for the current reward period.
     *
     * @generated from protobuf field: concordium.v2.Amount current_payday_delegated_capital = 4;
     */
    currentPaydayDelegatedCapital?: Amount;
    /**
     * Total capital staked across all pools, including passive delegation.
     *
     * @generated from protobuf field: concordium.v2.Amount all_pool_total_capital = 5;
     */
    allPoolTotalCapital?: Amount;
}
/**
 * Request for GetBlocksAtHeight.
 *
 * @generated from protobuf message concordium.v2.BlocksAtHeightRequest
 */
export interface BlocksAtHeightRequest {
    /**
     * @generated from protobuf oneof: blocks_at_height
     */
    blocksAtHeight: {
        oneofKind: "absolute";
        /**
         * @generated from protobuf field: concordium.v2.BlocksAtHeightRequest.Absolute absolute = 1;
         */
        absolute: BlocksAtHeightRequest_Absolute;
    } | {
        oneofKind: "relative";
        /**
         * @generated from protobuf field: concordium.v2.BlocksAtHeightRequest.Relative relative = 2;
         */
        relative: BlocksAtHeightRequest_Relative;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Request using an absolute block height.
 *
 * @generated from protobuf message concordium.v2.BlocksAtHeightRequest.Absolute
 */
export interface BlocksAtHeightRequest_Absolute {
    /**
     * The absolute block height.
     *
     * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight height = 1;
     */
    height?: AbsoluteBlockHeight;
}
/**
 * Request using a relative block height.
 *
 * @generated from protobuf message concordium.v2.BlocksAtHeightRequest.Relative
 */
export interface BlocksAtHeightRequest_Relative {
    /**
     * Genesis index to start from.
     *
     * @generated from protobuf field: concordium.v2.GenesisIndex genesis_index = 1;
     */
    genesisIndex?: GenesisIndex;
    /**
     * Height starting from the genesis block at the genesis index.
     *
     * @generated from protobuf field: concordium.v2.BlockHeight height = 2;
     */
    height?: BlockHeight;
    /**
     * Whether to return results only from the specified genesis index (`true`),
     * or allow results from more recent genesis indices as well (`false`).
     *
     * @generated from protobuf field: bool restrict = 3;
     */
    restrict: boolean;
}
/**
 * Response for GetBlocksAtHeight.
 *
 * @generated from protobuf message concordium.v2.BlocksAtHeightResponse
 */
export interface BlocksAtHeightResponse {
    /**
     * Live blocks at the given height.
     *
     * @generated from protobuf field: repeated concordium.v2.BlockHash blocks = 1;
     */
    blocks: BlockHash[];
}
/**
 * Type for the response of GetTokenomicsInfo.
 * Contains information related to tokenomics at the end of a given block.
 *
 * @generated from protobuf message concordium.v2.TokenomicsInfo
 */
export interface TokenomicsInfo {
    /**
     * @generated from protobuf oneof: tokenomics
     */
    tokenomics: {
        oneofKind: "v0";
        /**
         * @generated from protobuf field: concordium.v2.TokenomicsInfo.V0 v0 = 1;
         */
        v0: TokenomicsInfo_V0;
    } | {
        oneofKind: "v1";
        /**
         * @generated from protobuf field: concordium.v2.TokenomicsInfo.V1 v1 = 2;
         */
        v1: TokenomicsInfo_V1;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Version 0 tokenomics.
 *
 * @generated from protobuf message concordium.v2.TokenomicsInfo.V0
 */
export interface TokenomicsInfo_V0 {
    /**
     * The total CCD in existence.
     *
     * @generated from protobuf field: concordium.v2.Amount total_amount = 1;
     */
    totalAmount?: Amount;
    /**
     * The total CCD in encrypted balances.
     *
     * @generated from protobuf field: concordium.v2.Amount total_encrypted_amount = 2;
     */
    totalEncryptedAmount?: Amount;
    /**
     * The amount in the baking reward account.
     *
     * @generated from protobuf field: concordium.v2.Amount baking_reward_account = 3;
     */
    bakingRewardAccount?: Amount;
    /**
     * The amount in the finalization reward account.
     *
     * @generated from protobuf field: concordium.v2.Amount finalization_reward_account = 4;
     */
    finalizationRewardAccount?: Amount;
    /**
     * The amount in the GAS account.
     *
     * @generated from protobuf field: concordium.v2.Amount gas_account = 5;
     */
    gasAccount?: Amount;
    /**
     * The protocol version.
     *
     * @generated from protobuf field: concordium.v2.ProtocolVersion protocol_version = 6;
     */
    protocolVersion: ProtocolVersion;
}
/**
 * Version 1 tokenomics.
 *
 * @generated from protobuf message concordium.v2.TokenomicsInfo.V1
 */
export interface TokenomicsInfo_V1 {
    /**
     * The total CCD in existence.
     *
     * @generated from protobuf field: concordium.v2.Amount total_amount = 1;
     */
    totalAmount?: Amount;
    /**
     * The total CCD in encrypted balances.
     *
     * @generated from protobuf field: concordium.v2.Amount total_encrypted_amount = 2;
     */
    totalEncryptedAmount?: Amount;
    /**
     * The amount in the baking reward account.
     *
     * @generated from protobuf field: concordium.v2.Amount baking_reward_account = 3;
     */
    bakingRewardAccount?: Amount;
    /**
     * The amount in the finalization reward account.
     *
     * @generated from protobuf field: concordium.v2.Amount finalization_reward_account = 4;
     */
    finalizationRewardAccount?: Amount;
    /**
     * The amount in the GAS account.
     *
     * @generated from protobuf field: concordium.v2.Amount gas_account = 5;
     */
    gasAccount?: Amount;
    /**
     * The transaction reward fraction accruing to the foundation (to be paid at next payday).
     *
     * @generated from protobuf field: concordium.v2.Amount foundation_transaction_rewards = 6;
     */
    foundationTransactionRewards?: Amount;
    /**
     * The time of the next payday.
     *
     * @generated from protobuf field: concordium.v2.Timestamp next_payday_time = 7;
     */
    nextPaydayTime?: Timestamp;
    /**
     * The rate at which CCD will be minted (as a proportion of the total supply) at the next payday.
     *
     * @generated from protobuf field: concordium.v2.MintRate next_payday_mint_rate = 8;
     */
    nextPaydayMintRate?: MintRate;
    /**
     * The total capital put up as stake by bakers and delegators.
     *
     * @generated from protobuf field: concordium.v2.Amount total_staked_capital = 9;
     */
    totalStakedCapital?: Amount;
    /**
     * The protocol version.
     *
     * @generated from protobuf field: concordium.v2.ProtocolVersion protocol_version = 10;
     */
    protocolVersion: ProtocolVersion;
}
/**
 * Request for InvokeInstance.
 *
 * @generated from protobuf message concordium.v2.InvokeInstanceRequest
 */
export interface InvokeInstanceRequest {
    /**
     * Block to invoke the contract. The invocation will be at the end of the given block.
     *
     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;
     */
    blockHash?: BlockHashInput;
    /**
     * Invoker of the contract. If this is not supplied then the contract will be
     * invoked by an account with address 0, no credentials and sufficient amount
     * of CCD to cover the transfer amount. If given, the relevant address (either
     * account or contract) must exist in the blockstate.
     *
     * @generated from protobuf field: optional concordium.v2.Address invoker = 2;
     */
    invoker?: Address;
    /**
     * Address of the contract instance to invoke.
     *
     * @generated from protobuf field: concordium.v2.ContractAddress instance = 3;
     */
    instance?: ContractAddress;
    /**
     * Amount to invoke the smart contract instance with.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 4;
     */
    amount?: Amount;
    /**
     * The entrypoint of the smart contract instance to invoke.
     *
     * @generated from protobuf field: concordium.v2.ReceiveName entrypoint = 5;
     */
    entrypoint?: ReceiveName;
    /**
     * The parameter bytes to include in the invocation of the entrypoint.
     *
     * @generated from protobuf field: concordium.v2.Parameter parameter = 6;
     */
    parameter?: Parameter;
    /**
     * And what amount of energy to allow for execution. This cannot exceed
     * `100_000_000_000`, but in practice it should be much less. The maximum
     * block energy is typically in the range of a few million.
     *
     * @generated from protobuf field: concordium.v2.Energy energy = 7;
     */
    energy?: Energy;
}
/**
 * Response type for InvokeInstance.
 *
 * @generated from protobuf message concordium.v2.InvokeInstanceResponse
 */
export interface InvokeInstanceResponse {
    /**
     * @generated from protobuf oneof: result
     */
    result: {
        oneofKind: "success";
        /**
         * @generated from protobuf field: concordium.v2.InvokeInstanceResponse.Success success = 1;
         */
        success: InvokeInstanceResponse_Success;
    } | {
        oneofKind: "failure";
        /**
         * @generated from protobuf field: concordium.v2.InvokeInstanceResponse.Failure failure = 2;
         */
        failure: InvokeInstanceResponse_Failure;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Contract execution failed.
 *
 * @generated from protobuf message concordium.v2.InvokeInstanceResponse.Failure
 */
export interface InvokeInstanceResponse_Failure {
    /**
     * If invoking a V0 contract this is not provided, otherwise it is
     * potentially return value produced by the call unless the call failed with
     * out of energy or runtime error. If the V1 contract terminated with a
     * logic error then the return value is present.
     *
     * @generated from protobuf field: optional bytes return_value = 1;
     */
    returnValue?: Uint8Array;
    /**
     * Energy used by the execution.
     *
     * @generated from protobuf field: concordium.v2.Energy used_energy = 2;
     */
    usedEnergy?: Energy;
    /**
     * Contract execution failed for the given reason.
     *
     * @generated from protobuf field: concordium.v2.RejectReason reason = 3;
     */
    reason?: RejectReason;
}
/**
 * Contract execution succeeded.
 *
 * @generated from protobuf message concordium.v2.InvokeInstanceResponse.Success
 */
export interface InvokeInstanceResponse_Success {
    /**
     * If invoking a V0 contract this is absent. Otherwise it is the return
     * value produced by the contract.
     *
     * @generated from protobuf field: optional bytes return_value = 1;
     */
    returnValue?: Uint8Array;
    /**
     * Energy used by the execution.
     *
     * @generated from protobuf field: concordium.v2.Energy used_energy = 2;
     */
    usedEnergy?: Energy;
    /**
     * Effects produced by contract execution.
     *
     * @generated from protobuf field: repeated concordium.v2.ContractTraceElement effects = 3;
     */
    effects: ContractTraceElement[];
}
/**
 * Request for GetPoolDelegators and GetPoolDelegatorsRewardPeriod.
 *
 * @generated from protobuf message concordium.v2.GetPoolDelegatorsRequest
 */
export interface GetPoolDelegatorsRequest {
    /**
     * Block in which to query the delegators.
     *
     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;
     */
    blockHash?: BlockHashInput;
    /**
     * The 'BakerId' of the pool owner.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker = 2;
     */
    baker?: BakerId;
}
/**
 * Stream item for GetPoolDelegators and GetPassiveDelegators.
 *
 * @generated from protobuf message concordium.v2.DelegatorInfo
 */
export interface DelegatorInfo {
    /**
     * The delegator account address.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress account = 1;
     */
    account?: AccountAddress;
    /**
     * The amount of stake currently staked to the pool.
     *
     * @generated from protobuf field: concordium.v2.Amount stake = 2;
     */
    stake?: Amount;
    /**
     * Pending change to the current stake of the delegator.
     *
     * @generated from protobuf field: optional concordium.v2.StakePendingChange pending_change = 3;
     */
    pendingChange?: StakePendingChange;
}
/**
 * Stream item for GetPoolDelegatorsRewardPeriod and GetPassiveDelegatorsRewardPeriod.
 *
 * @generated from protobuf message concordium.v2.DelegatorRewardPeriodInfo
 */
export interface DelegatorRewardPeriodInfo {
    /**
     * The delegator account address.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress account = 1;
     */
    account?: AccountAddress;
    /**
     * The amount of stake currently staked to the pool.
     *
     * @generated from protobuf field: concordium.v2.Amount stake = 2;
     */
    stake?: Amount;
}
/**
 * Response type for GetBranches.
 *
 * @generated from protobuf message concordium.v2.Branch
 */
export interface Branch {
    /**
     * The hash of the block.
     *
     * @generated from protobuf field: concordium.v2.BlockHash block_hash = 1;
     */
    blockHash?: BlockHash;
    /**
     * Further blocks branching of this block.
     *
     * @generated from protobuf field: repeated concordium.v2.Branch children = 2;
     */
    children: Branch[];
}
/**
 * The leadership election nonce is an unpredictable value updated once an
 * epoch to make sure that bakers cannot predict too far in the future when
 * they will win the right to bake blocks.
 *
 * @generated from protobuf message concordium.v2.LeadershipElectionNonce
 */
export interface LeadershipElectionNonce {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Response type for GetElectionInfo.
 * Contains information related to baker election for a perticular block.
 *
 * @generated from protobuf message concordium.v2.ElectionInfo
 */
export interface ElectionInfo {
    /**
     * Baking lottery election difficulty. Present only in protocol versions 1-5.
     *
     * @generated from protobuf field: optional concordium.v2.ElectionDifficulty election_difficulty = 1;
     */
    electionDifficulty?: ElectionDifficulty;
    /**
     * Current leadership election nonce for the lottery.
     *
     * @generated from protobuf field: concordium.v2.LeadershipElectionNonce election_nonce = 2;
     */
    electionNonce?: LeadershipElectionNonce;
    /**
     * List of the currently eligible bakers.
     *
     * @generated from protobuf field: repeated concordium.v2.ElectionInfo.Baker baker_election_info = 3;
     */
    bakerElectionInfo: ElectionInfo_Baker[];
}
/**
 * @generated from protobuf message concordium.v2.ElectionInfo.Baker
 */
export interface ElectionInfo_Baker {
    /**
     * The ID of the baker.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker = 1;
     */
    baker?: BakerId;
    /**
     * The account address of the baker.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress account = 2;
     */
    account?: AccountAddress;
    /**
     * The lottery power of the baker, rounded to the nearest representable "double".
     *
     * @generated from protobuf field: double lottery_power = 3;
     */
    lotteryPower: number;
}
/**
 * A protocol generated event that is not directly caused by a transaction. This
 * includes minting new CCD, rewarding different bakers and delegators, etc.
 *
 * @generated from protobuf message concordium.v2.BlockSpecialEvent
 */
export interface BlockSpecialEvent {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "bakingRewards";
        /**
         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.BakingRewards baking_rewards = 1;
         */
        bakingRewards: BlockSpecialEvent_BakingRewards;
    } | {
        oneofKind: "mint";
        /**
         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.Mint mint = 2;
         */
        mint: BlockSpecialEvent_Mint;
    } | {
        oneofKind: "finalizationRewards";
        /**
         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.FinalizationRewards finalization_rewards = 3;
         */
        finalizationRewards: BlockSpecialEvent_FinalizationRewards;
    } | {
        oneofKind: "blockReward";
        /**
         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.BlockReward block_reward = 4;
         */
        blockReward: BlockSpecialEvent_BlockReward;
    } | {
        oneofKind: "paydayFoundationReward";
        /**
         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.PaydayFoundationReward payday_foundation_reward = 5;
         */
        paydayFoundationReward: BlockSpecialEvent_PaydayFoundationReward;
    } | {
        oneofKind: "paydayAccountReward";
        /**
         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.PaydayAccountReward payday_account_reward = 6;
         */
        paydayAccountReward: BlockSpecialEvent_PaydayAccountReward;
    } | {
        oneofKind: "blockAccrueReward";
        /**
         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.BlockAccrueReward block_accrue_reward = 7;
         */
        blockAccrueReward: BlockSpecialEvent_BlockAccrueReward;
    } | {
        oneofKind: "paydayPoolReward";
        /**
         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.PaydayPoolReward payday_pool_reward = 8;
         */
        paydayPoolReward: BlockSpecialEvent_PaydayPoolReward;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A representation of a mapping from an account address to an amount.
 *
 * @generated from protobuf message concordium.v2.BlockSpecialEvent.AccountAmounts
 */
export interface BlockSpecialEvent_AccountAmounts {
    /**
     * @generated from protobuf field: repeated concordium.v2.BlockSpecialEvent.AccountAmounts.Entry entries = 1;
     */
    entries: BlockSpecialEvent_AccountAmounts_Entry[];
}
/**
 * The entry for the map.
 *
 * @generated from protobuf message concordium.v2.BlockSpecialEvent.AccountAmounts.Entry
 */
export interface BlockSpecialEvent_AccountAmounts_Entry {
    /**
     * The key type
     *
     * @generated from protobuf field: concordium.v2.AccountAddress account = 1;
     */
    account?: AccountAddress;
    /**
     * The value type
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 2;
     */
    amount?: Amount;
}
/**
 * Payment to each baker of a previous epoch, in proportion to the number
 * of blocks they contributed.
 *
 * @generated from protobuf message concordium.v2.BlockSpecialEvent.BakingRewards
 */
export interface BlockSpecialEvent_BakingRewards {
    /**
     * The amount awarded to each baker.
     *
     * @generated from protobuf field: concordium.v2.BlockSpecialEvent.AccountAmounts baker_rewards = 1;
     */
    bakerRewards?: BlockSpecialEvent_AccountAmounts;
    /**
     * The remaining balance of the baker reward account.
     *
     * @generated from protobuf field: concordium.v2.Amount remainder = 2;
     */
    remainder?: Amount;
}
/**
 * Minting of new CCD.
 *
 * @generated from protobuf message concordium.v2.BlockSpecialEvent.Mint
 */
export interface BlockSpecialEvent_Mint {
    /**
     * The amount allocated to the banking reward account.
     *
     * @generated from protobuf field: concordium.v2.Amount mint_baking_reward = 1;
     */
    mintBakingReward?: Amount;
    /**
     * The amount allocated to the finalization reward account.
     *
     * @generated from protobuf field: concordium.v2.Amount mint_finalization_reward = 2;
     */
    mintFinalizationReward?: Amount;
    /**
     * The amount allocated as the platform development charge.
     *
     * @generated from protobuf field: concordium.v2.Amount mint_platform_development_charge = 3;
     */
    mintPlatformDevelopmentCharge?: Amount;
    /**
     * The account to which the platform development charge is paid.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 4;
     */
    foundationAccount?: AccountAddress;
}
/**
 * Payment to each finalizer on inclusion of a finalization record in a block.
 *
 * @generated from protobuf message concordium.v2.BlockSpecialEvent.FinalizationRewards
 */
export interface BlockSpecialEvent_FinalizationRewards {
    /**
     * The amount awarded to each finalizer.
     *
     * @generated from protobuf field: concordium.v2.BlockSpecialEvent.AccountAmounts finalization_rewards = 1;
     */
    finalizationRewards?: BlockSpecialEvent_AccountAmounts;
    /**
     * The remaining balance of the finalization reward account.
     *
     * @generated from protobuf field: concordium.v2.Amount remainder = 2;
     */
    remainder?: Amount;
}
/**
 * Disbursement of fees from a block between the GAS account,
 * the baker, and the foundation. It should always be that:
 *
 * ```transaction_fees + old_gas_account = new_gas_account + baker_reward + foundation_charge```
 *
 * @generated from protobuf message concordium.v2.BlockSpecialEvent.BlockReward
 */
export interface BlockSpecialEvent_BlockReward {
    /**
     * The total fees paid for transactions in the block.
     *
     * @generated from protobuf field: concordium.v2.Amount transaction_fees = 1;
     */
    transactionFees?: Amount;
    /**
     * The old balance of the GAS account.
     *
     * @generated from protobuf field: concordium.v2.Amount old_gas_account = 2;
     */
    oldGasAccount?: Amount;
    /**
     * The new balance of the GAS account.
     *
     * @generated from protobuf field: concordium.v2.Amount new_gas_account = 3;
     */
    newGasAccount?: Amount;
    /**
     * The amount awarded to the baker.
     *
     * @generated from protobuf field: concordium.v2.Amount baker_reward = 4;
     */
    bakerReward?: Amount;
    /**
     * The amount awarded to the foundation.
     *
     * @generated from protobuf field: concordium.v2.Amount foundation_charge = 5;
     */
    foundationCharge?: Amount;
    /**
     * The baker of the block, who receives the award.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress baker = 6;
     */
    baker?: AccountAddress;
    /**
     * The foundation account.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 7;
     */
    foundationAccount?: AccountAddress;
}
/**
 * Foundation tax.
 *
 * @generated from protobuf message concordium.v2.BlockSpecialEvent.PaydayFoundationReward
 */
export interface BlockSpecialEvent_PaydayFoundationReward {
    /**
     * The account that got rewarded.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 1;
     */
    foundationAccount?: AccountAddress;
    /**
     * The transaction fee reward at payday to the account.
     *
     * @generated from protobuf field: concordium.v2.Amount development_charge = 2;
     */
    developmentCharge?: Amount;
}
/**
 * Reward payment to the given account.
 *
 * @generated from protobuf message concordium.v2.BlockSpecialEvent.PaydayAccountReward
 */
export interface BlockSpecialEvent_PaydayAccountReward {
    /**
     * The account that got rewarded.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress account = 1;
     */
    account?: AccountAddress;
    /**
     * The transaction fee reward at payday to the account.
     *
     * @generated from protobuf field: concordium.v2.Amount transaction_fees = 2;
     */
    transactionFees?: Amount;
    /**
     * The baking reward at payday to the account.
     *
     * @generated from protobuf field: concordium.v2.Amount baker_reward = 3;
     */
    bakerReward?: Amount;
    /**
     * The finalization reward at payday to the account.
     *
     * @generated from protobuf field: concordium.v2.Amount finalization_reward = 4;
     */
    finalizationReward?: Amount;
}
/**
 * Amounts accrued to accounts for each baked block.
 *
 * @generated from protobuf message concordium.v2.BlockSpecialEvent.BlockAccrueReward
 */
export interface BlockSpecialEvent_BlockAccrueReward {
    /**
     * The total fees paid for transactions in the block.
     *
     * @generated from protobuf field: concordium.v2.Amount transaction_fees = 1;
     */
    transactionFees?: Amount;
    /**
     * The old balance of the GAS account.
     *
     * @generated from protobuf field: concordium.v2.Amount old_gas_account = 2;
     */
    oldGasAccount?: Amount;
    /**
     * The new balance of the GAS account.
     *
     * @generated from protobuf field: concordium.v2.Amount new_gas_account = 3;
     */
    newGasAccount?: Amount;
    /**
     * The amount awarded to the baker.
     *
     * @generated from protobuf field: concordium.v2.Amount baker_reward = 4;
     */
    bakerReward?: Amount;
    /**
     * The amount awarded to the passive delegators.
     *
     * @generated from protobuf field: concordium.v2.Amount passive_reward = 5;
     */
    passiveReward?: Amount;
    /**
     * The amount awarded to the foundation.
     *
     * @generated from protobuf field: concordium.v2.Amount foundation_charge = 6;
     */
    foundationCharge?: Amount;
    /**
     * The baker of the block, who will receive the award.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker = 7;
     */
    baker?: BakerId;
}
/**
 * Payment distributed to a pool or passive delegators.
 *
 * @generated from protobuf message concordium.v2.BlockSpecialEvent.PaydayPoolReward
 */
export interface BlockSpecialEvent_PaydayPoolReward {
    /**
     * The pool owner (passive delegators when not present).
     *
     * @generated from protobuf field: optional concordium.v2.BakerId pool_owner = 1;
     */
    poolOwner?: BakerId;
    /**
     * Accrued transaction fees for pool.
     *
     * @generated from protobuf field: concordium.v2.Amount transaction_fees = 2;
     */
    transactionFees?: Amount;
    /**
     * Accrued baking rewards for pool.
     *
     * @generated from protobuf field: concordium.v2.Amount baker_reward = 3;
     */
    bakerReward?: Amount;
    /**
     * Accrued finalization rewards for pool.
     *
     * @generated from protobuf field: concordium.v2.Amount finalization_reward = 4;
     */
    finalizationReward?: Amount;
}
/**
 * A pending update.
 *
 * @generated from protobuf message concordium.v2.PendingUpdate
 */
export interface PendingUpdate {
    /**
     * The effective time of the update.
     *
     * @generated from protobuf field: concordium.v2.TransactionTime effective_time = 1;
     */
    effectiveTime?: TransactionTime;
    /**
     * @generated from protobuf oneof: effect
     */
    effect: {
        oneofKind: "rootKeys";
        /**
         * Updates to the root keys.
         *
         * @generated from protobuf field: concordium.v2.HigherLevelKeys root_keys = 2;
         */
        rootKeys: HigherLevelKeys;
    } | {
        oneofKind: "level1Keys";
        /**
         * Updates to the level 1 keys.
         *
         * @generated from protobuf field: concordium.v2.HigherLevelKeys level1_keys = 3;
         */
        level1Keys: HigherLevelKeys;
    } | {
        oneofKind: "level2KeysCpv0";
        /**
         * Updates to the level 2 keys.
         *
         * @generated from protobuf field: concordium.v2.AuthorizationsV0 level2_keys_cpv_0 = 4;
         */
        level2KeysCpv0: AuthorizationsV0;
    } | {
        oneofKind: "level2KeysCpv1";
        /**
         * Updates to the level 2 keys.
         *
         * @generated from protobuf field: concordium.v2.AuthorizationsV1 level2_keys_cpv_1 = 5;
         */
        level2KeysCpv1: AuthorizationsV1;
    } | {
        oneofKind: "protocol";
        /**
         * Protocol updates.
         *
         * @generated from protobuf field: concordium.v2.ProtocolUpdate protocol = 6;
         */
        protocol: ProtocolUpdate;
    } | {
        oneofKind: "electionDifficulty";
        /**
         * Updates to the election difficulty parameter.
         *
         * @generated from protobuf field: concordium.v2.ElectionDifficulty election_difficulty = 7;
         */
        electionDifficulty: ElectionDifficulty;
    } | {
        oneofKind: "euroPerEnergy";
        /**
         * Updates to the euro:energy exchange rate.
         *
         * @generated from protobuf field: concordium.v2.ExchangeRate euro_per_energy = 8;
         */
        euroPerEnergy: ExchangeRate;
    } | {
        oneofKind: "microCcdPerEuro";
        /**
         * Updates to the CCD:EUR exchange rate.
         *
         * @generated from protobuf field: concordium.v2.ExchangeRate micro_ccd_per_euro = 9;
         */
        microCcdPerEuro: ExchangeRate;
    } | {
        oneofKind: "foundationAccount";
        /**
         * Updates to the foundation account.
         *
         * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 10;
         */
        foundationAccount: AccountAddress;
    } | {
        oneofKind: "mintDistributionCpv0";
        /**
         * Updates to the mint distribution. Is only relevant prior to protocol version 4.
         *
         * @generated from protobuf field: concordium.v2.MintDistributionCpv0 mint_distribution_cpv_0 = 11;
         */
        mintDistributionCpv0: MintDistributionCpv0;
    } | {
        oneofKind: "mintDistributionCpv1";
        /**
         * The mint distribution was updated. Introduced in protocol version 4.
         *
         * @generated from protobuf field: concordium.v2.MintDistributionCpv1 mint_distribution_cpv_1 = 12;
         */
        mintDistributionCpv1: MintDistributionCpv1;
    } | {
        oneofKind: "transactionFeeDistribution";
        /**
         * Updates to the transaction fee distribution.
         *
         * @generated from protobuf field: concordium.v2.TransactionFeeDistribution transaction_fee_distribution = 13;
         */
        transactionFeeDistribution: TransactionFeeDistribution;
    } | {
        oneofKind: "gasRewards";
        /**
         * Updates to the GAS rewards.
         *
         * @generated from protobuf field: concordium.v2.GasRewards gas_rewards = 14;
         */
        gasRewards: GasRewards;
    } | {
        oneofKind: "poolParametersCpv0";
        /**
         * Updates baker stake threshold. Is only relevant prior to protocol version 4.
         *
         * @generated from protobuf field: concordium.v2.BakerStakeThreshold pool_parameters_cpv_0 = 15;
         */
        poolParametersCpv0: BakerStakeThreshold;
    } | {
        oneofKind: "poolParametersCpv1";
        /**
         * Updates pool parameters. Introduced in protocol version 4.
         *
         * @generated from protobuf field: concordium.v2.PoolParametersCpv1 pool_parameters_cpv_1 = 16;
         */
        poolParametersCpv1: PoolParametersCpv1;
    } | {
        oneofKind: "addAnonymityRevoker";
        /**
         * Adds a new anonymity revoker.
         *
         * @generated from protobuf field: concordium.v2.ArInfo add_anonymity_revoker = 17;
         */
        addAnonymityRevoker: ArInfo;
    } | {
        oneofKind: "addIdentityProvider";
        /**
         * Adds a new identity provider.
         *
         * @generated from protobuf field: concordium.v2.IpInfo add_identity_provider = 18;
         */
        addIdentityProvider: IpInfo;
    } | {
        oneofKind: "cooldownParameters";
        /**
         * Updates to cooldown parameters for chain parameters version 1 introduced in protocol version 4.
         *
         * @generated from protobuf field: concordium.v2.CooldownParametersCpv1 cooldown_parameters = 19;
         */
        cooldownParameters: CooldownParametersCpv1;
    } | {
        oneofKind: "timeParameters";
        /**
         * Updates to time parameters for chain parameters version 1 introduced in protocol version 4.
         *
         * @generated from protobuf field: concordium.v2.TimeParametersCpv1 time_parameters = 20;
         */
        timeParameters: TimeParametersCpv1;
    } | {
        oneofKind: "gasRewardsCpv2";
        /**
         * Updates to the GAS rewards effective from protocol version 6 (chain parameters version 2).
         *
         * @generated from protobuf field: concordium.v2.GasRewardsCpv2 gas_rewards_cpv_2 = 21;
         */
        gasRewardsCpv2: GasRewardsCpv2;
    } | {
        oneofKind: "timeoutParameters";
        /**
         * Updates to the consensus timeouts for chain parameters version 2.
         *
         * @generated from protobuf field: concordium.v2.TimeoutParameters timeout_parameters = 22;
         */
        timeoutParameters: TimeoutParameters;
    } | {
        oneofKind: "minBlockTime";
        /**
         * Updates to the the minimum time between blocks for chain parameters version 2.
         *
         * @generated from protobuf field: concordium.v2.Duration min_block_time = 23;
         */
        minBlockTime: Duration;
    } | {
        oneofKind: "blockEnergyLimit";
        /**
         * Updates to the block energy limit for chain parameters version 2.
         *
         * @generated from protobuf field: concordium.v2.Energy block_energy_limit = 24;
         */
        blockEnergyLimit: Energy;
    } | {
        oneofKind: "finalizationCommitteeParameters";
        /**
         * Updates to the finalization committee for for chain parameters version 2.
         *
         * @generated from protobuf field: concordium.v2.FinalizationCommitteeParameters finalization_committee_parameters = 25;
         */
        finalizationCommitteeParameters: FinalizationCommitteeParameters;
    } | {
        oneofKind: undefined;
    };
}
/**
 * The response for `GetNextUpdateSequenceNumbers`.
 *
 * @generated from protobuf message concordium.v2.NextUpdateSequenceNumbers
 */
export interface NextUpdateSequenceNumbers {
    /**
     * Updates to the root keys.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber root_keys = 1;
     */
    rootKeys?: SequenceNumber;
    /**
     * Updates to the level 1 keys.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber level1_keys = 2;
     */
    level1Keys?: SequenceNumber;
    /**
     * Updates to the level 2 keys.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber level2_keys = 3;
     */
    level2Keys?: SequenceNumber;
    /**
     * Protocol updates.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber protocol = 4;
     */
    protocol?: SequenceNumber;
    /**
     * Updates to the election difficulty parameter.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber election_difficulty = 5;
     */
    electionDifficulty?: SequenceNumber;
    /**
     * Updates to the euro:energy exchange rate.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber euro_per_energy = 6;
     */
    euroPerEnergy?: SequenceNumber;
    /**
     * Updates to the CCD:EUR exchange rate.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber micro_ccd_per_euro = 7;
     */
    microCcdPerEuro?: SequenceNumber;
    /**
     * Updates to the foundation account.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber foundation_account = 8;
     */
    foundationAccount?: SequenceNumber;
    /**
     * Updates to the mint distribution.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber mint_distribution = 9;
     */
    mintDistribution?: SequenceNumber;
    /**
     * Updates to the transaction fee distribution.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber transaction_fee_distribution = 10;
     */
    transactionFeeDistribution?: SequenceNumber;
    /**
     * Updates to the GAS rewards.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber gas_rewards = 11;
     */
    gasRewards?: SequenceNumber;
    /**
     * Updates pool parameters.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber pool_parameters = 12;
     */
    poolParameters?: SequenceNumber;
    /**
     * Adds a new anonymity revoker.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber add_anonymity_revoker = 13;
     */
    addAnonymityRevoker?: SequenceNumber;
    /**
     * Adds a new identity provider.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber add_identity_provider = 14;
     */
    addIdentityProvider?: SequenceNumber;
    /**
     * Updates to cooldown parameters for chain parameters version 1 introduced in protocol version 4.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber cooldown_parameters = 15;
     */
    cooldownParameters?: SequenceNumber;
    /**
     * Updates to time parameters for chain parameters version 1 introduced in protocol version 4.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber time_parameters = 16;
     */
    timeParameters?: SequenceNumber;
    /**
     * Updates to the timeout parameters
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber timeout_parameters = 17;
     */
    timeoutParameters?: SequenceNumber;
    /**
     * Updates to the the minimum time between blocks for chain parameters version 2.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber min_block_time = 18;
     */
    minBlockTime?: SequenceNumber;
    /**
     * Updates to the block energy limit for chain parameters version 2.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber block_energy_limit = 19;
     */
    blockEnergyLimit?: SequenceNumber;
    /**
     * Updates to the finalization committee parameters
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber finalization_committee_parameters = 20;
     */
    finalizationCommitteeParameters?: SequenceNumber;
}
/**
 * A request to send a new block item to the chain.
 * An IP address
 *
 * @generated from protobuf message concordium.v2.IpAddress
 */
export interface IpAddress {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
/**
 * A port
 * Valid port numbers are expected thus
 * the value is expected to be in the range (0..u16::MAX).
 *
 * @generated from protobuf message concordium.v2.Port
 */
export interface Port {
    /**
     * @generated from protobuf field: uint32 value = 1;
     */
    value: number;
}
/**
 * A socket address consisting of
 * an IP + port.
 *
 * @generated from protobuf message concordium.v2.IpSocketAddress
 */
export interface IpSocketAddress {
    /**
     * @generated from protobuf field: concordium.v2.IpAddress ip = 1;
     */
    ip?: IpAddress;
    /**
     * @generated from protobuf field: concordium.v2.Port port = 2;
     */
    port?: Port;
}
/**
 * A peer id
 * An identifier that the peer wants to be
 * be recoknized by.
 * The underlying value is simply a u64.
 * Note. There is no authenticity of the peer id and
 * as such it is only used for logging purposes.
 *
 * @generated from protobuf message concordium.v2.PeerId
 */
export interface PeerId {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
/**
 * A banned peer
 *
 * @generated from protobuf message concordium.v2.BannedPeer
 */
export interface BannedPeer {
    /**
     * The IP address of the banned peer.
     *
     * @generated from protobuf field: concordium.v2.IpAddress ip_address = 1;
     */
    ipAddress?: IpAddress;
}
/**
 * The banned peers given by
 * their IP addresses.
 *
 * @generated from protobuf message concordium.v2.BannedPeers
 */
export interface BannedPeers {
    /**
     * @generated from protobuf field: repeated concordium.v2.BannedPeer peers = 1;
     */
    peers: BannedPeer[];
}
/**
 * A peer to ban specified by its IP.
 * Note. This will ban all peers located behind the
 * specified IP even though they are using different ports.
 *
 * @generated from protobuf message concordium.v2.PeerToBan
 */
export interface PeerToBan {
    /**
     * @generated from protobuf field: concordium.v2.IpAddress ip_address = 1;
     */
    ipAddress?: IpAddress;
}
/**
 * Request to enable dumping of network packages.
 *
 * @generated from protobuf message concordium.v2.DumpRequest
 */
export interface DumpRequest {
    /**
     * Which file to dump the packages into.
     * Requires a valid path.
     *
     * @generated from protobuf field: string file = 1;
     */
    file: string;
    /**
     * Whether the node should dump raw packages.
     *
     * @generated from protobuf field: bool raw = 2;
     */
    raw: boolean;
}
/**
 * Peers and their associated network related statistics
 *
 * @generated from protobuf message concordium.v2.PeersInfo
 */
export interface PeersInfo {
    /**
     * @generated from protobuf field: repeated concordium.v2.PeersInfo.Peer peers = 1;
     */
    peers: PeersInfo_Peer[];
}
/**
 * A peer that the node is connected to.
 *
 * @generated from protobuf message concordium.v2.PeersInfo.Peer
 */
export interface PeersInfo_Peer {
    /**
     * The identifier of the peer that it
     * wishes to be identified by.
     *
     * @generated from protobuf field: concordium.v2.PeerId peer_id = 1;
     */
    peerId?: PeerId;
    /**
     * The port of the peer.
     *
     * @generated from protobuf field: concordium.v2.IpSocketAddress socket_address = 2;
     */
    socketAddress?: IpSocketAddress;
    /**
     * Network related statistics for the peer.
     *
     * @generated from protobuf field: concordium.v2.PeersInfo.Peer.NetworkStats network_stats = 3;
     */
    networkStats?: PeersInfo_Peer_NetworkStats;
    /**
     * @generated from protobuf oneof: consensus_info
     */
    consensusInfo: {
        oneofKind: "bootstrapper";
        /**
         * The peer is of type `Bootstrapper` is not participating in consensus
         * and thus has no catchup status.
         *
         * @generated from protobuf field: concordium.v2.Empty bootstrapper = 4;
         */
        bootstrapper: Empty;
    } | {
        oneofKind: "nodeCatchupStatus";
        /**
         * The peer is a regular node and have
         * an associated catchup status.
         *
         * @generated from protobuf field: concordium.v2.PeersInfo.Peer.CatchupStatus node_catchup_status = 5;
         */
        nodeCatchupStatus: PeersInfo_Peer_CatchupStatus;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Network statistics for the peer
 *
 * @generated from protobuf message concordium.v2.PeersInfo.Peer.NetworkStats
 */
export interface PeersInfo_Peer_NetworkStats {
    /**
     * The number of messages sent to the peer.
     * Packets are blocks, transactions, catchup messages, finalization records
     * and network messages such as pings and peer requests.
     *
     * @generated from protobuf field: uint64 packets_sent = 2;
     */
    packetsSent: bigint;
    /**
     * The number of messages received from the peer.
     * Packets are blocks, transactions, catchup messages, finalization records
     * and network messages such as pings and peer requests.
     *
     * @generated from protobuf field: uint64 packets_received = 3;
     */
    packetsReceived: bigint;
    /**
     * The connection latency (i.e., ping time) in milliseconds.
     *
     * @generated from protobuf field: uint64 latency = 4;
     */
    latency: bigint;
}
/**
 * @generated from protobuf enum concordium.v2.PeersInfo.Peer.CatchupStatus
 */
export enum PeersInfo_Peer_CatchupStatus {
    /**
     * The peer does not have any data unknown to us. If we receive a message from the
     * peer that refers to unknown data (e.g., an unknown block) the peer is marked as pending.
     *
     * @generated from protobuf enum value: UPTODATE = 0;
     */
    UPTODATE = 0,
    /**
     * The peer might have some data unknown to us. A peer can be in this state either because
     * it sent a message that refers to data unknown to us, or before we have established a baseline with it.
     * The latter happens during node startup, as well as upon protocol updates until the initial catchup handshake
     * completes.
     *
     * @generated from protobuf enum value: PENDING = 1;
     */
    PENDING = 1,
    /**
     * The node is currently catching up by requesting blocks from this peer.
     * There will be at most one peer with this status at a time.
     * Once the peer has responded to the request, its status will be changed to:
     * - 'UPTODATE' if the peer has no more data that is not known to us
     * - 'PENDING' if the node has more data that is unknown to us.
     *
     * @generated from protobuf enum value: CATCHINGUP = 2;
     */
    CATCHINGUP = 2
}
/**
 * Node info response
 * Contains various information of the
 * enquired node.
 *
 * @generated from protobuf message concordium.v2.NodeInfo
 */
export interface NodeInfo {
    /**
     * The version of the node.
     *
     * @generated from protobuf field: string peer_version = 1;
     */
    peerVersion: string;
    /**
     * local time of the node.
     *
     * @generated from protobuf field: concordium.v2.Timestamp local_time = 3;
     */
    localTime?: Timestamp;
    /**
     * Number of milliseconds that the node
     * has been alive.
     *
     * @generated from protobuf field: concordium.v2.Duration peer_uptime = 4;
     */
    peerUptime?: Duration;
    /**
     * Information related to the p2p protocol.
     *
     * @generated from protobuf field: concordium.v2.NodeInfo.NetworkInfo network_info = 5;
     */
    networkInfo?: NodeInfo_NetworkInfo;
    /**
     * @generated from protobuf oneof: details
     */
    details: {
        oneofKind: "bootstrapper";
        /**
         * The node is a bootstrapper and is not running consensus.
         *
         * @generated from protobuf field: concordium.v2.Empty bootstrapper = 6;
         */
        bootstrapper: Empty;
    } | {
        oneofKind: "node";
        /**
         * The node is a regular node and runs the consensus
         * protocol.
         *
         * @generated from protobuf field: concordium.v2.NodeInfo.Node node = 7;
         */
        node: NodeInfo_Node;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Network related information of the node.
 *
 * @generated from protobuf message concordium.v2.NodeInfo.NetworkInfo
 */
export interface NodeInfo_NetworkInfo {
    /**
     * The node id.
     *
     * @generated from protobuf field: concordium.v2.PeerId node_id = 1;
     */
    nodeId?: PeerId;
    /**
     * Total number of packets sent by the node.
     *
     * @generated from protobuf field: uint64 peer_total_sent = 2;
     */
    peerTotalSent: bigint;
    /**
     * Total number of packets received by the node.
     *
     * @generated from protobuf field: uint64 peer_total_received = 3;
     */
    peerTotalReceived: bigint;
    /**
     * Average outbound throughput in bytes per second.
     *
     * @generated from protobuf field: uint64 avg_bps_in = 4;
     */
    avgBpsIn: bigint;
    /**
     * Average inbound throughput in bytes per second.
     *
     * @generated from protobuf field: uint64 avg_bps_out = 5;
     */
    avgBpsOut: bigint;
}
/**
 * Consensus info for a node configured with baker keys.
 *
 * @generated from protobuf message concordium.v2.NodeInfo.BakerConsensusInfo
 */
export interface NodeInfo_BakerConsensusInfo {
    /**
     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;
     */
    bakerId?: BakerId;
    /**
     * @generated from protobuf oneof: status
     */
    status: {
        oneofKind: "passiveCommitteeInfo";
        /**
         * The node is currently not baking.
         *
         * @generated from protobuf field: concordium.v2.NodeInfo.BakerConsensusInfo.PassiveCommitteeInfo passive_committee_info = 2;
         */
        passiveCommitteeInfo: NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo;
    } | {
        oneofKind: "activeBakerCommitteeInfo";
        /**
         * The node is configured with baker keys and
         * is member of the baking committee.
         *
         * @generated from protobuf field: concordium.v2.NodeInfo.BakerConsensusInfo.ActiveBakerCommitteeInfo active_baker_committee_info = 3;
         */
        activeBakerCommitteeInfo: NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo;
    } | {
        oneofKind: "activeFinalizerCommitteeInfo";
        /**
         * The node is configured with baker keys and
         * is member of the baking and finalization committees.
         *
         * @generated from protobuf field: concordium.v2.NodeInfo.BakerConsensusInfo.ActiveFinalizerCommitteeInfo active_finalizer_committee_info = 4;
         */
        activeFinalizerCommitteeInfo: NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Tagging message type for a node that
 * is configured with baker keys and active in
 * the current baking committee
 *
 * @generated from protobuf message concordium.v2.NodeInfo.BakerConsensusInfo.ActiveBakerCommitteeInfo
 */
export interface NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo {
}
/**
 * Tagging message type for a node that
 * is configured with baker keys and active in
 * the current finalizer committee (and also baking committee).
 *
 * @generated from protobuf message concordium.v2.NodeInfo.BakerConsensusInfo.ActiveFinalizerCommitteeInfo
 */
export interface NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo {
}
/**
 * The committee information of a node configured with
 * baker keys but somehow the node is _not_ part of the
 * current baking committee.
 *
 * @generated from protobuf enum concordium.v2.NodeInfo.BakerConsensusInfo.PassiveCommitteeInfo
 */
export enum NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo {
    /**
     * The node is started with baker keys however it is currently not in the baking committee.
     * The node is __not__ baking.
     *
     * @generated from protobuf enum value: NOT_IN_COMMITTEE = 0;
     */
    NOT_IN_COMMITTEE = 0,
    /**
     * The account is registered as a baker but not in the current `Epoch`.
     * The node is __not__ baking.
     *
     * @generated from protobuf enum value: ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE = 1;
     */
    ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE = 1,
    /**
     * The node has configured invalid baker keys i.e., the configured
     * baker keys do not match the current keys on the baker account.
     * The node is __not__ baking.
     *
     * @generated from protobuf enum value: ADDED_BUT_WRONG_KEYS = 2;
     */
    ADDED_BUT_WRONG_KEYS = 2
}
/**
 * The node is a regular node.
 *
 * @generated from protobuf message concordium.v2.NodeInfo.Node
 */
export interface NodeInfo_Node {
    /**
     * @generated from protobuf oneof: consensus_status
     */
    consensusStatus: {
        oneofKind: "notRunning";
        /**
         * The node is not running consensus.
         * This is the case only when the node is
         * not supporting the protocol on the chain.
         * The node does not process blocks.
         *
         * @generated from protobuf field: concordium.v2.Empty not_running = 1;
         */
        notRunning: Empty;
    } | {
        oneofKind: "passive";
        /**
         * Consensus info for a node that is
         * not configured with baker keys.
         * The node is only processing blocks and
         * relaying blocks and transactions and responding to
         * catchup messages.
         *
         * @generated from protobuf field: concordium.v2.Empty passive = 2;
         */
        passive: Empty;
    } | {
        oneofKind: "active";
        /**
         * The node is configured with baker credentials and consensus is running.
         *
         * @generated from protobuf field: concordium.v2.NodeInfo.BakerConsensusInfo active = 3;
         */
        active: NodeInfo_BakerConsensusInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message concordium.v2.SendBlockItemRequest
 */
export interface SendBlockItemRequest {
    /**
     * @generated from protobuf oneof: block_item
     */
    blockItem: {
        oneofKind: "accountTransaction";
        /**
         * Account transactions are messages which are signed and paid for by an account.
         *
         * @generated from protobuf field: concordium.v2.AccountTransaction account_transaction = 1;
         */
        accountTransaction: AccountTransaction;
    } | {
        oneofKind: "credentialDeployment";
        /**
         * Credential deployments create new accounts. They are not paid for
         * directly by the sender. Instead, bakers are rewarded by the protocol for
         * including them.
         *
         * @generated from protobuf field: concordium.v2.CredentialDeployment credential_deployment = 2;
         */
        credentialDeployment: CredentialDeployment;
    } | {
        oneofKind: "updateInstruction";
        /**
         * Update instructions are messages which can update the chain parameters. Including which keys are allowed
         * to make future update instructions.
         *
         * @generated from protobuf field: concordium.v2.UpdateInstruction update_instruction = 3;
         */
        updateInstruction: UpdateInstruction;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Credential deployments create new accounts. They are not paid for
 * directly by the sender. Instead, bakers are rewarded by the protocol for
 * including them.
 *
 * @generated from protobuf message concordium.v2.CredentialDeployment
 */
export interface CredentialDeployment {
    /**
     * @generated from protobuf field: concordium.v2.TransactionTime message_expiry = 1;
     */
    messageExpiry?: TransactionTime;
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "rawPayload";
        /**
         * A raw payload, which is just the encoded payload.
         * A typed variant might be added in the future.
         *
         * @generated from protobuf field: bytes raw_payload = 2;
         */
        rawPayload: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A single signature. Used when sending block items to a node with
 * `SendBlockItem`.
 *
 * @generated from protobuf message concordium.v2.Signature
 */
export interface Signature {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * A signature on an update instruction.
 * The type `UpdateKeysIndex` is not used directly, as messages cannot be keys in maps.
 *
 * @generated from protobuf message concordium.v2.SignatureMap
 */
export interface SignatureMap {
    /**
     * @generated from protobuf field: map<uint32, concordium.v2.Signature> signatures = 1;
     */
    signatures: {
        [key: number]: Signature;
    };
}
/**
 * Wrapper for a map from indexes to signatures.
 * Needed because protobuf doesn't allow nested maps directly.
 * The keys in the SignatureMap must not exceed 2^8.
 *
 * @generated from protobuf message concordium.v2.AccountSignatureMap
 */
export interface AccountSignatureMap {
    /**
     * @generated from protobuf field: map<uint32, concordium.v2.Signature> signatures = 1;
     */
    signatures: {
        [key: number]: Signature;
    };
}
/**
 * @generated from protobuf message concordium.v2.AccountTransactionSignature
 */
export interface AccountTransactionSignature {
    /**
     * A map from `CredentialIndex` to `SignatureMap`s.
     * The type `CredentialIndex` is not used directly, as messages cannot be keys in maps.
     * The map cannot contain more than 2^8 signatures.
     *
     * @generated from protobuf field: map<uint32, concordium.v2.AccountSignatureMap> signatures = 1;
     */
    signatures: {
        [key: number]: AccountSignatureMap;
    };
}
/**
 * Header of an account transaction that contains basic data to check whether
 * the sender and the transaction are valid. The header is shared by all transaction types.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionHeader
 */
export interface AccountTransactionHeader {
    /**
     * Sender of the transaction.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress sender = 1;
     */
    sender?: AccountAddress;
    /**
     * Sequence number of the transaction.
     *
     * @generated from protobuf field: concordium.v2.SequenceNumber sequence_number = 2;
     */
    sequenceNumber?: SequenceNumber;
    /**
     * Maximum amount of energy the transaction can take to execute.
     *
     * @generated from protobuf field: concordium.v2.Energy energy_amount = 3;
     */
    energyAmount?: Energy;
    /**
     * Latest time the transaction can included in a block.
     *
     * @generated from protobuf field: concordium.v2.TransactionTime expiry = 5;
     */
    expiry?: TransactionTime;
}
/**
 * Data required to initialize a new contract instance.
 *
 * @generated from protobuf message concordium.v2.InitContractPayload
 */
export interface InitContractPayload {
    /**
     * Amount of CCD to send to the instance.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 1;
     */
    amount?: Amount;
    /**
     * Reference to the module from which the instance will be created.
     *
     * @generated from protobuf field: concordium.v2.ModuleRef module_ref = 2;
     */
    moduleRef?: ModuleRef;
    /**
     * Name of the contract to initialize. This is expected to be in the format
     * `init_name`.
     *
     * @generated from protobuf field: concordium.v2.InitName init_name = 3;
     */
    initName?: InitName;
    /**
     * Parameter to call the `init` of the contract with.
     *
     * @generated from protobuf field: concordium.v2.Parameter parameter = 4;
     */
    parameter?: Parameter;
}
/**
 * Data required to update a contract instance.
 *
 * @generated from protobuf message concordium.v2.UpdateContractPayload
 */
export interface UpdateContractPayload {
    /**
     * Amount of CCD to send to the instance.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 1;
     */
    amount?: Amount;
    /**
     * Address of the instance to update.
     *
     * @generated from protobuf field: concordium.v2.ContractAddress address = 2;
     */
    address?: ContractAddress;
    /**
     * Name of the entrypoint to call to update the instance.
     * This is expected to be in the format `contractName.entrypointName`.
     *
     * @generated from protobuf field: concordium.v2.ReceiveName receive_name = 3;
     */
    receiveName?: ReceiveName;
    /**
     * Parameter to pass to the entrypoint.
     *
     * @generated from protobuf field: concordium.v2.Parameter parameter = 4;
     */
    parameter?: Parameter;
}
/**
 * Payload of a transfer between two accounts.
 *
 * @generated from protobuf message concordium.v2.TransferPayload
 */
export interface TransferPayload {
    /**
     * Amount of CCD to send.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 1;
     */
    amount?: Amount;
    /**
     * Receiver address.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress receiver = 2;
     */
    receiver?: AccountAddress;
}
/**
 * Payload of a transfer between two accounts with a memo.
 *
 * @generated from protobuf message concordium.v2.TransferWithMemoPayload
 */
export interface TransferWithMemoPayload {
    /**
     * Amount of CCD to send.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 1;
     */
    amount?: Amount;
    /**
     * Receiver address.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress receiver = 2;
     */
    receiver?: AccountAddress;
    /**
     * Memo to include with the transfer.
     *
     * @generated from protobuf field: concordium.v2.Memo memo = 3;
     */
    memo?: Memo;
}
/**
 * The payload for an account transaction.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionPayload
 */
export interface AccountTransactionPayload {
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "rawPayload";
        /**
         * A pre-serialized payload in the binary serialization format defined
         * by the protocol.
         *
         * @generated from protobuf field: bytes raw_payload = 1;
         */
        rawPayload: Uint8Array;
    } | {
        oneofKind: "deployModule";
        /**
         * A transfer between two accounts. With an optional memo.
         *
         * @generated from protobuf field: concordium.v2.VersionedModuleSource deploy_module = 2;
         */
        deployModule: VersionedModuleSource;
    } | {
        oneofKind: "initContract";
        /**
         * @generated from protobuf field: concordium.v2.InitContractPayload init_contract = 3;
         */
        initContract: InitContractPayload;
    } | {
        oneofKind: "updateContract";
        /**
         * @generated from protobuf field: concordium.v2.UpdateContractPayload update_contract = 4;
         */
        updateContract: UpdateContractPayload;
    } | {
        oneofKind: "transfer";
        /**
         * @generated from protobuf field: concordium.v2.TransferPayload transfer = 5;
         */
        transfer: TransferPayload;
    } | {
        oneofKind: "transferWithMemo";
        /**
         * @generated from protobuf field: concordium.v2.TransferWithMemoPayload transfer_with_memo = 6;
         */
        transferWithMemo: TransferWithMemoPayload;
    } | {
        oneofKind: "registerData";
        /**
         * @generated from protobuf field: concordium.v2.RegisteredData register_data = 7;
         */
        registerData: RegisteredData;
    } | {
        oneofKind: undefined;
    };
}
/**
 * An unsigned account transaction. This is used with the
 * `GetTransactionSignHash` endpoint to obtain the message to sign.
 *
 * @generated from protobuf message concordium.v2.PreAccountTransaction
 */
export interface PreAccountTransaction {
    /**
     * @generated from protobuf field: concordium.v2.AccountTransactionHeader header = 1;
     */
    header?: AccountTransactionHeader;
    /**
     * @generated from protobuf field: concordium.v2.AccountTransactionPayload payload = 2;
     */
    payload?: AccountTransactionPayload;
}
/**
 * Account transactions are messages which are signed and paid for by the sender
 * account.
 *
 * @generated from protobuf message concordium.v2.AccountTransaction
 */
export interface AccountTransaction {
    /**
     * @generated from protobuf field: concordium.v2.AccountTransactionSignature signature = 1;
     */
    signature?: AccountTransactionSignature;
    /**
     * @generated from protobuf field: concordium.v2.AccountTransactionHeader header = 2;
     */
    header?: AccountTransactionHeader;
    /**
     * @generated from protobuf field: concordium.v2.AccountTransactionPayload payload = 3;
     */
    payload?: AccountTransactionPayload;
}
/**
 * @generated from protobuf message concordium.v2.UpdateInstructionHeader
 */
export interface UpdateInstructionHeader {
    /**
     * @generated from protobuf field: concordium.v2.UpdateSequenceNumber sequence_number = 1;
     */
    sequenceNumber?: UpdateSequenceNumber;
    /**
     * @generated from protobuf field: concordium.v2.TransactionTime effective_time = 2;
     */
    effectiveTime?: TransactionTime;
    /**
     * @generated from protobuf field: concordium.v2.TransactionTime timeout = 3;
     */
    timeout?: TransactionTime;
}
/**
 * The payload for an UpdateInstruction.
 *
 * @generated from protobuf message concordium.v2.UpdateInstructionPayload
 */
export interface UpdateInstructionPayload {
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "rawPayload";
        /**
         * A raw payload encoded according to the format defined by the protocol.
         *
         * @generated from protobuf field: bytes raw_payload = 3;
         */
        rawPayload: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message concordium.v2.UpdateInstruction
 */
export interface UpdateInstruction {
    /**
     * A map from `UpdateKeysIndex` to `Signature`. Keys must not exceed 2^16.
     *
     * @generated from protobuf field: concordium.v2.SignatureMap signatures = 1;
     */
    signatures?: SignatureMap;
    /**
     * @generated from protobuf field: concordium.v2.UpdateInstructionHeader header = 2;
     */
    header?: UpdateInstructionHeader;
    /**
     * @generated from protobuf field: concordium.v2.UpdateInstructionPayload payload = 3;
     */
    payload?: UpdateInstructionPayload;
}
/**
 * Signature on an account transaction is defined to be the signature on the
 * hash of the `PreAccountTransaction`.
 *
 * @generated from protobuf message concordium.v2.AccountTransactionSignHash
 */
export interface AccountTransactionSignHash {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * The number of credential deployments allowed in a block. This in effect
 * determines the number of accounts that can be created in a block.
 *
 * @generated from protobuf message concordium.v2.CredentialsPerBlockLimit
 */
export interface CredentialsPerBlockLimit {
    /**
     * @generated from protobuf field: uint32 value = 1;
     */
    value: number;
}
/**
 * Updatable chain parameters that apply to protocol versions 1-3.
 *
 * @generated from protobuf message concordium.v2.ChainParametersV0
 */
export interface ChainParametersV0 {
    /**
     * Election difficulty for consensus lottery.
     *
     * @generated from protobuf field: concordium.v2.ElectionDifficulty election_difficulty = 1;
     */
    electionDifficulty?: ElectionDifficulty;
    /**
     * Euro per energy exchange rate.
     *
     * @generated from protobuf field: concordium.v2.ExchangeRate euro_per_energy = 2;
     */
    euroPerEnergy?: ExchangeRate;
    /**
     * Micro CCD per euro exchange rate.
     *
     * @generated from protobuf field: concordium.v2.ExchangeRate micro_ccd_per_euro = 3;
     */
    microCcdPerEuro?: ExchangeRate;
    /**
     * Extra number of epochs before reduction in stake, or baker
     * deregistration is completed.
     *
     * @generated from protobuf field: concordium.v2.Epoch baker_cooldown_epochs = 4;
     */
    bakerCooldownEpochs?: Epoch;
    /**
     * The limit for the number of account creations in a block.
     *
     * @generated from protobuf field: concordium.v2.CredentialsPerBlockLimit account_creation_limit = 5;
     */
    accountCreationLimit?: CredentialsPerBlockLimit;
    /**
     * Current mint distribution
     *
     * @generated from protobuf field: concordium.v2.MintDistributionCpv0 mint_distribution = 6;
     */
    mintDistribution?: MintDistributionCpv0;
    /**
     * Current transaction fee distribution.
     *
     * @generated from protobuf field: concordium.v2.TransactionFeeDistribution transaction_fee_distribution = 7;
     */
    transactionFeeDistribution?: TransactionFeeDistribution;
    /**
     * Current gas reward parameters.
     *
     * @generated from protobuf field: concordium.v2.GasRewards gas_rewards = 8;
     */
    gasRewards?: GasRewards;
    /**
     * The foundation account.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 9;
     */
    foundationAccount?: AccountAddress;
    /**
     * Minimum threshold for becoming a baker.
     *
     * @generated from protobuf field: concordium.v2.Amount minimum_threshold_for_baking = 10;
     */
    minimumThresholdForBaking?: Amount;
    /**
     * Keys allowed to do root updates.
     *
     * @generated from protobuf field: concordium.v2.HigherLevelKeys root_keys = 11;
     */
    rootKeys?: HigherLevelKeys;
    /**
     * Keys allowed to do level1 updates;
     *
     * @generated from protobuf field: concordium.v2.HigherLevelKeys level1_keys = 12;
     */
    level1Keys?: HigherLevelKeys;
    /**
     * Keys allowed to do parameter updates.
     *
     * @generated from protobuf field: concordium.v2.AuthorizationsV0 level2_keys = 13;
     */
    level2Keys?: AuthorizationsV0;
}
/**
 * Updatable chain parameters that apply to protocol versions 4-5.
 *
 * @generated from protobuf message concordium.v2.ChainParametersV1
 */
export interface ChainParametersV1 {
    /**
     * Election difficulty for consensus lottery.
     *
     * @generated from protobuf field: concordium.v2.ElectionDifficulty election_difficulty = 1;
     */
    electionDifficulty?: ElectionDifficulty;
    /**
     * Euro per energy exchange rate.
     *
     * @generated from protobuf field: concordium.v2.ExchangeRate euro_per_energy = 2;
     */
    euroPerEnergy?: ExchangeRate;
    /**
     * Micro CCD per euro exchange rate.
     *
     * @generated from protobuf field: concordium.v2.ExchangeRate micro_ccd_per_euro = 3;
     */
    microCcdPerEuro?: ExchangeRate;
    /**
     * Extra number of epochs before reduction in stake, or baker
     * deregistration is completed.
     *
     * @generated from protobuf field: concordium.v2.CooldownParametersCpv1 cooldown_parameters = 4;
     */
    cooldownParameters?: CooldownParametersCpv1;
    /**
     * Current time parameters.
     * The time parameters indicates the mint rate and the
     * reward period length, i.e. the time between paydays.
     *
     * @generated from protobuf field: concordium.v2.TimeParametersCpv1 time_parameters = 5;
     */
    timeParameters?: TimeParametersCpv1;
    /**
     * The limit for the number of account creations in a block.
     *
     * @generated from protobuf field: concordium.v2.CredentialsPerBlockLimit account_creation_limit = 6;
     */
    accountCreationLimit?: CredentialsPerBlockLimit;
    /**
     * Current mint distribution
     *
     * @generated from protobuf field: concordium.v2.MintDistributionCpv1 mint_distribution = 7;
     */
    mintDistribution?: MintDistributionCpv1;
    /**
     * Current transaction fee distribution.
     *
     * @generated from protobuf field: concordium.v2.TransactionFeeDistribution transaction_fee_distribution = 8;
     */
    transactionFeeDistribution?: TransactionFeeDistribution;
    /**
     * Current gas reward parameters.
     *
     * @generated from protobuf field: concordium.v2.GasRewards gas_rewards = 9;
     */
    gasRewards?: GasRewards;
    /**
     * The foundation account.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 10;
     */
    foundationAccount?: AccountAddress;
    /**
     * Parameters governing baking pools and their commissions.
     *
     * @generated from protobuf field: concordium.v2.PoolParametersCpv1 pool_parameters = 11;
     */
    poolParameters?: PoolParametersCpv1;
    /**
     * Keys allowed to do root updates.
     *
     * @generated from protobuf field: concordium.v2.HigherLevelKeys root_keys = 12;
     */
    rootKeys?: HigherLevelKeys;
    /**
     * Keys allowed to do level1 updates;
     *
     * @generated from protobuf field: concordium.v2.HigherLevelKeys level1_keys = 13;
     */
    level1Keys?: HigherLevelKeys;
    /**
     * Keys allowed to do parameter updates.
     *
     * @generated from protobuf field: concordium.v2.AuthorizationsV1 level2_keys = 14;
     */
    level2Keys?: AuthorizationsV1;
}
/**
 * Updatable chain parameters that apply to protocol versions 6.
 *
 * @generated from protobuf message concordium.v2.ChainParametersV2
 */
export interface ChainParametersV2 {
    /**
     * Consensus parameters.
     *
     * @generated from protobuf field: concordium.v2.ConsensusParametersV1 consensus_parameters = 1;
     */
    consensusParameters?: ConsensusParametersV1;
    /**
     * Euro per energy exchange rate.
     *
     * @generated from protobuf field: concordium.v2.ExchangeRate euro_per_energy = 2;
     */
    euroPerEnergy?: ExchangeRate;
    /**
     * Micro CCD per euro exchange rate.
     *
     * @generated from protobuf field: concordium.v2.ExchangeRate micro_ccd_per_euro = 3;
     */
    microCcdPerEuro?: ExchangeRate;
    /**
     * Extra number of epochs before reduction in stake, or baker
     * deregistration is completed.
     *
     * @generated from protobuf field: concordium.v2.CooldownParametersCpv1 cooldown_parameters = 4;
     */
    cooldownParameters?: CooldownParametersCpv1;
    /**
     * Current time parameters.
     * The time parameters indicates the mint rate and the
     * reward period length, i.e. the time between paydays.
     *
     * @generated from protobuf field: concordium.v2.TimeParametersCpv1 time_parameters = 5;
     */
    timeParameters?: TimeParametersCpv1;
    /**
     * The limit for the number of account creations in a block.
     *
     * @generated from protobuf field: concordium.v2.CredentialsPerBlockLimit account_creation_limit = 6;
     */
    accountCreationLimit?: CredentialsPerBlockLimit;
    /**
     * Current mint distribution
     *
     * @generated from protobuf field: concordium.v2.MintDistributionCpv1 mint_distribution = 7;
     */
    mintDistribution?: MintDistributionCpv1;
    /**
     * Current transaction fee distribution.
     *
     * @generated from protobuf field: concordium.v2.TransactionFeeDistribution transaction_fee_distribution = 8;
     */
    transactionFeeDistribution?: TransactionFeeDistribution;
    /**
     * Current gas reward parameters.
     *
     * @generated from protobuf field: concordium.v2.GasRewardsCpv2 gas_rewards = 9;
     */
    gasRewards?: GasRewardsCpv2;
    /**
     * The foundation account.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 10;
     */
    foundationAccount?: AccountAddress;
    /**
     * Parameters governing baking pools and their commissions.
     *
     * @generated from protobuf field: concordium.v2.PoolParametersCpv1 pool_parameters = 11;
     */
    poolParameters?: PoolParametersCpv1;
    /**
     * Keys allowed to do root updates.
     *
     * @generated from protobuf field: concordium.v2.HigherLevelKeys root_keys = 12;
     */
    rootKeys?: HigherLevelKeys;
    /**
     * Keys allowed to do level1 updates;
     *
     * @generated from protobuf field: concordium.v2.HigherLevelKeys level1_keys = 13;
     */
    level1Keys?: HigherLevelKeys;
    /**
     * Keys allowed to do parameter updates.
     *
     * @generated from protobuf field: concordium.v2.AuthorizationsV1 level2_keys = 14;
     */
    level2Keys?: AuthorizationsV1;
    /**
     * Finalization committee parameters
     *
     * @generated from protobuf field: concordium.v2.FinalizationCommitteeParameters finalization_committee_parameters = 15;
     */
    finalizationCommitteeParameters?: FinalizationCommitteeParameters;
}
/**
 * Chain parameters.
 *
 * @generated from protobuf message concordium.v2.ChainParameters
 */
export interface ChainParameters {
    /**
     * @generated from protobuf oneof: parameters
     */
    parameters: {
        oneofKind: "v0";
        /**
         * Chain parameters that apply when the block is a protocol version 1-3 block.
         *
         * @generated from protobuf field: concordium.v2.ChainParametersV0 v0 = 1;
         */
        v0: ChainParametersV0;
    } | {
        oneofKind: "v1";
        /**
         * Chain parameters that apply when the block is a protocol version 4-5 block.
         *
         * @generated from protobuf field: concordium.v2.ChainParametersV1 v1 = 2;
         */
        v1: ChainParametersV1;
    } | {
        oneofKind: "v2";
        /**
         * Chain parameters that apply when the block is a protocol version 6- block.
         *
         * @generated from protobuf field: concordium.v2.ChainParametersV2 v2 = 3;
         */
        v2: ChainParametersV2;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Details about a finalizer for the finalization round.
 *
 * @generated from protobuf message concordium.v2.FinalizationSummaryParty
 */
export interface FinalizationSummaryParty {
    /**
     * Baker ID. Every finalizer is in particular a baker.
     *
     * @generated from protobuf field: concordium.v2.BakerId baker = 1;
     */
    baker?: BakerId;
    /**
     * The weight of the finalizer in the committee. This is an "absolute" weight.
     *
     * @generated from protobuf field: uint64 weight = 2;
     */
    weight: bigint;
    /**
     * Whether the finalizer's signature was present on the particular finalization record.
     *
     * @generated from protobuf field: bool signed = 3;
     */
    signed: boolean;
}
/**
 * Index of the finalization round. This increases on each successfully
 * completed finalization.
 *
 * @generated from protobuf message concordium.v2.FinalizationIndex
 */
export interface FinalizationIndex {
    /**
     * @generated from protobuf field: uint64 value = 1;
     */
    value: bigint;
}
/**
 * Details about a finalization record included in a block.
 *
 * @generated from protobuf message concordium.v2.FinalizationSummary
 */
export interface FinalizationSummary {
    /**
     * Block that was finalized by the finalization record.
     *
     * @generated from protobuf field: concordium.v2.BlockHash block = 1;
     */
    block?: BlockHash;
    /**
     * Index of the finalization round that finalized the block.
     *
     * @generated from protobuf field: concordium.v2.FinalizationIndex index = 2;
     */
    index?: FinalizationIndex;
    /**
     * Finalization delay used for the finalization round.
     *
     * @generated from protobuf field: concordium.v2.BlockHeight delay = 3;
     */
    delay?: BlockHeight;
    /**
     * List of all finalizers with information about whether they signed the
     * finalization record or not.
     *
     * @generated from protobuf field: repeated concordium.v2.FinalizationSummaryParty finalizers = 4;
     */
    finalizers: FinalizationSummaryParty[];
}
/**
 * Finalization summary that may or may not be part of the block.
 *
 * @generated from protobuf message concordium.v2.BlockFinalizationSummary
 */
export interface BlockFinalizationSummary {
    /**
     * @generated from protobuf oneof: summary
     */
    summary: {
        oneofKind: "none";
        /**
         * There is no finalization data in the block.
         *
         * @generated from protobuf field: concordium.v2.Empty none = 1;
         */
        none: Empty;
    } | {
        oneofKind: "record";
        /**
         * There is a single finalization record with the block.
         *
         * @generated from protobuf field: concordium.v2.FinalizationSummary record = 2;
         */
        record: FinalizationSummary;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message concordium.v2.BlockItem
 */
export interface BlockItem {
    /**
     * The hash of the block item that identifies it to the chain.
     *
     * @generated from protobuf field: concordium.v2.TransactionHash hash = 1;
     */
    hash?: TransactionHash;
    /**
     * @generated from protobuf oneof: block_item
     */
    blockItem: {
        oneofKind: "accountTransaction";
        /**
         * Account transactions are messages which are signed and paid for by an account.
         *
         * @generated from protobuf field: concordium.v2.AccountTransaction account_transaction = 2;
         */
        accountTransaction: AccountTransaction;
    } | {
        oneofKind: "credentialDeployment";
        /**
         * Credential deployments create new accounts. They are not paid for
         * directly by the sender. Instead, bakers are rewarded by the protocol for
         * including them.
         *
         * @generated from protobuf field: concordium.v2.CredentialDeployment credential_deployment = 3;
         */
        credentialDeployment: CredentialDeployment;
    } | {
        oneofKind: "updateInstruction";
        /**
         * Update instructions are messages which can update the chain parameters. Including which keys are allowed
         * to make future update instructions.
         *
         * @generated from protobuf field: concordium.v2.UpdateInstruction update_instruction = 4;
         */
        updateInstruction: UpdateInstruction;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Information about a particular baker with respect to
 * the current reward period.
 *
 * @generated from protobuf message concordium.v2.BakerRewardPeriodInfo
 */
export interface BakerRewardPeriodInfo {
    /**
     * The baker id and public keys for the baker.
     *
     * @generated from protobuf field: concordium.v2.BakerInfo baker = 1;
     */
    baker?: BakerInfo;
    /**
     * The effective stake of the baker for the consensus protocol.
     * The returned amount accounts for delegation, capital bounds and leverage bounds.
     *
     * @generated from protobuf field: concordium.v2.Amount effective_stake = 2;
     */
    effectiveStake?: Amount;
    /**
     * The effective commission rate for the baker that applies for the reward period.
     *
     * @generated from protobuf field: concordium.v2.CommissionRates commission_rates = 3;
     */
    commissionRates?: CommissionRates;
    /**
     * The amount staked by the baker itself.
     *
     * @generated from protobuf field: concordium.v2.Amount equity_capital = 4;
     */
    equityCapital?: Amount;
    /**
     * The total amount of capital delegated to this baker pool.
     *
     * @generated from protobuf field: concordium.v2.Amount delegated_capital = 5;
     */
    delegatedCapital?: Amount;
    /**
     * Whether the baker is a finalizer or not.
     *
     * @generated from protobuf field: bool is_finalizer = 6;
     */
    isFinalizer: boolean;
}
/**
 * The signature of a 'QuorumCertificate'.
 *
 * @generated from protobuf message concordium.v2.QuorumSignature
 */
export interface QuorumSignature {
    /**
     * The bytes representing the raw aggregate signature.
     * The bytes have a fixed length of 48 bytes.
     *
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * A quorum certificate is the certificate that the
 * finalization comittee issues in order to certify a block.
 * A block must be certified before it will be part of the
 * authorative part of the chain.
 *
 * @generated from protobuf message concordium.v2.QuorumCertificate
 */
export interface QuorumCertificate {
    /**
     * The hash of the block that the quorum certificate refers to.
     *
     * @generated from protobuf field: concordium.v2.BlockHash block_hash = 1;
     */
    blockHash?: BlockHash;
    /**
     * The round of the block.
     *
     * @generated from protobuf field: concordium.v2.Round round = 2;
     */
    round?: Round;
    /**
     * The epoch of the block.
     *
     * @generated from protobuf field: concordium.v2.Epoch epoch = 3;
     */
    epoch?: Epoch;
    /**
     * The aggregated signature by the finalization committee on the block.
     *
     * @generated from protobuf field: concordium.v2.QuorumSignature aggregate_signature = 4;
     */
    aggregateSignature?: QuorumSignature;
    /**
     * A list of the finalizers that formed the quorum certificate
     * i.e., the ones who have contributed to the 'aggregate_siganture'.
     * The finalizers are identified by their baker id as this is stable
     * across protocols and epochs.
     *
     * @generated from protobuf field: repeated concordium.v2.BakerId signatories = 5;
     */
    signatories: BakerId[];
}
/**
 * The finalizer round is a map from a 'Round'
 * to the list of finalizers (identified by their 'BakerId') that signed
 * off the round.
 *
 * @generated from protobuf message concordium.v2.FinalizerRound
 */
export interface FinalizerRound {
    /**
     * The round that was signed off.
     *
     * @generated from protobuf field: concordium.v2.Round round = 1;
     */
    round?: Round;
    /**
     * The finalizers (identified by their 'BakerId' that
     * signed off the in 'round'.
     *
     * @generated from protobuf field: repeated concordium.v2.BakerId finalizers = 2;
     */
    finalizers: BakerId[];
}
/**
 * The signature of a 'TimeoutCertificate'.
 *
 * @generated from protobuf message concordium.v2.TimeoutSignature
 */
export interface TimeoutSignature {
    /**
     * The bytes representing the raw aggregate signature.
     * The bytes have a fixed length of 48 bytes.
     *
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * A timeout certificate is the certificate that the
 * finalization committee issues when a round times out,
 * thus making it possible for the protocol to proceed to the
 * next round.
 *
 * @generated from protobuf message concordium.v2.TimeoutCertificate
 */
export interface TimeoutCertificate {
    /**
     * The round that timed out.
     *
     * @generated from protobuf field: concordium.v2.Round round = 1;
     */
    round?: Round;
    /**
     * The minimum epoch of which signatures are included
     * in the 'aggregate_signature'.
     *
     * @generated from protobuf field: concordium.v2.Epoch min_epoch = 2;
     */
    minEpoch?: Epoch;
    /**
     * The rounds of which finalizers have their best
     * QCs in the 'min_epoch'.
     *
     * @generated from protobuf field: repeated concordium.v2.FinalizerRound qc_rounds_first_epoch = 3;
     */
    qcRoundsFirstEpoch: FinalizerRound[];
    /**
     * The rounds of which finalizers have their best
     * QCs in the epoch 'min_epoch' + 1.
     *
     * @generated from protobuf field: repeated concordium.v2.FinalizerRound qc_rounds_second_epoch = 4;
     */
    qcRoundsSecondEpoch: FinalizerRound[];
    /**
     * The aggregated signature by the finalization committee that witnessed
     * the 'round' timed out.
     *
     * @generated from protobuf field: concordium.v2.TimeoutSignature aggregate_signature = 5;
     */
    aggregateSignature?: TimeoutSignature;
}
/**
 * A proof that establishes that the successor block of
 * a 'EpochFinalizationEntry' is the immediate successor of
 * the finalized block.
 *
 * @generated from protobuf message concordium.v2.SuccessorProof
 */
export interface SuccessorProof {
    /**
     * The proof represented as raw bytes.
     * The bytes have a fixed length of 32 bytes.
     *
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * The epoch finalization entry is the proof that
 * makes the protocol able to advance to a new epoch.
 * I.e. the 'EpochFinalizationEntry' is present if and only if
 * the block is the first block of a new 'Epoch'.
 *
 * @generated from protobuf message concordium.v2.EpochFinalizationEntry
 */
export interface EpochFinalizationEntry {
    /**
     * The quorum certificate for the finalized block.
     *
     * @generated from protobuf field: concordium.v2.QuorumCertificate finalized_qc = 1;
     */
    finalizedQc?: QuorumCertificate;
    /**
     * The quorum certificate for the block that finalizes
     * the block that 'finalized_qc' points to.
     *
     * @generated from protobuf field: concordium.v2.QuorumCertificate successor_qc = 2;
     */
    successorQc?: QuorumCertificate;
    /**
     * A proof that the successor block is an immediate
     * successor of the finalized block.
     *
     * @generated from protobuf field: concordium.v2.SuccessorProof successor_proof = 3;
     */
    successorProof?: SuccessorProof;
}
/**
 * Certificates for a block for protocols supporting
 * ConcordiumBFT.
 *
 * @generated from protobuf message concordium.v2.BlockCertificates
 */
export interface BlockCertificates {
    /**
     * The quorum certificate. Is present if and only if the block is
     * not a genesis block.
     *
     * @generated from protobuf field: optional concordium.v2.QuorumCertificate quorum_certificate = 1;
     */
    quorumCertificate?: QuorumCertificate;
    /**
     * The timeout certificate. Is present only if the round prior to the
     * round of the block timed out.
     *
     * @generated from protobuf field: optional concordium.v2.TimeoutCertificate timeout_certificate = 2;
     */
    timeoutCertificate?: TimeoutCertificate;
    /**
     * The epoch finalization entry. Is present only if the block initiates
     * a new epoch.
     *
     * @generated from protobuf field: optional concordium.v2.EpochFinalizationEntry epoch_finalization_entry = 3;
     */
    epochFinalizationEntry?: EpochFinalizationEntry;
}
/**
 * Details of which baker won the lottery in a given round in consensus version 1.
 *
 * @generated from protobuf message concordium.v2.WinningBaker
 */
export interface WinningBaker {
    /**
     * The round number.
     *
     * @generated from protobuf field: concordium.v2.Round round = 1;
     */
    round?: Round;
    /**
     * The baker that won the round.
     *
     * @generated from protobuf field: concordium.v2.BakerId winner = 2;
     */
    winner?: BakerId;
    /**
     * True if the baker produced a block in this round on the finalized chain, and False otherwise.
     *
     * @generated from protobuf field: bool present = 3;
     */
    present: boolean;
}
/**
 * An operation to dry run.  The first operation in a dry-run sequence should be
 * `load_block_state`: any other operation will be met with `NoState` until a
 * state is successfully loaded.
 *
 * @generated from protobuf message concordium.v2.DryRunRequest
 */
export interface DryRunRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "loadBlockState";
        /**
         * Load the state of the specified block to use for subsequent requests.
         * The state is taken at the end of execution of the block, and the block’s
         * timestamp is used as the current timestamp.
         *
         * The energy cost for this operation is 2000.
         *
         * @generated from protobuf field: concordium.v2.BlockHashInput load_block_state = 1;
         */
        loadBlockState: BlockHashInput;
    } | {
        oneofKind: "stateQuery";
        /**
         * Run a query on the state.
         *
         * @generated from protobuf field: concordium.v2.DryRunStateQuery state_query = 2;
         */
        stateQuery: DryRunStateQuery;
    } | {
        oneofKind: "stateOperation";
        /**
         * Run a (non-transaction) operation to modify the state.
         *
         * @generated from protobuf field: concordium.v2.DryRunStateOperation state_operation = 3;
         */
        stateOperation: DryRunStateOperation;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Run a query as part of a dry run. Queries do not update the block state.
 *
 * @generated from protobuf message concordium.v2.DryRunStateQuery
 */
export interface DryRunStateQuery {
    /**
     * @generated from protobuf oneof: query
     */
    query: {
        oneofKind: "getAccountInfo";
        /**
         * Look up information on a particular account.
         *
         * The energy cost for this query is 200.
         *
         * @generated from protobuf field: concordium.v2.AccountIdentifierInput get_account_info = 1;
         */
        getAccountInfo: AccountIdentifierInput;
    } | {
        oneofKind: "getInstanceInfo";
        /**
         * Look up information about a particular smart contract.
         *
         * The energy cost for this query is 200.
         *
         * @generated from protobuf field: concordium.v2.ContractAddress get_instance_info = 2;
         */
        getInstanceInfo: ContractAddress;
    } | {
        oneofKind: "invokeInstance";
        /**
         * Invoke an entrypoint on a smart contract instance.
         * No changes made to the state are retained at the completion of the operation.
         *
         * The energy cost for this query is 200 plus the energy used by the smart contract
         * execution.
         *
         * @generated from protobuf field: concordium.v2.DryRunInvokeInstance invoke_instance = 3;
         */
        invokeInstance: DryRunInvokeInstance;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Invoke an entrypoint on a smart contract instance.
 *
 * @generated from protobuf message concordium.v2.DryRunInvokeInstance
 */
export interface DryRunInvokeInstance {
    /**
     * Invoker of the contract. If this is not supplied then the contract will be
     * invoked by an account with address 0, no credentials and sufficient amount
     * of CCD to cover the transfer amount. If given, the relevant address (either
     * account or contract) must exist in the blockstate.
     *
     * @generated from protobuf field: optional concordium.v2.Address invoker = 1;
     */
    invoker?: Address;
    /**
     * Address of the contract instance to invoke.
     *
     * @generated from protobuf field: concordium.v2.ContractAddress instance = 2;
     */
    instance?: ContractAddress;
    /**
     * Amount to invoke the smart contract instance with.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 3;
     */
    amount?: Amount;
    /**
     * The entrypoint of the smart contract instance to invoke.
     *
     * @generated from protobuf field: concordium.v2.ReceiveName entrypoint = 4;
     */
    entrypoint?: ReceiveName;
    /**
     * The parameter bytes to include in the invocation of the entrypoint.
     *
     * @generated from protobuf field: concordium.v2.Parameter parameter = 5;
     */
    parameter?: Parameter;
    /**
     * The maximum energy to allow for the invocation. Note that the node imposes an energy
     * quota that is enforced in addition to this limit.
     *
     * @generated from protobuf field: concordium.v2.Energy energy = 6;
     */
    energy?: Energy;
}
/**
 * An operation that can update the state as part of a dry run.
 *
 * @generated from protobuf message concordium.v2.DryRunStateOperation
 */
export interface DryRunStateOperation {
    /**
     * @generated from protobuf oneof: operation
     */
    operation: {
        oneofKind: "setTimestamp";
        /**
         * Sets the current block time to the given timestamp for the purposes of future
         * transactions.
         *
         * The energy cost of this operation is 50.
         *
         * @generated from protobuf field: concordium.v2.Timestamp set_timestamp = 1;
         */
        setTimestamp: Timestamp;
    } | {
        oneofKind: "mintToAccount";
        /**
         * Add a specified amount of newly-minted CCDs to a specified account.
         * The amount cannot cause the total circulating supply to overflow.
         *
         * The energy cost of this operation is 400.
         *
         * @generated from protobuf field: concordium.v2.DryRunMintToAccount mint_to_account = 2;
         */
        mintToAccount: DryRunMintToAccount;
    } | {
        oneofKind: "runTransaction";
        /**
         * Dry run a transaction, updating the state if it succeeds.
         *
         * The energy cost of this operation is 400 plus the energy used by executing the
         * transaction.
         *
         * @generated from protobuf field: concordium.v2.DryRunTransaction run_transaction = 3;
         */
        runTransaction: DryRunTransaction;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Mint a specified amount and credit it to the specified account as part of a dry run.
 *
 * @generated from protobuf message concordium.v2.DryRunMintToAccount
 */
export interface DryRunMintToAccount {
    /**
     * The account to mint to.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress account = 1;
     */
    account?: AccountAddress;
    /**
     * The amount to mint and credit to the account.
     *
     * @generated from protobuf field: concordium.v2.Amount amount = 2;
     */
    amount?: Amount;
}
/**
 * Dry run an account transaction
 *
 * @generated from protobuf message concordium.v2.DryRunTransaction
 */
export interface DryRunTransaction {
    /**
     * The account to use as the sender of the transaction.
     *
     * @generated from protobuf field: concordium.v2.AccountAddress sender = 1;
     */
    sender?: AccountAddress;
    /**
     * The energy limit set for executing the transaction.
     *
     * @generated from protobuf field: concordium.v2.Energy energy_amount = 2;
     */
    energyAmount?: Energy;
    /**
     * The payload of the transaction.
     *
     * @generated from protobuf field: concordium.v2.AccountTransactionPayload payload = 3;
     */
    payload?: AccountTransactionPayload;
    /**
     * Which credentials and keys should be treated as having signed the transaction.
     * If none is given, then the transaction is treated as having one signature for credential 0,
     * key 0. Therefore, this is only required when the transaction is from a multi-signature
     * account. There are two reasons why you might want to specify signatures:
     *   * The cost of the transaction depends on the number of signatures, so if you want to
     *     get the correct cost for a multi-signature transaction, then specifying the signatures
     *     supports this.
     *   * When changing account keys on a multi-credential account, the transaction must be signed
     *     by the credential whose keys are being changed.
     *
     * Note that the signature thresholds are not checked as part of the dry run. Duplicated
     * signatures are only counted once.
     *
     * @generated from protobuf field: repeated concordium.v2.DryRunSignature signatures = 4;
     */
    signatures: DryRunSignature[];
}
/**
 * A dry run signature is a pair of a credential index and key index, identifying the credential
 * and key that is presumed to have signed the transaction. No actual cryptographic signature is
 * included.
 *
 * @generated from protobuf message concordium.v2.DryRunSignature
 */
export interface DryRunSignature {
    /**
     * Credential index. Must not exceed 255.
     *
     * @generated from protobuf field: uint32 credential = 1;
     */
    credential: number;
    /**
     * Key index. Must not exceed 255.
     *
     * @generated from protobuf field: uint32 key = 2;
     */
    key: number;
}
/**
 * A response to a `DryRunRequest`.
 *
 * @generated from protobuf message concordium.v2.DryRunResponse
 */
export interface DryRunResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "error";
        /**
         * The request produced an error. The request otherwise has no effect on the state.
         *
         * @generated from protobuf field: concordium.v2.DryRunErrorResponse error = 1;
         */
        error: DryRunErrorResponse;
    } | {
        oneofKind: "success";
        /**
         * The request was successful.
         *
         * @generated from protobuf field: concordium.v2.DryRunSuccessResponse success = 2;
         */
        success: DryRunSuccessResponse;
    } | {
        oneofKind: undefined;
    };
    /**
     * The remaining available energy quota after the dry run operation.
     *
     * @generated from protobuf field: concordium.v2.Energy quota_remaining = 3;
     */
    quotaRemaining?: Energy;
}
/**
 * @generated from protobuf message concordium.v2.DryRunErrorResponse
 */
export interface DryRunErrorResponse {
    /**
     * @generated from protobuf oneof: error
     */
    error: {
        oneofKind: "noState";
        /**
         * The current block state is undefined. It should be initialized with
         * a 'load_block_state' request before any other operations.
         *
         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.NoState no_state = 1;
         */
        noState: DryRunErrorResponse_NoState;
    } | {
        oneofKind: "blockNotFound";
        /**
         * The requested block was not found, so its state could not be loaded.
         * Response to 'load_block_state'.
         *
         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.BlockNotFound block_not_found = 2;
         */
        blockNotFound: DryRunErrorResponse_BlockNotFound;
    } | {
        oneofKind: "accountNotFound";
        /**
         * The specified account was not found.
         * Response to 'get_account_info', 'mint_to_account' and 'run_transaction'.
         *
         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.AccountNotFound account_not_found = 3;
         */
        accountNotFound: DryRunErrorResponse_AccountNotFound;
    } | {
        oneofKind: "instanceNotFound";
        /**
         * The specified instance was not found.
         * Response to 'get_instance_info'.
         *
         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.InstanceNotFound instance_not_found = 4;
         */
        instanceNotFound: DryRunErrorResponse_InstanceNotFound;
    } | {
        oneofKind: "amountOverLimit";
        /**
         * The amount to mint would overflow the total CCD supply.
         * Response to 'mint_to_account'.
         *
         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.AmountOverLimit amount_over_limit = 5;
         */
        amountOverLimit: DryRunErrorResponse_AmountOverLimit;
    } | {
        oneofKind: "balanceInsufficient";
        /**
         * The balance of the sender account is not sufficient to pay for the operation.
         * Response to 'run_transaction'.
         *
         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.BalanceInsufficient balance_insufficient = 6;
         */
        balanceInsufficient: DryRunErrorResponse_BalanceInsufficient;
    } | {
        oneofKind: "energyInsufficient";
        /**
         * The energy supplied for the transaction was not sufficient to perform the basic checks.
         * Response to 'run_transaction'.
         *
         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.EnergyInsufficient energy_insufficient = 8;
         */
        energyInsufficient: DryRunErrorResponse_EnergyInsufficient;
    } | {
        oneofKind: "invokeFailed";
        /**
         * The contract invocation failed.
         * Response to 'invoke_instance'.
         *
         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.InvokeFailure invoke_failed = 9;
         */
        invokeFailed: DryRunErrorResponse_InvokeFailure;
    } | {
        oneofKind: undefined;
    };
}
/**
 * The current block state is undefined. It should be initialized with
 * a 'load_block_state' request before any other operations.
 *
 * @generated from protobuf message concordium.v2.DryRunErrorResponse.NoState
 */
export interface DryRunErrorResponse_NoState {
}
/**
 * The requested block was not found, so its state could not be loaded.
 *
 * @generated from protobuf message concordium.v2.DryRunErrorResponse.BlockNotFound
 */
export interface DryRunErrorResponse_BlockNotFound {
}
/**
 * The specified account was not found.
 *
 * @generated from protobuf message concordium.v2.DryRunErrorResponse.AccountNotFound
 */
export interface DryRunErrorResponse_AccountNotFound {
}
/**
 * The specified instance was not found.
 *
 * @generated from protobuf message concordium.v2.DryRunErrorResponse.InstanceNotFound
 */
export interface DryRunErrorResponse_InstanceNotFound {
}
/**
 * The amount that was requested to be minted would overflow the total supply.
 *
 * @generated from protobuf message concordium.v2.DryRunErrorResponse.AmountOverLimit
 */
export interface DryRunErrorResponse_AmountOverLimit {
    /**
     * The maximum amount that can be minted without overflowing the supply.
     *
     * @generated from protobuf field: concordium.v2.Amount amount_limit = 1;
     */
    amountLimit?: Amount;
}
/**
 * The sender account for the transaction has insufficient balance to pay the preliminary fees
 * for the transaction to be included in a block.
 *
 * @generated from protobuf message concordium.v2.DryRunErrorResponse.BalanceInsufficient
 */
export interface DryRunErrorResponse_BalanceInsufficient {
    /**
     * The minimum balance required to perform the operation.
     *
     * @generated from protobuf field: concordium.v2.Amount required_amount = 1;
     */
    requiredAmount?: Amount;
    /**
     * The currently-available balance on the account to pay for the operation.
     *
     * @generated from protobuf field: concordium.v2.Amount available_amount = 2;
     */
    availableAmount?: Amount;
}
/**
 * The energy made available for the transaction is insufficient to cover the basic processing
 * required to include a transaction in a block.
 *
 * @generated from protobuf message concordium.v2.DryRunErrorResponse.EnergyInsufficient
 */
export interface DryRunErrorResponse_EnergyInsufficient {
    /**
     * The minimum energy required for the transaction to be included in the chain.
     * Note that, even if the energy supplied for the transaction is enough to prevent a
     * `EnergyInsufficient`, the transaction can still be rejected for having
     * insufficient energy. In that case, a `TransactionExecuted` response will be
     * produced, but indicate the transaction was rejected.
     *
     * @generated from protobuf field: concordium.v2.Energy energy_required = 1;
     */
    energyRequired?: Energy;
}
/**
 * Invoking the smart contract instance failed.
 *
 * @generated from protobuf message concordium.v2.DryRunErrorResponse.InvokeFailure
 */
export interface DryRunErrorResponse_InvokeFailure {
    /**
     * If invoking a V0 contract this is not provided, otherwise it is
     * potentially return value produced by the call unless the call failed with
     * out of energy or runtime error. If the V1 contract terminated with a
     * logic error then the return value is present.
     *
     * @generated from protobuf field: optional bytes return_value = 1;
     */
    returnValue?: Uint8Array;
    /**
     * Energy used by the execution.
     *
     * @generated from protobuf field: concordium.v2.Energy used_energy = 2;
     */
    usedEnergy?: Energy;
    /**
     * Contract execution failed for the given reason.
     *
     * @generated from protobuf field: concordium.v2.RejectReason reason = 3;
     */
    reason?: RejectReason;
}
/**
 * The dry run operation completed successfully.
 *
 * @generated from protobuf message concordium.v2.DryRunSuccessResponse
 */
export interface DryRunSuccessResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "blockStateLoaded";
        /**
         * The state from the specified block was successfully loaded.
         * Response to 'load_block_state'.
         *
         * @generated from protobuf field: concordium.v2.DryRunSuccessResponse.BlockStateLoaded block_state_loaded = 1;
         */
        blockStateLoaded: DryRunSuccessResponse_BlockStateLoaded;
    } | {
        oneofKind: "accountInfo";
        /**
         * Details of the requested account.
         * Response to 'get_account_info'.
         *
         * @generated from protobuf field: concordium.v2.AccountInfo account_info = 2;
         */
        accountInfo: AccountInfo;
    } | {
        oneofKind: "instanceInfo";
        /**
         * Details of the requested smart contract instance.
         * Response to 'get_instance_info'.
         *
         * @generated from protobuf field: concordium.v2.InstanceInfo instance_info = 3;
         */
        instanceInfo: InstanceInfo;
    } | {
        oneofKind: "invokeSucceeded";
        /**
         * The smart contract instance was invoked successfully.
         *
         * @generated from protobuf field: concordium.v2.DryRunSuccessResponse.InvokeSuccess invoke_succeeded = 4;
         */
        invokeSucceeded: DryRunSuccessResponse_InvokeSuccess;
    } | {
        oneofKind: "timestampSet";
        /**
         * The current timestamp was set successfully.
         * Response to 'set_timestamp'.
         *
         * @generated from protobuf field: concordium.v2.DryRunSuccessResponse.TimestampSet timestamp_set = 5;
         */
        timestampSet: DryRunSuccessResponse_TimestampSet;
    } | {
        oneofKind: "mintedToAccount";
        /**
         * The specified amount was minted and credited to the account.
         * Response to 'mint_to_account'.
         *
         * @generated from protobuf field: concordium.v2.DryRunSuccessResponse.MintedToAccount minted_to_account = 6;
         */
        mintedToAccount: DryRunSuccessResponse_MintedToAccount;
    } | {
        oneofKind: "transactionExecuted";
        /**
         * The specified transaction was executed. Note that the transaction could still have
         * been rejected.
         * Response to 'run_transaction'.
         *
         * @generated from protobuf field: concordium.v2.DryRunSuccessResponse.TransactionExecuted transaction_executed = 7;
         */
        transactionExecuted: DryRunSuccessResponse_TransactionExecuted;
    } | {
        oneofKind: undefined;
    };
}
/**
 * The block state at the specified block was successfully loaded.
 *
 * @generated from protobuf message concordium.v2.DryRunSuccessResponse.BlockStateLoaded
 */
export interface DryRunSuccessResponse_BlockStateLoaded {
    /**
     * The timestamp of the block, taken to be the current timestamp.
     *
     * @generated from protobuf field: concordium.v2.Timestamp current_timestamp = 1;
     */
    currentTimestamp?: Timestamp;
    /**
     * The hash of the block that was loaded.
     *
     * @generated from protobuf field: concordium.v2.BlockHash block_hash = 2;
     */
    blockHash?: BlockHash;
    /**
     * The protocol version at the specified block. The behavior of operations can vary across
     * protocol versions.
     *
     * @generated from protobuf field: concordium.v2.ProtocolVersion protocol_version = 3;
     */
    protocolVersion: ProtocolVersion;
}
/**
 * The current apparent timestamp was updated to the specified value.
 *
 * @generated from protobuf message concordium.v2.DryRunSuccessResponse.TimestampSet
 */
export interface DryRunSuccessResponse_TimestampSet {
}
/**
 * The specified amount was minted to the specified account.
 *
 * @generated from protobuf message concordium.v2.DryRunSuccessResponse.MintedToAccount
 */
export interface DryRunSuccessResponse_MintedToAccount {
}
/**
 * The transaction was executed.
 *
 * @generated from protobuf message concordium.v2.DryRunSuccessResponse.TransactionExecuted
 */
export interface DryRunSuccessResponse_TransactionExecuted {
    /**
     * The amount of energy actually expended in executing the transaction.
     *
     * @generated from protobuf field: concordium.v2.Energy energy_cost = 1;
     */
    energyCost?: Energy;
    /**
     * The details of the outcome of the transaction.
     *
     * @generated from protobuf field: concordium.v2.AccountTransactionDetails details = 2;
     */
    details?: AccountTransactionDetails;
    /**
     * If this is an invocation of a V1 contract that produced a return value, this is that
     * value. Otherwise it is absent.
     *
     * @generated from protobuf field: optional bytes return_value = 3;
     */
    returnValue?: Uint8Array;
}
/**
 * The smart contract instance was invoked successfully.
 *
 * @generated from protobuf message concordium.v2.DryRunSuccessResponse.InvokeSuccess
 */
export interface DryRunSuccessResponse_InvokeSuccess {
    /**
     * If invoking a V0 contract this is absent. Otherwise it is the return
     * value produced by the contract.
     *
     * @generated from protobuf field: optional bytes return_value = 1;
     */
    returnValue?: Uint8Array;
    /**
     * Energy used by the execution.
     *
     * @generated from protobuf field: concordium.v2.Energy used_energy = 2;
     */
    usedEnergy?: Energy;
    /**
     * Effects produced by contract execution.
     *
     * @generated from protobuf field: repeated concordium.v2.ContractTraceElement effects = 3;
     */
    effects: ContractTraceElement[];
}
/**
 * Information about how open the pool is to new delegators.
 *
 * @generated from protobuf enum concordium.v2.OpenStatus
 */
export enum OpenStatus {
    /**
     * @generated from protobuf enum value: OPEN_STATUS_OPEN_FOR_ALL = 0;
     */
    OPEN_FOR_ALL = 0,
    /**
     * @generated from protobuf enum value: OPEN_STATUS_CLOSED_FOR_NEW = 1;
     */
    CLOSED_FOR_NEW = 1,
    /**
     * @generated from protobuf enum value: OPEN_STATUS_CLOSED_FOR_ALL = 2;
     */
    CLOSED_FOR_ALL = 2
}
/**
 * Version of smart contract.
 *
 * @generated from protobuf enum concordium.v2.ContractVersion
 */
export enum ContractVersion {
    /**
     * @generated from protobuf enum value: V0 = 0;
     */
    V0 = 0,
    /**
     * @generated from protobuf enum value: V1 = 1;
     */
    V1 = 1
}
/**
 * The type of a credential.
 *
 * @generated from protobuf enum concordium.v2.CredentialType
 */
export enum CredentialType {
    /**
     * An initial credential created by the identity provider.
     *
     * @generated from protobuf enum value: CREDENTIAL_TYPE_INITIAL = 0;
     */
    INITIAL = 0,
    /**
     * A normal credential type created by the account.
     *
     * @generated from protobuf enum value: CREDENTIAL_TYPE_NORMAL = 1;
     */
    NORMAL = 1
}
/**
 * The type of chain update.
 *
 * @generated from protobuf enum concordium.v2.UpdateType
 */
export enum UpdateType {
    /**
     * @generated from protobuf enum value: UPDATE_PROTOCOL = 0;
     */
    UPDATE_PROTOCOL = 0,
    /**
     * @generated from protobuf enum value: UPDATE_ELECTION_DIFFICULTY = 1;
     */
    UPDATE_ELECTION_DIFFICULTY = 1,
    /**
     * @generated from protobuf enum value: UPDATE_EURO_PER_ENERGY = 2;
     */
    UPDATE_EURO_PER_ENERGY = 2,
    /**
     * @generated from protobuf enum value: UPDATE_MICRO_CCD_PER_EURO = 3;
     */
    UPDATE_MICRO_CCD_PER_EURO = 3,
    /**
     * @generated from protobuf enum value: UPDATE_FOUNDATION_ACCOUNT = 4;
     */
    UPDATE_FOUNDATION_ACCOUNT = 4,
    /**
     * @generated from protobuf enum value: UPDATE_MINT_DISTRIBUTION = 5;
     */
    UPDATE_MINT_DISTRIBUTION = 5,
    /**
     * @generated from protobuf enum value: UPDATE_TRANSACTION_FEE_DISTRIBUTION = 6;
     */
    UPDATE_TRANSACTION_FEE_DISTRIBUTION = 6,
    /**
     * @generated from protobuf enum value: UPDATE_GAS_REWARDS = 7;
     */
    UPDATE_GAS_REWARDS = 7,
    /**
     * @generated from protobuf enum value: UPDATE_POOL_PARAMETERS = 8;
     */
    UPDATE_POOL_PARAMETERS = 8,
    /**
     * @generated from protobuf enum value: ADD_ANONYMITY_REVOKER = 9;
     */
    ADD_ANONYMITY_REVOKER = 9,
    /**
     * @generated from protobuf enum value: ADD_IDENTITY_PROVIDER = 10;
     */
    ADD_IDENTITY_PROVIDER = 10,
    /**
     * @generated from protobuf enum value: UPDATE_ROOT_KEYS = 11;
     */
    UPDATE_ROOT_KEYS = 11,
    /**
     * @generated from protobuf enum value: UPDATE_LEVEL1_KEYS = 12;
     */
    UPDATE_LEVEL1_KEYS = 12,
    /**
     * @generated from protobuf enum value: UPDATE_LEVEL2_KEYS = 13;
     */
    UPDATE_LEVEL2_KEYS = 13,
    /**
     * @generated from protobuf enum value: UPDATE_COOLDOWN_PARAMETERS = 14;
     */
    UPDATE_COOLDOWN_PARAMETERS = 14,
    /**
     * @generated from protobuf enum value: UPDATE_TIME_PARAMETERS = 15;
     */
    UPDATE_TIME_PARAMETERS = 15,
    /**
     * @generated from protobuf enum value: UPDATE_TIMEOUT_PARAMETERS = 16;
     */
    UPDATE_TIMEOUT_PARAMETERS = 16,
    /**
     * @generated from protobuf enum value: UPDATE_MIN_BLOCK_TIME = 17;
     */
    UPDATE_MIN_BLOCK_TIME = 17,
    /**
     * @generated from protobuf enum value: UPDATE_BLOCK_ENERGY_LIMIT = 18;
     */
    UPDATE_BLOCK_ENERGY_LIMIT = 18,
    /**
     * @generated from protobuf enum value: UPDATE_FINALIZATION_COMMITTEE_PARAMETERS = 19;
     */
    UPDATE_FINALIZATION_COMMITTEE_PARAMETERS = 19
}
/**
 * The type of transaction.
 *
 * @generated from protobuf enum concordium.v2.TransactionType
 */
export enum TransactionType {
    /**
     * @generated from protobuf enum value: DEPLOY_MODULE = 0;
     */
    DEPLOY_MODULE = 0,
    /**
     * @generated from protobuf enum value: INIT_CONTRACT = 1;
     */
    INIT_CONTRACT = 1,
    /**
     * @generated from protobuf enum value: UPDATE = 2;
     */
    UPDATE = 2,
    /**
     * @generated from protobuf enum value: TRANSFER = 3;
     */
    TRANSFER = 3,
    /**
     * @generated from protobuf enum value: ADD_BAKER = 4;
     */
    ADD_BAKER = 4,
    /**
     * @generated from protobuf enum value: REMOVE_BAKER = 5;
     */
    REMOVE_BAKER = 5,
    /**
     * @generated from protobuf enum value: UPDATE_BAKER_STAKE = 6;
     */
    UPDATE_BAKER_STAKE = 6,
    /**
     * @generated from protobuf enum value: UPDATE_BAKER_RESTAKE_EARNINGS = 7;
     */
    UPDATE_BAKER_RESTAKE_EARNINGS = 7,
    /**
     * @generated from protobuf enum value: UPDATE_BAKER_KEYS = 8;
     */
    UPDATE_BAKER_KEYS = 8,
    /**
     * @generated from protobuf enum value: UPDATE_CREDENTIAL_KEYS = 9;
     */
    UPDATE_CREDENTIAL_KEYS = 9,
    /**
     * @generated from protobuf enum value: ENCRYPTED_AMOUNT_TRANSFER = 10;
     */
    ENCRYPTED_AMOUNT_TRANSFER = 10,
    /**
     * @generated from protobuf enum value: TRANSFER_TO_ENCRYPTED = 11;
     */
    TRANSFER_TO_ENCRYPTED = 11,
    /**
     * @generated from protobuf enum value: TRANSFER_TO_PUBLIC = 12;
     */
    TRANSFER_TO_PUBLIC = 12,
    /**
     * @generated from protobuf enum value: TRANSFER_WITH_SCHEDULE = 13;
     */
    TRANSFER_WITH_SCHEDULE = 13,
    /**
     * @generated from protobuf enum value: UPDATE_CREDENTIALS = 14;
     */
    UPDATE_CREDENTIALS = 14,
    /**
     * @generated from protobuf enum value: REGISTER_DATA = 15;
     */
    REGISTER_DATA = 15,
    /**
     * @generated from protobuf enum value: TRANSFER_WITH_MEMO = 16;
     */
    TRANSFER_WITH_MEMO = 16,
    /**
     * @generated from protobuf enum value: ENCRYPTED_AMOUNT_TRANSFER_WITH_MEMO = 17;
     */
    ENCRYPTED_AMOUNT_TRANSFER_WITH_MEMO = 17,
    /**
     * @generated from protobuf enum value: TRANSFER_WITH_SCHEDULE_AND_MEMO = 18;
     */
    TRANSFER_WITH_SCHEDULE_AND_MEMO = 18,
    /**
     * @generated from protobuf enum value: CONFIGURE_BAKER = 19;
     */
    CONFIGURE_BAKER = 19,
    /**
     * @generated from protobuf enum value: CONFIGURE_DELEGATION = 20;
     */
    CONFIGURE_DELEGATION = 20
}
/**
 * The different versions of the protocol.
 *
 * @generated from protobuf enum concordium.v2.ProtocolVersion
 */
export enum ProtocolVersion {
    /**
     * @generated from protobuf enum value: PROTOCOL_VERSION_1 = 0;
     */
    PROTOCOL_VERSION_1 = 0,
    /**
     * @generated from protobuf enum value: PROTOCOL_VERSION_2 = 1;
     */
    PROTOCOL_VERSION_2 = 1,
    /**
     * @generated from protobuf enum value: PROTOCOL_VERSION_3 = 2;
     */
    PROTOCOL_VERSION_3 = 2,
    /**
     * @generated from protobuf enum value: PROTOCOL_VERSION_4 = 3;
     */
    PROTOCOL_VERSION_4 = 3,
    /**
     * @generated from protobuf enum value: PROTOCOL_VERSION_5 = 4;
     */
    PROTOCOL_VERSION_5 = 4,
    /**
     * @generated from protobuf enum value: PROTOCOL_VERSION_6 = 5;
     */
    PROTOCOL_VERSION_6 = 5,
    /**
     * @generated from protobuf enum value: PROTOCOL_VERSION_7 = 6;
     */
    PROTOCOL_VERSION_7 = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("concordium.v2.Empty", []);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Empty
 */
export const Empty = new Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockHash$Type extends MessageType<BlockHash> {
    constructor() {
        super("concordium.v2.BlockHash", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockHash
 */
export const BlockHash = new BlockHash$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Sha256Hash$Type extends MessageType<Sha256Hash> {
    constructor() {
        super("concordium.v2.Sha256Hash", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Sha256Hash
 */
export const Sha256Hash = new Sha256Hash$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransactionHash$Type extends MessageType<TransactionHash> {
    constructor() {
        super("concordium.v2.TransactionHash", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.TransactionHash
 */
export const TransactionHash = new TransactionHash$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StateHash$Type extends MessageType<StateHash> {
    constructor() {
        super("concordium.v2.StateHash", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.StateHash
 */
export const StateHash = new StateHash$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbsoluteBlockHeight$Type extends MessageType<AbsoluteBlockHeight> {
    constructor() {
        super("concordium.v2.AbsoluteBlockHeight", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AbsoluteBlockHeight
 */
export const AbsoluteBlockHeight = new AbsoluteBlockHeight$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockHeight$Type extends MessageType<BlockHeight> {
    constructor() {
        super("concordium.v2.BlockHeight", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockHeight
 */
export const BlockHeight = new BlockHeight$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerId$Type extends MessageType<BakerId> {
    constructor() {
        super("concordium.v2.BakerId", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerId
 */
export const BakerId = new BakerId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountIndex$Type extends MessageType<AccountIndex> {
    constructor() {
        super("concordium.v2.AccountIndex", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountIndex
 */
export const AccountIndex = new AccountIndex$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModuleRef$Type extends MessageType<ModuleRef> {
    constructor() {
        super("concordium.v2.ModuleRef", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ModuleRef
 */
export const ModuleRef = new ModuleRef$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VersionedModuleSource$Type extends MessageType<VersionedModuleSource> {
    constructor() {
        super("concordium.v2.VersionedModuleSource", [
            { no: 1, name: "v0", kind: "message", oneof: "module", T: () => VersionedModuleSource_ModuleSourceV0 },
            { no: 2, name: "v1", kind: "message", oneof: "module", T: () => VersionedModuleSource_ModuleSourceV1 }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.VersionedModuleSource
 */
export const VersionedModuleSource = new VersionedModuleSource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VersionedModuleSource_ModuleSourceV0$Type extends MessageType<VersionedModuleSource_ModuleSourceV0> {
    constructor() {
        super("concordium.v2.VersionedModuleSource.ModuleSourceV0", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.VersionedModuleSource.ModuleSourceV0
 */
export const VersionedModuleSource_ModuleSourceV0 = new VersionedModuleSource_ModuleSourceV0$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VersionedModuleSource_ModuleSourceV1$Type extends MessageType<VersionedModuleSource_ModuleSourceV1> {
    constructor() {
        super("concordium.v2.VersionedModuleSource.ModuleSourceV1", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.VersionedModuleSource.ModuleSourceV1
 */
export const VersionedModuleSource_ModuleSourceV1 = new VersionedModuleSource_ModuleSourceV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Timestamp$Type extends MessageType<Timestamp> {
    constructor() {
        super("concordium.v2.Timestamp", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Timestamp
 */
export const Timestamp = new Timestamp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Release$Type extends MessageType<Release> {
    constructor() {
        super("concordium.v2.Release", [
            { no: 1, name: "timestamp", kind: "message", T: () => Timestamp },
            { no: 2, name: "amount", kind: "message", T: () => Amount },
            { no: 3, name: "transactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TransactionHash }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Release
 */
export const Release = new Release$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NewRelease$Type extends MessageType<NewRelease> {
    constructor() {
        super("concordium.v2.NewRelease", [
            { no: 1, name: "timestamp", kind: "message", T: () => Timestamp },
            { no: 2, name: "amount", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.NewRelease
 */
export const NewRelease = new NewRelease$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReleaseSchedule$Type extends MessageType<ReleaseSchedule> {
    constructor() {
        super("concordium.v2.ReleaseSchedule", [
            { no: 1, name: "total", kind: "message", T: () => Amount },
            { no: 2, name: "schedules", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Release }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ReleaseSchedule
 */
export const ReleaseSchedule = new ReleaseSchedule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EncryptedAmount$Type extends MessageType<EncryptedAmount> {
    constructor() {
        super("concordium.v2.EncryptedAmount", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.EncryptedAmount
 */
export const EncryptedAmount = new EncryptedAmount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EncryptedBalance$Type extends MessageType<EncryptedBalance> {
    constructor() {
        super("concordium.v2.EncryptedBalance", [
            { no: 1, name: "self_amount", kind: "message", T: () => EncryptedAmount },
            { no: 2, name: "start_index", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "aggregated_amount", kind: "message", T: () => EncryptedAmount },
            { no: 4, name: "num_aggregated", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "incoming_amounts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EncryptedAmount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.EncryptedBalance
 */
export const EncryptedBalance = new EncryptedBalance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelegationTarget$Type extends MessageType<DelegationTarget> {
    constructor() {
        super("concordium.v2.DelegationTarget", [
            { no: 1, name: "passive", kind: "message", oneof: "target", T: () => Empty },
            { no: 2, name: "baker", kind: "message", oneof: "target", T: () => BakerId }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DelegationTarget
 */
export const DelegationTarget = new DelegationTarget$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerElectionVerifyKey$Type extends MessageType<BakerElectionVerifyKey> {
    constructor() {
        super("concordium.v2.BakerElectionVerifyKey", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerElectionVerifyKey
 */
export const BakerElectionVerifyKey = new BakerElectionVerifyKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerSignatureVerifyKey$Type extends MessageType<BakerSignatureVerifyKey> {
    constructor() {
        super("concordium.v2.BakerSignatureVerifyKey", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerSignatureVerifyKey
 */
export const BakerSignatureVerifyKey = new BakerSignatureVerifyKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerAggregationVerifyKey$Type extends MessageType<BakerAggregationVerifyKey> {
    constructor() {
        super("concordium.v2.BakerAggregationVerifyKey", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerAggregationVerifyKey
 */
export const BakerAggregationVerifyKey = new BakerAggregationVerifyKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerInfo$Type extends MessageType<BakerInfo> {
    constructor() {
        super("concordium.v2.BakerInfo", [
            { no: 1, name: "baker_id", kind: "message", T: () => BakerId },
            { no: 2, name: "election_key", kind: "message", T: () => BakerElectionVerifyKey },
            { no: 3, name: "signature_key", kind: "message", T: () => BakerSignatureVerifyKey },
            { no: 4, name: "aggregation_key", kind: "message", T: () => BakerAggregationVerifyKey }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerInfo
 */
export const BakerInfo = new BakerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StakePendingChange$Type extends MessageType<StakePendingChange> {
    constructor() {
        super("concordium.v2.StakePendingChange", [
            { no: 1, name: "reduce", kind: "message", oneof: "change", T: () => StakePendingChange_Reduce },
            { no: 2, name: "remove", kind: "message", oneof: "change", T: () => Timestamp }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.StakePendingChange
 */
export const StakePendingChange = new StakePendingChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StakePendingChange_Reduce$Type extends MessageType<StakePendingChange_Reduce> {
    constructor() {
        super("concordium.v2.StakePendingChange.Reduce", [
            { no: 1, name: "new_stake", kind: "message", T: () => Amount },
            { no: 2, name: "effective_time", kind: "message", T: () => Timestamp }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.StakePendingChange.Reduce
 */
export const StakePendingChange_Reduce = new StakePendingChange_Reduce$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AmountFraction$Type extends MessageType<AmountFraction> {
    constructor() {
        super("concordium.v2.AmountFraction", [
            { no: 1, name: "parts_per_hundred_thousand", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AmountFraction
 */
export const AmountFraction = new AmountFraction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommissionRates$Type extends MessageType<CommissionRates> {
    constructor() {
        super("concordium.v2.CommissionRates", [
            { no: 1, name: "finalization", kind: "message", T: () => AmountFraction },
            { no: 2, name: "baking", kind: "message", T: () => AmountFraction },
            { no: 3, name: "transaction", kind: "message", T: () => AmountFraction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.CommissionRates
 */
export const CommissionRates = new CommissionRates$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerPoolInfo$Type extends MessageType<BakerPoolInfo> {
    constructor() {
        super("concordium.v2.BakerPoolInfo", [
            { no: 1, name: "open_status", kind: "enum", T: () => ["concordium.v2.OpenStatus", OpenStatus, "OPEN_STATUS_"] },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "commission_rates", kind: "message", T: () => CommissionRates }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerPoolInfo
 */
export const BakerPoolInfo = new BakerPoolInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountStakingInfo$Type extends MessageType<AccountStakingInfo> {
    constructor() {
        super("concordium.v2.AccountStakingInfo", [
            { no: 1, name: "baker", kind: "message", oneof: "stakingInfo", T: () => AccountStakingInfo_Baker },
            { no: 2, name: "delegator", kind: "message", oneof: "stakingInfo", T: () => AccountStakingInfo_Delegator }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountStakingInfo
 */
export const AccountStakingInfo = new AccountStakingInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountStakingInfo_Baker$Type extends MessageType<AccountStakingInfo_Baker> {
    constructor() {
        super("concordium.v2.AccountStakingInfo.Baker", [
            { no: 1, name: "staked_amount", kind: "message", T: () => Amount },
            { no: 2, name: "restake_earnings", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "baker_info", kind: "message", T: () => BakerInfo },
            { no: 4, name: "pending_change", kind: "message", T: () => StakePendingChange },
            { no: 5, name: "pool_info", kind: "message", T: () => BakerPoolInfo }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountStakingInfo.Baker
 */
export const AccountStakingInfo_Baker = new AccountStakingInfo_Baker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountStakingInfo_Delegator$Type extends MessageType<AccountStakingInfo_Delegator> {
    constructor() {
        super("concordium.v2.AccountStakingInfo.Delegator", [
            { no: 1, name: "staked_amount", kind: "message", T: () => Amount },
            { no: 2, name: "restake_earnings", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "target", kind: "message", T: () => DelegationTarget },
            { no: 4, name: "pending_change", kind: "message", T: () => StakePendingChange }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountStakingInfo.Delegator
 */
export const AccountStakingInfo_Delegator = new AccountStakingInfo_Delegator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SequenceNumber$Type extends MessageType<SequenceNumber> {
    constructor() {
        super("concordium.v2.SequenceNumber", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.SequenceNumber
 */
export const SequenceNumber = new SequenceNumber$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSequenceNumber$Type extends MessageType<UpdateSequenceNumber> {
    constructor() {
        super("concordium.v2.UpdateSequenceNumber", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.UpdateSequenceNumber
 */
export const UpdateSequenceNumber = new UpdateSequenceNumber$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Amount$Type extends MessageType<Amount> {
    constructor() {
        super("concordium.v2.Amount", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Amount
 */
export const Amount = new Amount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CredentialIndex$Type extends MessageType<CredentialIndex> {
    constructor() {
        super("concordium.v2.CredentialIndex", [
            { no: 1, name: "value", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.CredentialIndex
 */
export const CredentialIndex = new CredentialIndex$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignatureThreshold$Type extends MessageType<SignatureThreshold> {
    constructor() {
        super("concordium.v2.SignatureThreshold", [
            { no: 1, name: "value", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.SignatureThreshold
 */
export const SignatureThreshold = new SignatureThreshold$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountThreshold$Type extends MessageType<AccountThreshold> {
    constructor() {
        super("concordium.v2.AccountThreshold", [
            { no: 1, name: "value", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountThreshold
 */
export const AccountThreshold = new AccountThreshold$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EncryptionKey$Type extends MessageType<EncryptionKey> {
    constructor() {
        super("concordium.v2.EncryptionKey", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.EncryptionKey
 */
export const EncryptionKey = new EncryptionKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountAddress$Type extends MessageType<AccountAddress> {
    constructor() {
        super("concordium.v2.AccountAddress", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountAddress
 */
export const AccountAddress = new AccountAddress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Address$Type extends MessageType<Address> {
    constructor() {
        super("concordium.v2.Address", [
            { no: 1, name: "account", kind: "message", oneof: "type", T: () => AccountAddress },
            { no: 2, name: "contract", kind: "message", oneof: "type", T: () => ContractAddress }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Address
 */
export const Address = new Address$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountVerifyKey$Type extends MessageType<AccountVerifyKey> {
    constructor() {
        super("concordium.v2.AccountVerifyKey", [
            { no: 1, name: "ed25519_key", kind: "scalar", oneof: "key", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountVerifyKey
 */
export const AccountVerifyKey = new AccountVerifyKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CredentialPublicKeys$Type extends MessageType<CredentialPublicKeys> {
    constructor() {
        super("concordium.v2.CredentialPublicKeys", [
            { no: 1, name: "keys", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => AccountVerifyKey } },
            { no: 2, name: "threshold", kind: "message", T: () => SignatureThreshold }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.CredentialPublicKeys
 */
export const CredentialPublicKeys = new CredentialPublicKeys$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CredentialRegistrationId$Type extends MessageType<CredentialRegistrationId> {
    constructor() {
        super("concordium.v2.CredentialRegistrationId", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.CredentialRegistrationId
 */
export const CredentialRegistrationId = new CredentialRegistrationId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IdentityProviderIdentity$Type extends MessageType<IdentityProviderIdentity> {
    constructor() {
        super("concordium.v2.IdentityProviderIdentity", [
            { no: 1, name: "value", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.IdentityProviderIdentity
 */
export const IdentityProviderIdentity = new IdentityProviderIdentity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class YearMonth$Type extends MessageType<YearMonth> {
    constructor() {
        super("concordium.v2.YearMonth", [
            { no: 1, name: "year", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "month", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.YearMonth
 */
export const YearMonth = new YearMonth$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Policy$Type extends MessageType<Policy> {
    constructor() {
        super("concordium.v2.Policy", [
            { no: 1, name: "created_at", kind: "message", T: () => YearMonth },
            { no: 2, name: "valid_to", kind: "message", T: () => YearMonth },
            { no: 3, name: "attributes", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 12 /*ScalarType.BYTES*/ } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Policy
 */
export const Policy = new Policy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitialCredentialValues$Type extends MessageType<InitialCredentialValues> {
    constructor() {
        super("concordium.v2.InitialCredentialValues", [
            { no: 1, name: "keys", kind: "message", T: () => CredentialPublicKeys },
            { no: 2, name: "cred_id", kind: "message", T: () => CredentialRegistrationId },
            { no: 3, name: "ip_id", kind: "message", T: () => IdentityProviderIdentity },
            { no: 4, name: "policy", kind: "message", T: () => Policy }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InitialCredentialValues
 */
export const InitialCredentialValues = new InitialCredentialValues$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChainArData$Type extends MessageType<ChainArData> {
    constructor() {
        super("concordium.v2.ChainArData", [
            { no: 1, name: "enc_id_cred_pub_share", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ChainArData
 */
export const ChainArData = new ChainArData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArThreshold$Type extends MessageType<ArThreshold> {
    constructor() {
        super("concordium.v2.ArThreshold", [
            { no: 1, name: "value", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ArThreshold
 */
export const ArThreshold = new ArThreshold$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Commitment$Type extends MessageType<Commitment> {
    constructor() {
        super("concordium.v2.Commitment", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Commitment
 */
export const Commitment = new Commitment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CredentialCommitments$Type extends MessageType<CredentialCommitments> {
    constructor() {
        super("concordium.v2.CredentialCommitments", [
            { no: 1, name: "prf", kind: "message", T: () => Commitment },
            { no: 2, name: "cred_counter", kind: "message", T: () => Commitment },
            { no: 3, name: "max_accounts", kind: "message", T: () => Commitment },
            { no: 4, name: "attributes", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => Commitment } },
            { no: 5, name: "id_cred_sec_sharing_coeff", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Commitment }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.CredentialCommitments
 */
export const CredentialCommitments = new CredentialCommitments$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NormalCredentialValues$Type extends MessageType<NormalCredentialValues> {
    constructor() {
        super("concordium.v2.NormalCredentialValues", [
            { no: 1, name: "keys", kind: "message", T: () => CredentialPublicKeys },
            { no: 2, name: "cred_id", kind: "message", T: () => CredentialRegistrationId },
            { no: 3, name: "ip_id", kind: "message", T: () => IdentityProviderIdentity },
            { no: 4, name: "policy", kind: "message", T: () => Policy },
            { no: 5, name: "ar_threshold", kind: "message", T: () => ArThreshold },
            { no: 6, name: "ar_data", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => ChainArData } },
            { no: 7, name: "commitments", kind: "message", T: () => CredentialCommitments }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.NormalCredentialValues
 */
export const NormalCredentialValues = new NormalCredentialValues$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountCredential$Type extends MessageType<AccountCredential> {
    constructor() {
        super("concordium.v2.AccountCredential", [
            { no: 1, name: "initial", kind: "message", oneof: "credentialValues", T: () => InitialCredentialValues },
            { no: 2, name: "normal", kind: "message", oneof: "credentialValues", T: () => NormalCredentialValues }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountCredential
 */
export const AccountCredential = new AccountCredential$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cooldown$Type extends MessageType<Cooldown> {
    constructor() {
        super("concordium.v2.Cooldown", [
            { no: 1, name: "end_time", kind: "message", T: () => Timestamp },
            { no: 2, name: "amount", kind: "message", T: () => Amount },
            { no: 3, name: "status", kind: "enum", T: () => ["concordium.v2.Cooldown.CooldownStatus", Cooldown_CooldownStatus] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Cooldown
 */
export const Cooldown = new Cooldown$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountInfo$Type extends MessageType<AccountInfo> {
    constructor() {
        super("concordium.v2.AccountInfo", [
            { no: 1, name: "sequence_number", kind: "message", T: () => SequenceNumber },
            { no: 2, name: "amount", kind: "message", T: () => Amount },
            { no: 3, name: "schedule", kind: "message", T: () => ReleaseSchedule },
            { no: 4, name: "creds", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => AccountCredential } },
            { no: 5, name: "threshold", kind: "message", T: () => AccountThreshold },
            { no: 6, name: "encrypted_balance", kind: "message", T: () => EncryptedBalance },
            { no: 7, name: "encryption_key", kind: "message", T: () => EncryptionKey },
            { no: 8, name: "index", kind: "message", T: () => AccountIndex },
            { no: 9, name: "stake", kind: "message", T: () => AccountStakingInfo },
            { no: 10, name: "address", kind: "message", T: () => AccountAddress },
            { no: 11, name: "cooldowns", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Cooldown },
            { no: 12, name: "available_balance", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountInfo
 */
export const AccountInfo = new AccountInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockHashInput$Type extends MessageType<BlockHashInput> {
    constructor() {
        super("concordium.v2.BlockHashInput", [
            { no: 1, name: "best", kind: "message", oneof: "blockHashInput", T: () => Empty },
            { no: 2, name: "last_final", kind: "message", oneof: "blockHashInput", T: () => Empty },
            { no: 3, name: "given", kind: "message", oneof: "blockHashInput", T: () => BlockHash },
            { no: 4, name: "absolute_height", kind: "message", oneof: "blockHashInput", T: () => AbsoluteBlockHeight },
            { no: 5, name: "relative_height", kind: "message", oneof: "blockHashInput", T: () => BlockHashInput_RelativeHeight }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockHashInput
 */
export const BlockHashInput = new BlockHashInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockHashInput_RelativeHeight$Type extends MessageType<BlockHashInput_RelativeHeight> {
    constructor() {
        super("concordium.v2.BlockHashInput.RelativeHeight", [
            { no: 1, name: "genesis_index", kind: "message", T: () => GenesisIndex },
            { no: 2, name: "height", kind: "message", T: () => BlockHeight },
            { no: 3, name: "restrict", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockHashInput.RelativeHeight
 */
export const BlockHashInput_RelativeHeight = new BlockHashInput_RelativeHeight$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EpochRequest$Type extends MessageType<EpochRequest> {
    constructor() {
        super("concordium.v2.EpochRequest", [
            { no: 1, name: "relative_epoch", kind: "message", oneof: "epochRequestInput", T: () => EpochRequest_RelativeEpoch },
            { no: 2, name: "block_hash", kind: "message", oneof: "epochRequestInput", T: () => BlockHashInput }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.EpochRequest
 */
export const EpochRequest = new EpochRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EpochRequest_RelativeEpoch$Type extends MessageType<EpochRequest_RelativeEpoch> {
    constructor() {
        super("concordium.v2.EpochRequest.RelativeEpoch", [
            { no: 1, name: "genesis_index", kind: "message", T: () => GenesisIndex },
            { no: 2, name: "epoch", kind: "message", T: () => Epoch }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.EpochRequest.RelativeEpoch
 */
export const EpochRequest_RelativeEpoch = new EpochRequest_RelativeEpoch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountIdentifierInput$Type extends MessageType<AccountIdentifierInput> {
    constructor() {
        super("concordium.v2.AccountIdentifierInput", [
            { no: 1, name: "address", kind: "message", oneof: "accountIdentifierInput", T: () => AccountAddress },
            { no: 2, name: "cred_id", kind: "message", oneof: "accountIdentifierInput", T: () => CredentialRegistrationId },
            { no: 3, name: "account_index", kind: "message", oneof: "accountIdentifierInput", T: () => AccountIndex }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountIdentifierInput
 */
export const AccountIdentifierInput = new AccountIdentifierInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountInfoRequest$Type extends MessageType<AccountInfoRequest> {
    constructor() {
        super("concordium.v2.AccountInfoRequest", [
            { no: 1, name: "block_hash", kind: "message", T: () => BlockHashInput },
            { no: 2, name: "account_identifier", kind: "message", T: () => AccountIdentifierInput }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountInfoRequest
 */
export const AccountInfoRequest = new AccountInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinalizedBlockInfo$Type extends MessageType<FinalizedBlockInfo> {
    constructor() {
        super("concordium.v2.FinalizedBlockInfo", [
            { no: 1, name: "hash", kind: "message", T: () => BlockHash },
            { no: 2, name: "height", kind: "message", T: () => AbsoluteBlockHeight }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.FinalizedBlockInfo
 */
export const FinalizedBlockInfo = new FinalizedBlockInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AncestorsRequest$Type extends MessageType<AncestorsRequest> {
    constructor() {
        super("concordium.v2.AncestorsRequest", [
            { no: 1, name: "block_hash", kind: "message", T: () => BlockHashInput },
            { no: 2, name: "amount", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AncestorsRequest
 */
export const AncestorsRequest = new AncestorsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModuleSourceRequest$Type extends MessageType<ModuleSourceRequest> {
    constructor() {
        super("concordium.v2.ModuleSourceRequest", [
            { no: 1, name: "block_hash", kind: "message", T: () => BlockHashInput },
            { no: 2, name: "module_ref", kind: "message", T: () => ModuleRef }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ModuleSourceRequest
 */
export const ModuleSourceRequest = new ModuleSourceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractAddress$Type extends MessageType<ContractAddress> {
    constructor() {
        super("concordium.v2.ContractAddress", [
            { no: 1, name: "index", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "subindex", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ContractAddress
 */
export const ContractAddress = new ContractAddress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstanceInfoRequest$Type extends MessageType<InstanceInfoRequest> {
    constructor() {
        super("concordium.v2.InstanceInfoRequest", [
            { no: 1, name: "block_hash", kind: "message", T: () => BlockHashInput },
            { no: 2, name: "address", kind: "message", T: () => ContractAddress }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InstanceInfoRequest
 */
export const InstanceInfoRequest = new InstanceInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstanceInfo$Type extends MessageType<InstanceInfo> {
    constructor() {
        super("concordium.v2.InstanceInfo", [
            { no: 1, name: "v0", kind: "message", oneof: "version", T: () => InstanceInfo_V0 },
            { no: 2, name: "v1", kind: "message", oneof: "version", T: () => InstanceInfo_V1 }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InstanceInfo
 */
export const InstanceInfo = new InstanceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstanceInfo_V0$Type extends MessageType<InstanceInfo_V0> {
    constructor() {
        super("concordium.v2.InstanceInfo.V0", [
            { no: 1, name: "model", kind: "message", T: () => ContractStateV0 },
            { no: 2, name: "owner", kind: "message", T: () => AccountAddress },
            { no: 3, name: "amount", kind: "message", T: () => Amount },
            { no: 4, name: "methods", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReceiveName },
            { no: 5, name: "name", kind: "message", T: () => InitName },
            { no: 6, name: "source_module", kind: "message", T: () => ModuleRef }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InstanceInfo.V0
 */
export const InstanceInfo_V0 = new InstanceInfo_V0$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstanceInfo_V1$Type extends MessageType<InstanceInfo_V1> {
    constructor() {
        super("concordium.v2.InstanceInfo.V1", [
            { no: 2, name: "owner", kind: "message", T: () => AccountAddress },
            { no: 3, name: "amount", kind: "message", T: () => Amount },
            { no: 4, name: "methods", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReceiveName },
            { no: 5, name: "name", kind: "message", T: () => InitName },
            { no: 6, name: "source_module", kind: "message", T: () => ModuleRef }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InstanceInfo.V1
 */
export const InstanceInfo_V1 = new InstanceInfo_V1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstanceStateKVPair$Type extends MessageType<InstanceStateKVPair> {
    constructor() {
        super("concordium.v2.InstanceStateKVPair", [
            { no: 1, name: "key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InstanceStateKVPair
 */
export const InstanceStateKVPair = new InstanceStateKVPair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstanceStateLookupRequest$Type extends MessageType<InstanceStateLookupRequest> {
    constructor() {
        super("concordium.v2.InstanceStateLookupRequest", [
            { no: 1, name: "block_hash", kind: "message", T: () => BlockHashInput },
            { no: 2, name: "address", kind: "message", T: () => ContractAddress },
            { no: 3, name: "key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InstanceStateLookupRequest
 */
export const InstanceStateLookupRequest = new InstanceStateLookupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstanceStateValueAtKey$Type extends MessageType<InstanceStateValueAtKey> {
    constructor() {
        super("concordium.v2.InstanceStateValueAtKey", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InstanceStateValueAtKey
 */
export const InstanceStateValueAtKey = new InstanceStateValueAtKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceiveName$Type extends MessageType<ReceiveName> {
    constructor() {
        super("concordium.v2.ReceiveName", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ReceiveName
 */
export const ReceiveName = new ReceiveName$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitName$Type extends MessageType<InitName> {
    constructor() {
        super("concordium.v2.InitName", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InitName
 */
export const InitName = new InitName$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Parameter$Type extends MessageType<Parameter> {
    constructor() {
        super("concordium.v2.Parameter", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Parameter
 */
export const Parameter = new Parameter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractStateV0$Type extends MessageType<ContractStateV0> {
    constructor() {
        super("concordium.v2.ContractStateV0", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ContractStateV0
 */
export const ContractStateV0 = new ContractStateV0$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockItemStatus$Type extends MessageType<BlockItemStatus> {
    constructor() {
        super("concordium.v2.BlockItemStatus", [
            { no: 1, name: "received", kind: "message", oneof: "status", T: () => Empty },
            { no: 2, name: "committed", kind: "message", oneof: "status", T: () => BlockItemStatus_Committed },
            { no: 3, name: "finalized", kind: "message", oneof: "status", T: () => BlockItemStatus_Finalized }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockItemStatus
 */
export const BlockItemStatus = new BlockItemStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockItemStatus_Committed$Type extends MessageType<BlockItemStatus_Committed> {
    constructor() {
        super("concordium.v2.BlockItemStatus.Committed", [
            { no: 1, name: "outcomes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BlockItemSummaryInBlock }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockItemStatus.Committed
 */
export const BlockItemStatus_Committed = new BlockItemStatus_Committed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockItemStatus_Finalized$Type extends MessageType<BlockItemStatus_Finalized> {
    constructor() {
        super("concordium.v2.BlockItemStatus.Finalized", [
            { no: 1, name: "outcome", kind: "message", T: () => BlockItemSummaryInBlock }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockItemStatus.Finalized
 */
export const BlockItemStatus_Finalized = new BlockItemStatus_Finalized$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockItemSummaryInBlock$Type extends MessageType<BlockItemSummaryInBlock> {
    constructor() {
        super("concordium.v2.BlockItemSummaryInBlock", [
            { no: 1, name: "block_hash", kind: "message", T: () => BlockHash },
            { no: 2, name: "outcome", kind: "message", T: () => BlockItemSummary }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockItemSummaryInBlock
 */
export const BlockItemSummaryInBlock = new BlockItemSummaryInBlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Energy$Type extends MessageType<Energy> {
    constructor() {
        super("concordium.v2.Energy", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Energy
 */
export const Energy = new Energy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Slot$Type extends MessageType<Slot> {
    constructor() {
        super("concordium.v2.Slot", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Slot
 */
export const Slot = new Slot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NextAccountSequenceNumber$Type extends MessageType<NextAccountSequenceNumber> {
    constructor() {
        super("concordium.v2.NextAccountSequenceNumber", [
            { no: 1, name: "sequence_number", kind: "message", T: () => SequenceNumber },
            { no: 2, name: "all_final", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.NextAccountSequenceNumber
 */
export const NextAccountSequenceNumber = new NextAccountSequenceNumber$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Duration$Type extends MessageType<Duration> {
    constructor() {
        super("concordium.v2.Duration", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Duration
 */
export const Duration = new Duration$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RejectReason$Type extends MessageType<RejectReason> {
    constructor() {
        super("concordium.v2.RejectReason", [
            { no: 1, name: "module_not_wf", kind: "message", oneof: "reason", T: () => Empty },
            { no: 2, name: "module_hash_already_exists", kind: "message", oneof: "reason", T: () => ModuleRef },
            { no: 3, name: "invalid_account_reference", kind: "message", oneof: "reason", T: () => AccountAddress },
            { no: 4, name: "invalid_init_method", kind: "message", oneof: "reason", T: () => RejectReason_InvalidInitMethod },
            { no: 5, name: "invalid_receive_method", kind: "message", oneof: "reason", T: () => RejectReason_InvalidReceiveMethod },
            { no: 6, name: "invalid_module_reference", kind: "message", oneof: "reason", T: () => ModuleRef },
            { no: 7, name: "invalid_contract_address", kind: "message", oneof: "reason", T: () => ContractAddress },
            { no: 8, name: "runtime_failure", kind: "message", oneof: "reason", T: () => Empty },
            { no: 9, name: "amount_too_large", kind: "message", oneof: "reason", T: () => RejectReason_AmountTooLarge },
            { no: 10, name: "serialization_failure", kind: "message", oneof: "reason", T: () => Empty },
            { no: 11, name: "out_of_energy", kind: "message", oneof: "reason", T: () => Empty },
            { no: 12, name: "rejected_init", kind: "message", oneof: "reason", T: () => RejectReason_RejectedInit },
            { no: 13, name: "rejected_receive", kind: "message", oneof: "reason", T: () => RejectReason_RejectedReceive },
            { no: 14, name: "invalid_proof", kind: "message", oneof: "reason", T: () => Empty },
            { no: 15, name: "already_a_baker", kind: "message", oneof: "reason", T: () => BakerId },
            { no: 16, name: "not_a_baker", kind: "message", oneof: "reason", T: () => AccountAddress },
            { no: 17, name: "insufficient_balance_for_baker_stake", kind: "message", oneof: "reason", T: () => Empty },
            { no: 18, name: "stake_under_minimum_threshold_for_baking", kind: "message", oneof: "reason", T: () => Empty },
            { no: 19, name: "baker_in_cooldown", kind: "message", oneof: "reason", T: () => Empty },
            { no: 20, name: "duplicate_aggregation_key", kind: "message", oneof: "reason", T: () => BakerAggregationVerifyKey },
            { no: 21, name: "non_existent_credential_id", kind: "message", oneof: "reason", T: () => Empty },
            { no: 22, name: "key_index_already_in_use", kind: "message", oneof: "reason", T: () => Empty },
            { no: 23, name: "invalid_account_threshold", kind: "message", oneof: "reason", T: () => Empty },
            { no: 24, name: "invalid_credential_key_sign_threshold", kind: "message", oneof: "reason", T: () => Empty },
            { no: 25, name: "invalid_encrypted_amount_transfer_proof", kind: "message", oneof: "reason", T: () => Empty },
            { no: 26, name: "invalid_transfer_to_public_proof", kind: "message", oneof: "reason", T: () => Empty },
            { no: 27, name: "encrypted_amount_self_transfer", kind: "message", oneof: "reason", T: () => AccountAddress },
            { no: 28, name: "invalid_index_on_encrypted_transfer", kind: "message", oneof: "reason", T: () => Empty },
            { no: 29, name: "zero_scheduledAmount", kind: "message", oneof: "reason", T: () => Empty },
            { no: 30, name: "non_increasing_schedule", kind: "message", oneof: "reason", T: () => Empty },
            { no: 31, name: "first_scheduled_release_expired", kind: "message", oneof: "reason", T: () => Empty },
            { no: 32, name: "scheduled_self_transfer", kind: "message", oneof: "reason", T: () => AccountAddress },
            { no: 33, name: "invalid_credentials", kind: "message", oneof: "reason", T: () => Empty },
            { no: 34, name: "duplicate_cred_ids", kind: "message", oneof: "reason", T: () => RejectReason_DuplicateCredIds },
            { no: 35, name: "non_existent_cred_ids", kind: "message", oneof: "reason", T: () => RejectReason_NonExistentCredIds },
            { no: 36, name: "remove_first_credential", kind: "message", oneof: "reason", T: () => Empty },
            { no: 37, name: "credential_holder_did_not_sign", kind: "message", oneof: "reason", T: () => Empty },
            { no: 38, name: "not_allowed_multiple_credentials", kind: "message", oneof: "reason", T: () => Empty },
            { no: 39, name: "not_allowed_to_receive_encrypted", kind: "message", oneof: "reason", T: () => Empty },
            { no: 40, name: "not_allowed_to_handle_encrypted", kind: "message", oneof: "reason", T: () => Empty },
            { no: 41, name: "missing_baker_add_parameters", kind: "message", oneof: "reason", T: () => Empty },
            { no: 42, name: "finalization_reward_commission_not_in_range", kind: "message", oneof: "reason", T: () => Empty },
            { no: 43, name: "baking_reward_commission_not_in_range", kind: "message", oneof: "reason", T: () => Empty },
            { no: 44, name: "transaction_fee_commission_not_in_range", kind: "message", oneof: "reason", T: () => Empty },
            { no: 45, name: "already_a_delegator", kind: "message", oneof: "reason", T: () => Empty },
            { no: 46, name: "insufficient_balance_for_delegation_stake", kind: "message", oneof: "reason", T: () => Empty },
            { no: 47, name: "missing_delegation_add_parameters", kind: "message", oneof: "reason", T: () => Empty },
            { no: 48, name: "insufficient_delegation_stake", kind: "message", oneof: "reason", T: () => Empty },
            { no: 49, name: "delegator_in_cooldown", kind: "message", oneof: "reason", T: () => Empty },
            { no: 50, name: "not_a_delegator", kind: "message", oneof: "reason", T: () => AccountAddress },
            { no: 51, name: "delegation_target_not_a_baker", kind: "message", oneof: "reason", T: () => BakerId },
            { no: 52, name: "stake_over_maximum_threshold_for_pool", kind: "message", oneof: "reason", T: () => Empty },
            { no: 53, name: "pool_would_become_over_delegated", kind: "message", oneof: "reason", T: () => Empty },
            { no: 54, name: "pool_closed", kind: "message", oneof: "reason", T: () => Empty }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.RejectReason
 */
export const RejectReason = new RejectReason$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RejectReason_InvalidInitMethod$Type extends MessageType<RejectReason_InvalidInitMethod> {
    constructor() {
        super("concordium.v2.RejectReason.InvalidInitMethod", [
            { no: 1, name: "module_ref", kind: "message", T: () => ModuleRef },
            { no: 2, name: "init_name", kind: "message", T: () => InitName }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.RejectReason.InvalidInitMethod
 */
export const RejectReason_InvalidInitMethod = new RejectReason_InvalidInitMethod$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RejectReason_InvalidReceiveMethod$Type extends MessageType<RejectReason_InvalidReceiveMethod> {
    constructor() {
        super("concordium.v2.RejectReason.InvalidReceiveMethod", [
            { no: 1, name: "module_ref", kind: "message", T: () => ModuleRef },
            { no: 2, name: "receive_name", kind: "message", T: () => ReceiveName }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.RejectReason.InvalidReceiveMethod
 */
export const RejectReason_InvalidReceiveMethod = new RejectReason_InvalidReceiveMethod$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RejectReason_AmountTooLarge$Type extends MessageType<RejectReason_AmountTooLarge> {
    constructor() {
        super("concordium.v2.RejectReason.AmountTooLarge", [
            { no: 1, name: "address", kind: "message", T: () => Address },
            { no: 2, name: "amount", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.RejectReason.AmountTooLarge
 */
export const RejectReason_AmountTooLarge = new RejectReason_AmountTooLarge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RejectReason_RejectedInit$Type extends MessageType<RejectReason_RejectedInit> {
    constructor() {
        super("concordium.v2.RejectReason.RejectedInit", [
            { no: 1, name: "reject_reason", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.RejectReason.RejectedInit
 */
export const RejectReason_RejectedInit = new RejectReason_RejectedInit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RejectReason_RejectedReceive$Type extends MessageType<RejectReason_RejectedReceive> {
    constructor() {
        super("concordium.v2.RejectReason.RejectedReceive", [
            { no: 1, name: "reject_reason", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "contract_address", kind: "message", T: () => ContractAddress },
            { no: 3, name: "receive_name", kind: "message", T: () => ReceiveName },
            { no: 4, name: "parameter", kind: "message", T: () => Parameter }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.RejectReason.RejectedReceive
 */
export const RejectReason_RejectedReceive = new RejectReason_RejectedReceive$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RejectReason_DuplicateCredIds$Type extends MessageType<RejectReason_DuplicateCredIds> {
    constructor() {
        super("concordium.v2.RejectReason.DuplicateCredIds", [
            { no: 1, name: "ids", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CredentialRegistrationId }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.RejectReason.DuplicateCredIds
 */
export const RejectReason_DuplicateCredIds = new RejectReason_DuplicateCredIds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RejectReason_NonExistentCredIds$Type extends MessageType<RejectReason_NonExistentCredIds> {
    constructor() {
        super("concordium.v2.RejectReason.NonExistentCredIds", [
            { no: 1, name: "ids", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CredentialRegistrationId }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.RejectReason.NonExistentCredIds
 */
export const RejectReason_NonExistentCredIds = new RejectReason_NonExistentCredIds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractInitializedEvent$Type extends MessageType<ContractInitializedEvent> {
    constructor() {
        super("concordium.v2.ContractInitializedEvent", [
            { no: 1, name: "contract_version", kind: "enum", T: () => ["concordium.v2.ContractVersion", ContractVersion] },
            { no: 2, name: "origin_ref", kind: "message", T: () => ModuleRef },
            { no: 3, name: "address", kind: "message", T: () => ContractAddress },
            { no: 4, name: "amount", kind: "message", T: () => Amount },
            { no: 5, name: "init_name", kind: "message", T: () => InitName },
            { no: 6, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractEvent }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ContractInitializedEvent
 */
export const ContractInitializedEvent = new ContractInitializedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractEvent$Type extends MessageType<ContractEvent> {
    constructor() {
        super("concordium.v2.ContractEvent", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ContractEvent
 */
export const ContractEvent = new ContractEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstanceUpdatedEvent$Type extends MessageType<InstanceUpdatedEvent> {
    constructor() {
        super("concordium.v2.InstanceUpdatedEvent", [
            { no: 1, name: "contract_version", kind: "enum", T: () => ["concordium.v2.ContractVersion", ContractVersion] },
            { no: 2, name: "address", kind: "message", T: () => ContractAddress },
            { no: 3, name: "instigator", kind: "message", T: () => Address },
            { no: 4, name: "amount", kind: "message", T: () => Amount },
            { no: 5, name: "parameter", kind: "message", T: () => Parameter },
            { no: 6, name: "receive_name", kind: "message", T: () => ReceiveName },
            { no: 7, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractEvent }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InstanceUpdatedEvent
 */
export const InstanceUpdatedEvent = new InstanceUpdatedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractTraceElement$Type extends MessageType<ContractTraceElement> {
    constructor() {
        super("concordium.v2.ContractTraceElement", [
            { no: 1, name: "updated", kind: "message", oneof: "element", T: () => InstanceUpdatedEvent },
            { no: 2, name: "transferred", kind: "message", oneof: "element", T: () => ContractTraceElement_Transferred },
            { no: 3, name: "interrupted", kind: "message", oneof: "element", T: () => ContractTraceElement_Interrupted },
            { no: 4, name: "resumed", kind: "message", oneof: "element", T: () => ContractTraceElement_Resumed },
            { no: 5, name: "upgraded", kind: "message", oneof: "element", T: () => ContractTraceElement_Upgraded }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ContractTraceElement
 */
export const ContractTraceElement = new ContractTraceElement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractTraceElement_Transferred$Type extends MessageType<ContractTraceElement_Transferred> {
    constructor() {
        super("concordium.v2.ContractTraceElement.Transferred", [
            { no: 1, name: "sender", kind: "message", T: () => ContractAddress },
            { no: 2, name: "amount", kind: "message", T: () => Amount },
            { no: 3, name: "receiver", kind: "message", T: () => AccountAddress }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ContractTraceElement.Transferred
 */
export const ContractTraceElement_Transferred = new ContractTraceElement_Transferred$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractTraceElement_Interrupted$Type extends MessageType<ContractTraceElement_Interrupted> {
    constructor() {
        super("concordium.v2.ContractTraceElement.Interrupted", [
            { no: 1, name: "address", kind: "message", T: () => ContractAddress },
            { no: 2, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractEvent }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ContractTraceElement.Interrupted
 */
export const ContractTraceElement_Interrupted = new ContractTraceElement_Interrupted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractTraceElement_Resumed$Type extends MessageType<ContractTraceElement_Resumed> {
    constructor() {
        super("concordium.v2.ContractTraceElement.Resumed", [
            { no: 1, name: "address", kind: "message", T: () => ContractAddress },
            { no: 2, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ContractTraceElement.Resumed
 */
export const ContractTraceElement_Resumed = new ContractTraceElement_Resumed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractTraceElement_Upgraded$Type extends MessageType<ContractTraceElement_Upgraded> {
    constructor() {
        super("concordium.v2.ContractTraceElement.Upgraded", [
            { no: 1, name: "address", kind: "message", T: () => ContractAddress },
            { no: 2, name: "from", kind: "message", T: () => ModuleRef },
            { no: 3, name: "to", kind: "message", T: () => ModuleRef }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ContractTraceElement.Upgraded
 */
export const ContractTraceElement_Upgraded = new ContractTraceElement_Upgraded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerKeysEvent$Type extends MessageType<BakerKeysEvent> {
    constructor() {
        super("concordium.v2.BakerKeysEvent", [
            { no: 1, name: "baker_id", kind: "message", T: () => BakerId },
            { no: 2, name: "account", kind: "message", T: () => AccountAddress },
            { no: 3, name: "sign_key", kind: "message", T: () => BakerSignatureVerifyKey },
            { no: 4, name: "election_key", kind: "message", T: () => BakerElectionVerifyKey },
            { no: 5, name: "aggregation_key", kind: "message", T: () => BakerAggregationVerifyKey }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerKeysEvent
 */
export const BakerKeysEvent = new BakerKeysEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Memo$Type extends MessageType<Memo> {
    constructor() {
        super("concordium.v2.Memo", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Memo
 */
export const Memo = new Memo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerStakeUpdatedData$Type extends MessageType<BakerStakeUpdatedData> {
    constructor() {
        super("concordium.v2.BakerStakeUpdatedData", [
            { no: 1, name: "baker_id", kind: "message", T: () => BakerId },
            { no: 2, name: "new_stake", kind: "message", T: () => Amount },
            { no: 3, name: "increased", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerStakeUpdatedData
 */
export const BakerStakeUpdatedData = new BakerStakeUpdatedData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EncryptedAmountRemovedEvent$Type extends MessageType<EncryptedAmountRemovedEvent> {
    constructor() {
        super("concordium.v2.EncryptedAmountRemovedEvent", [
            { no: 1, name: "account", kind: "message", T: () => AccountAddress },
            { no: 2, name: "new_amount", kind: "message", T: () => EncryptedAmount },
            { no: 3, name: "input_amount", kind: "message", T: () => EncryptedAmount },
            { no: 4, name: "up_to_index", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.EncryptedAmountRemovedEvent
 */
export const EncryptedAmountRemovedEvent = new EncryptedAmountRemovedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NewEncryptedAmountEvent$Type extends MessageType<NewEncryptedAmountEvent> {
    constructor() {
        super("concordium.v2.NewEncryptedAmountEvent", [
            { no: 1, name: "receiver", kind: "message", T: () => AccountAddress },
            { no: 2, name: "new_index", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "encrypted_amount", kind: "message", T: () => EncryptedAmount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.NewEncryptedAmountEvent
 */
export const NewEncryptedAmountEvent = new NewEncryptedAmountEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EncryptedSelfAmountAddedEvent$Type extends MessageType<EncryptedSelfAmountAddedEvent> {
    constructor() {
        super("concordium.v2.EncryptedSelfAmountAddedEvent", [
            { no: 1, name: "account", kind: "message", T: () => AccountAddress },
            { no: 2, name: "new_amount", kind: "message", T: () => EncryptedAmount },
            { no: 3, name: "amount", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.EncryptedSelfAmountAddedEvent
 */
export const EncryptedSelfAmountAddedEvent = new EncryptedSelfAmountAddedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisteredData$Type extends MessageType<RegisteredData> {
    constructor() {
        super("concordium.v2.RegisteredData", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.RegisteredData
 */
export const RegisteredData = new RegisteredData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerEvent$Type extends MessageType<BakerEvent> {
    constructor() {
        super("concordium.v2.BakerEvent", [
            { no: 1, name: "baker_added", kind: "message", oneof: "event", T: () => BakerEvent_BakerAdded },
            { no: 2, name: "baker_removed", kind: "message", oneof: "event", T: () => BakerId },
            { no: 3, name: "baker_stake_increased", kind: "message", oneof: "event", T: () => BakerEvent_BakerStakeIncreased },
            { no: 4, name: "baker_stake_decreased", kind: "message", oneof: "event", T: () => BakerEvent_BakerStakeDecreased },
            { no: 5, name: "baker_restake_earnings_updated", kind: "message", oneof: "event", T: () => BakerEvent_BakerRestakeEarningsUpdated },
            { no: 6, name: "baker_keys_updated", kind: "message", oneof: "event", T: () => BakerKeysEvent },
            { no: 7, name: "baker_set_open_status", kind: "message", oneof: "event", T: () => BakerEvent_BakerSetOpenStatus },
            { no: 8, name: "baker_set_metadata_url", kind: "message", oneof: "event", T: () => BakerEvent_BakerSetMetadataUrl },
            { no: 9, name: "baker_set_transaction_fee_commission", kind: "message", oneof: "event", T: () => BakerEvent_BakerSetTransactionFeeCommission },
            { no: 10, name: "baker_set_baking_reward_commission", kind: "message", oneof: "event", T: () => BakerEvent_BakerSetBakingRewardCommission },
            { no: 11, name: "baker_set_finalization_reward_commission", kind: "message", oneof: "event", T: () => BakerEvent_BakerSetFinalizationRewardCommission }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerEvent
 */
export const BakerEvent = new BakerEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerEvent_BakerAdded$Type extends MessageType<BakerEvent_BakerAdded> {
    constructor() {
        super("concordium.v2.BakerEvent.BakerAdded", [
            { no: 1, name: "keys_event", kind: "message", T: () => BakerKeysEvent },
            { no: 2, name: "stake", kind: "message", T: () => Amount },
            { no: 3, name: "restake_earnings", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerAdded
 */
export const BakerEvent_BakerAdded = new BakerEvent_BakerAdded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerEvent_BakerStakeIncreased$Type extends MessageType<BakerEvent_BakerStakeIncreased> {
    constructor() {
        super("concordium.v2.BakerEvent.BakerStakeIncreased", [
            { no: 1, name: "baker_id", kind: "message", T: () => BakerId },
            { no: 2, name: "new_stake", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerStakeIncreased
 */
export const BakerEvent_BakerStakeIncreased = new BakerEvent_BakerStakeIncreased$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerEvent_BakerStakeDecreased$Type extends MessageType<BakerEvent_BakerStakeDecreased> {
    constructor() {
        super("concordium.v2.BakerEvent.BakerStakeDecreased", [
            { no: 1, name: "baker_id", kind: "message", T: () => BakerId },
            { no: 2, name: "new_stake", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerStakeDecreased
 */
export const BakerEvent_BakerStakeDecreased = new BakerEvent_BakerStakeDecreased$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerEvent_BakerRestakeEarningsUpdated$Type extends MessageType<BakerEvent_BakerRestakeEarningsUpdated> {
    constructor() {
        super("concordium.v2.BakerEvent.BakerRestakeEarningsUpdated", [
            { no: 1, name: "baker_id", kind: "message", T: () => BakerId },
            { no: 2, name: "restake_earnings", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerRestakeEarningsUpdated
 */
export const BakerEvent_BakerRestakeEarningsUpdated = new BakerEvent_BakerRestakeEarningsUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerEvent_BakerSetOpenStatus$Type extends MessageType<BakerEvent_BakerSetOpenStatus> {
    constructor() {
        super("concordium.v2.BakerEvent.BakerSetOpenStatus", [
            { no: 1, name: "baker_id", kind: "message", T: () => BakerId },
            { no: 2, name: "open_status", kind: "enum", T: () => ["concordium.v2.OpenStatus", OpenStatus, "OPEN_STATUS_"] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerSetOpenStatus
 */
export const BakerEvent_BakerSetOpenStatus = new BakerEvent_BakerSetOpenStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerEvent_BakerSetMetadataUrl$Type extends MessageType<BakerEvent_BakerSetMetadataUrl> {
    constructor() {
        super("concordium.v2.BakerEvent.BakerSetMetadataUrl", [
            { no: 1, name: "baker_id", kind: "message", T: () => BakerId },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerSetMetadataUrl
 */
export const BakerEvent_BakerSetMetadataUrl = new BakerEvent_BakerSetMetadataUrl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerEvent_BakerSetTransactionFeeCommission$Type extends MessageType<BakerEvent_BakerSetTransactionFeeCommission> {
    constructor() {
        super("concordium.v2.BakerEvent.BakerSetTransactionFeeCommission", [
            { no: 1, name: "baker_id", kind: "message", T: () => BakerId },
            { no: 2, name: "transaction_fee_commission", kind: "message", T: () => AmountFraction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerSetTransactionFeeCommission
 */
export const BakerEvent_BakerSetTransactionFeeCommission = new BakerEvent_BakerSetTransactionFeeCommission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerEvent_BakerSetBakingRewardCommission$Type extends MessageType<BakerEvent_BakerSetBakingRewardCommission> {
    constructor() {
        super("concordium.v2.BakerEvent.BakerSetBakingRewardCommission", [
            { no: 1, name: "baker_id", kind: "message", T: () => BakerId },
            { no: 2, name: "baking_reward_commission", kind: "message", T: () => AmountFraction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerSetBakingRewardCommission
 */
export const BakerEvent_BakerSetBakingRewardCommission = new BakerEvent_BakerSetBakingRewardCommission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerEvent_BakerSetFinalizationRewardCommission$Type extends MessageType<BakerEvent_BakerSetFinalizationRewardCommission> {
    constructor() {
        super("concordium.v2.BakerEvent.BakerSetFinalizationRewardCommission", [
            { no: 1, name: "baker_id", kind: "message", T: () => BakerId },
            { no: 2, name: "finalization_reward_commission", kind: "message", T: () => AmountFraction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerSetFinalizationRewardCommission
 */
export const BakerEvent_BakerSetFinalizationRewardCommission = new BakerEvent_BakerSetFinalizationRewardCommission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelegatorId$Type extends MessageType<DelegatorId> {
    constructor() {
        super("concordium.v2.DelegatorId", [
            { no: 1, name: "id", kind: "message", T: () => AccountIndex }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DelegatorId
 */
export const DelegatorId = new DelegatorId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelegationEvent$Type extends MessageType<DelegationEvent> {
    constructor() {
        super("concordium.v2.DelegationEvent", [
            { no: 1, name: "delegation_stake_increased", kind: "message", oneof: "event", T: () => DelegationEvent_DelegationStakeIncreased },
            { no: 2, name: "delegation_stake_decreased", kind: "message", oneof: "event", T: () => DelegationEvent_DelegationStakeDecreased },
            { no: 3, name: "delegation_set_restake_earnings", kind: "message", oneof: "event", T: () => DelegationEvent_DelegationSetRestakeEarnings },
            { no: 4, name: "delegation_set_delegation_target", kind: "message", oneof: "event", T: () => DelegationEvent_DelegationSetDelegationTarget },
            { no: 5, name: "delegation_added", kind: "message", oneof: "event", T: () => DelegatorId },
            { no: 6, name: "delegation_removed", kind: "message", oneof: "event", T: () => DelegatorId }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DelegationEvent
 */
export const DelegationEvent = new DelegationEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelegationEvent_DelegationStakeIncreased$Type extends MessageType<DelegationEvent_DelegationStakeIncreased> {
    constructor() {
        super("concordium.v2.DelegationEvent.DelegationStakeIncreased", [
            { no: 1, name: "delegator_id", kind: "message", T: () => DelegatorId },
            { no: 2, name: "new_stake", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DelegationEvent.DelegationStakeIncreased
 */
export const DelegationEvent_DelegationStakeIncreased = new DelegationEvent_DelegationStakeIncreased$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelegationEvent_DelegationStakeDecreased$Type extends MessageType<DelegationEvent_DelegationStakeDecreased> {
    constructor() {
        super("concordium.v2.DelegationEvent.DelegationStakeDecreased", [
            { no: 1, name: "delegator_id", kind: "message", T: () => DelegatorId },
            { no: 2, name: "new_stake", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DelegationEvent.DelegationStakeDecreased
 */
export const DelegationEvent_DelegationStakeDecreased = new DelegationEvent_DelegationStakeDecreased$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelegationEvent_DelegationSetRestakeEarnings$Type extends MessageType<DelegationEvent_DelegationSetRestakeEarnings> {
    constructor() {
        super("concordium.v2.DelegationEvent.DelegationSetRestakeEarnings", [
            { no: 1, name: "delegator_id", kind: "message", T: () => DelegatorId },
            { no: 2, name: "restake_earnings", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DelegationEvent.DelegationSetRestakeEarnings
 */
export const DelegationEvent_DelegationSetRestakeEarnings = new DelegationEvent_DelegationSetRestakeEarnings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelegationEvent_DelegationSetDelegationTarget$Type extends MessageType<DelegationEvent_DelegationSetDelegationTarget> {
    constructor() {
        super("concordium.v2.DelegationEvent.DelegationSetDelegationTarget", [
            { no: 1, name: "delegator_id", kind: "message", T: () => DelegatorId },
            { no: 2, name: "delegation_target", kind: "message", T: () => DelegationTarget }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DelegationEvent.DelegationSetDelegationTarget
 */
export const DelegationEvent_DelegationSetDelegationTarget = new DelegationEvent_DelegationSetDelegationTarget$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionEffects$Type extends MessageType<AccountTransactionEffects> {
    constructor() {
        super("concordium.v2.AccountTransactionEffects", [
            { no: 1, name: "none", kind: "message", oneof: "effect", T: () => AccountTransactionEffects_None },
            { no: 2, name: "module_deployed", kind: "message", oneof: "effect", T: () => ModuleRef },
            { no: 3, name: "contract_initialized", kind: "message", oneof: "effect", T: () => ContractInitializedEvent },
            { no: 4, name: "contract_update_issued", kind: "message", oneof: "effect", T: () => AccountTransactionEffects_ContractUpdateIssued },
            { no: 5, name: "account_transfer", kind: "message", oneof: "effect", T: () => AccountTransactionEffects_AccountTransfer },
            { no: 6, name: "baker_added", kind: "message", oneof: "effect", T: () => BakerEvent_BakerAdded },
            { no: 7, name: "baker_removed", kind: "message", oneof: "effect", T: () => BakerId },
            { no: 8, name: "baker_stake_updated", kind: "message", oneof: "effect", T: () => AccountTransactionEffects_BakerStakeUpdated },
            { no: 9, name: "baker_restake_earnings_updated", kind: "message", oneof: "effect", T: () => BakerEvent_BakerRestakeEarningsUpdated },
            { no: 10, name: "baker_keys_updated", kind: "message", oneof: "effect", T: () => BakerKeysEvent },
            { no: 11, name: "encrypted_amount_transferred", kind: "message", oneof: "effect", T: () => AccountTransactionEffects_EncryptedAmountTransferred },
            { no: 12, name: "transferred_to_encrypted", kind: "message", oneof: "effect", T: () => EncryptedSelfAmountAddedEvent },
            { no: 13, name: "transferred_to_public", kind: "message", oneof: "effect", T: () => AccountTransactionEffects_TransferredToPublic },
            { no: 14, name: "transferred_with_schedule", kind: "message", oneof: "effect", T: () => AccountTransactionEffects_TransferredWithSchedule },
            { no: 15, name: "credential_keys_updated", kind: "message", oneof: "effect", T: () => CredentialRegistrationId },
            { no: 16, name: "credentials_updated", kind: "message", oneof: "effect", T: () => AccountTransactionEffects_CredentialsUpdated },
            { no: 17, name: "data_registered", kind: "message", oneof: "effect", T: () => RegisteredData },
            { no: 18, name: "baker_configured", kind: "message", oneof: "effect", T: () => AccountTransactionEffects_BakerConfigured },
            { no: 19, name: "delegation_configured", kind: "message", oneof: "effect", T: () => AccountTransactionEffects_DelegationConfigured }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects
 */
export const AccountTransactionEffects = new AccountTransactionEffects$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionEffects_None$Type extends MessageType<AccountTransactionEffects_None> {
    constructor() {
        super("concordium.v2.AccountTransactionEffects.None", [
            { no: 1, name: "transaction_type", kind: "enum", opt: true, T: () => ["concordium.v2.TransactionType", TransactionType] },
            { no: 2, name: "reject_reason", kind: "message", T: () => RejectReason }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.None
 */
export const AccountTransactionEffects_None = new AccountTransactionEffects_None$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionEffects_ContractUpdateIssued$Type extends MessageType<AccountTransactionEffects_ContractUpdateIssued> {
    constructor() {
        super("concordium.v2.AccountTransactionEffects.ContractUpdateIssued", [
            { no: 1, name: "effects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractTraceElement }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.ContractUpdateIssued
 */
export const AccountTransactionEffects_ContractUpdateIssued = new AccountTransactionEffects_ContractUpdateIssued$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionEffects_AccountTransfer$Type extends MessageType<AccountTransactionEffects_AccountTransfer> {
    constructor() {
        super("concordium.v2.AccountTransactionEffects.AccountTransfer", [
            { no: 1, name: "amount", kind: "message", T: () => Amount },
            { no: 2, name: "receiver", kind: "message", T: () => AccountAddress },
            { no: 3, name: "memo", kind: "message", T: () => Memo }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.AccountTransfer
 */
export const AccountTransactionEffects_AccountTransfer = new AccountTransactionEffects_AccountTransfer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionEffects_BakerStakeUpdated$Type extends MessageType<AccountTransactionEffects_BakerStakeUpdated> {
    constructor() {
        super("concordium.v2.AccountTransactionEffects.BakerStakeUpdated", [
            { no: 1, name: "update", kind: "message", T: () => BakerStakeUpdatedData }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.BakerStakeUpdated
 */
export const AccountTransactionEffects_BakerStakeUpdated = new AccountTransactionEffects_BakerStakeUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionEffects_EncryptedAmountTransferred$Type extends MessageType<AccountTransactionEffects_EncryptedAmountTransferred> {
    constructor() {
        super("concordium.v2.AccountTransactionEffects.EncryptedAmountTransferred", [
            { no: 1, name: "removed", kind: "message", T: () => EncryptedAmountRemovedEvent },
            { no: 2, name: "added", kind: "message", T: () => NewEncryptedAmountEvent },
            { no: 3, name: "memo", kind: "message", T: () => Memo }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.EncryptedAmountTransferred
 */
export const AccountTransactionEffects_EncryptedAmountTransferred = new AccountTransactionEffects_EncryptedAmountTransferred$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionEffects_TransferredToPublic$Type extends MessageType<AccountTransactionEffects_TransferredToPublic> {
    constructor() {
        super("concordium.v2.AccountTransactionEffects.TransferredToPublic", [
            { no: 1, name: "removed", kind: "message", T: () => EncryptedAmountRemovedEvent },
            { no: 2, name: "amount", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.TransferredToPublic
 */
export const AccountTransactionEffects_TransferredToPublic = new AccountTransactionEffects_TransferredToPublic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionEffects_TransferredWithSchedule$Type extends MessageType<AccountTransactionEffects_TransferredWithSchedule> {
    constructor() {
        super("concordium.v2.AccountTransactionEffects.TransferredWithSchedule", [
            { no: 1, name: "receiver", kind: "message", T: () => AccountAddress },
            { no: 2, name: "amount", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NewRelease },
            { no: 3, name: "memo", kind: "message", T: () => Memo }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.TransferredWithSchedule
 */
export const AccountTransactionEffects_TransferredWithSchedule = new AccountTransactionEffects_TransferredWithSchedule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionEffects_CredentialsUpdated$Type extends MessageType<AccountTransactionEffects_CredentialsUpdated> {
    constructor() {
        super("concordium.v2.AccountTransactionEffects.CredentialsUpdated", [
            { no: 1, name: "new_cred_ids", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CredentialRegistrationId },
            { no: 2, name: "removed_cred_ids", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CredentialRegistrationId },
            { no: 3, name: "new_threshold", kind: "message", T: () => AccountThreshold }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.CredentialsUpdated
 */
export const AccountTransactionEffects_CredentialsUpdated = new AccountTransactionEffects_CredentialsUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionEffects_BakerConfigured$Type extends MessageType<AccountTransactionEffects_BakerConfigured> {
    constructor() {
        super("concordium.v2.AccountTransactionEffects.BakerConfigured", [
            { no: 1, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BakerEvent }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.BakerConfigured
 */
export const AccountTransactionEffects_BakerConfigured = new AccountTransactionEffects_BakerConfigured$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionEffects_DelegationConfigured$Type extends MessageType<AccountTransactionEffects_DelegationConfigured> {
    constructor() {
        super("concordium.v2.AccountTransactionEffects.DelegationConfigured", [
            { no: 1, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DelegationEvent }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.DelegationConfigured
 */
export const AccountTransactionEffects_DelegationConfigured = new AccountTransactionEffects_DelegationConfigured$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ElectionDifficulty$Type extends MessageType<ElectionDifficulty> {
    constructor() {
        super("concordium.v2.ElectionDifficulty", [
            { no: 1, name: "value", kind: "message", T: () => AmountFraction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ElectionDifficulty
 */
export const ElectionDifficulty = new ElectionDifficulty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeoutParameters$Type extends MessageType<TimeoutParameters> {
    constructor() {
        super("concordium.v2.TimeoutParameters", [
            { no: 1, name: "timeout_base", kind: "message", T: () => Duration },
            { no: 2, name: "timeout_increase", kind: "message", T: () => Ratio },
            { no: 3, name: "timeout_decrease", kind: "message", T: () => Ratio }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.TimeoutParameters
 */
export const TimeoutParameters = new TimeoutParameters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinalizationCommitteeParameters$Type extends MessageType<FinalizationCommitteeParameters> {
    constructor() {
        super("concordium.v2.FinalizationCommitteeParameters", [
            { no: 1, name: "minimum_finalizers", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "maximum_finalizers", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "finalizer_relative_stake_threshold", kind: "message", T: () => AmountFraction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.FinalizationCommitteeParameters
 */
export const FinalizationCommitteeParameters = new FinalizationCommitteeParameters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConsensusParametersV1$Type extends MessageType<ConsensusParametersV1> {
    constructor() {
        super("concordium.v2.ConsensusParametersV1", [
            { no: 1, name: "timeout_parameters", kind: "message", T: () => TimeoutParameters },
            { no: 2, name: "min_block_time", kind: "message", T: () => Duration },
            { no: 3, name: "block_energy_limit", kind: "message", T: () => Energy }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ConsensusParametersV1
 */
export const ConsensusParametersV1 = new ConsensusParametersV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExchangeRate$Type extends MessageType<ExchangeRate> {
    constructor() {
        super("concordium.v2.ExchangeRate", [
            { no: 1, name: "value", kind: "message", T: () => Ratio }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ExchangeRate
 */
export const ExchangeRate = new ExchangeRate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Ratio$Type extends MessageType<Ratio> {
    constructor() {
        super("concordium.v2.Ratio", [
            { no: 1, name: "numerator", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "denominator", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Ratio
 */
export const Ratio = new Ratio$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePublicKey$Type extends MessageType<UpdatePublicKey> {
    constructor() {
        super("concordium.v2.UpdatePublicKey", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.UpdatePublicKey
 */
export const UpdatePublicKey = new UpdatePublicKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateKeysThreshold$Type extends MessageType<UpdateKeysThreshold> {
    constructor() {
        super("concordium.v2.UpdateKeysThreshold", [
            { no: 1, name: "value", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.UpdateKeysThreshold
 */
export const UpdateKeysThreshold = new UpdateKeysThreshold$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateKeysIndex$Type extends MessageType<UpdateKeysIndex> {
    constructor() {
        super("concordium.v2.UpdateKeysIndex", [
            { no: 1, name: "value", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.UpdateKeysIndex
 */
export const UpdateKeysIndex = new UpdateKeysIndex$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HigherLevelKeys$Type extends MessageType<HigherLevelKeys> {
    constructor() {
        super("concordium.v2.HigherLevelKeys", [
            { no: 1, name: "keys", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UpdatePublicKey },
            { no: 2, name: "threshold", kind: "message", T: () => UpdateKeysThreshold }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.HigherLevelKeys
 */
export const HigherLevelKeys = new HigherLevelKeys$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessStructure$Type extends MessageType<AccessStructure> {
    constructor() {
        super("concordium.v2.AccessStructure", [
            { no: 1, name: "access_public_keys", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UpdateKeysIndex },
            { no: 2, name: "access_threshold", kind: "message", T: () => UpdateKeysThreshold }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccessStructure
 */
export const AccessStructure = new AccessStructure$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizationsV0$Type extends MessageType<AuthorizationsV0> {
    constructor() {
        super("concordium.v2.AuthorizationsV0", [
            { no: 1, name: "keys", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UpdatePublicKey },
            { no: 2, name: "emergency", kind: "message", T: () => AccessStructure },
            { no: 3, name: "protocol", kind: "message", T: () => AccessStructure },
            { no: 4, name: "parameter_consensus", kind: "message", T: () => AccessStructure },
            { no: 5, name: "parameter_euro_per_energy", kind: "message", T: () => AccessStructure },
            { no: 6, name: "parameter_micro_CCD_per_euro", kind: "message", T: () => AccessStructure },
            { no: 7, name: "parameter_foundation_account", kind: "message", T: () => AccessStructure },
            { no: 8, name: "parameter_mint_distribution", kind: "message", T: () => AccessStructure },
            { no: 9, name: "parameter_transaction_fee_distribution", kind: "message", T: () => AccessStructure },
            { no: 10, name: "parameter_gas_rewards", kind: "message", T: () => AccessStructure },
            { no: 11, name: "pool_parameters", kind: "message", T: () => AccessStructure },
            { no: 12, name: "add_anonymity_revoker", kind: "message", T: () => AccessStructure },
            { no: 13, name: "add_identity_provider", kind: "message", T: () => AccessStructure }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AuthorizationsV0
 */
export const AuthorizationsV0 = new AuthorizationsV0$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizationsV1$Type extends MessageType<AuthorizationsV1> {
    constructor() {
        super("concordium.v2.AuthorizationsV1", [
            { no: 1, name: "v0", kind: "message", T: () => AuthorizationsV0 },
            { no: 2, name: "parameter_cooldown", kind: "message", T: () => AccessStructure },
            { no: 3, name: "parameter_time", kind: "message", T: () => AccessStructure }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AuthorizationsV1
 */
export const AuthorizationsV1 = new AuthorizationsV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Description$Type extends MessageType<Description> {
    constructor() {
        super("concordium.v2.Description", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Description
 */
export const Description = new Description$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArInfo$Type extends MessageType<ArInfo> {
    constructor() {
        super("concordium.v2.ArInfo", [
            { no: 1, name: "identity", kind: "message", T: () => ArInfo_ArIdentity },
            { no: 2, name: "description", kind: "message", T: () => Description },
            { no: 3, name: "public_key", kind: "message", T: () => ArInfo_ArPublicKey }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ArInfo
 */
export const ArInfo = new ArInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArInfo_ArIdentity$Type extends MessageType<ArInfo_ArIdentity> {
    constructor() {
        super("concordium.v2.ArInfo.ArIdentity", [
            { no: 1, name: "value", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ArInfo.ArIdentity
 */
export const ArInfo_ArIdentity = new ArInfo_ArIdentity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArInfo_ArPublicKey$Type extends MessageType<ArInfo_ArPublicKey> {
    constructor() {
        super("concordium.v2.ArInfo.ArPublicKey", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ArInfo.ArPublicKey
 */
export const ArInfo_ArPublicKey = new ArInfo_ArPublicKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IpIdentity$Type extends MessageType<IpIdentity> {
    constructor() {
        super("concordium.v2.IpIdentity", [
            { no: 1, name: "value", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.IpIdentity
 */
export const IpIdentity = new IpIdentity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IpInfo$Type extends MessageType<IpInfo> {
    constructor() {
        super("concordium.v2.IpInfo", [
            { no: 1, name: "identity", kind: "message", T: () => IpIdentity },
            { no: 2, name: "description", kind: "message", T: () => Description },
            { no: 3, name: "verify_key", kind: "message", T: () => IpInfo_IpVerifyKey },
            { no: 4, name: "cdi_verify_key", kind: "message", T: () => IpInfo_IpCdiVerifyKey }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.IpInfo
 */
export const IpInfo = new IpInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IpInfo_IpVerifyKey$Type extends MessageType<IpInfo_IpVerifyKey> {
    constructor() {
        super("concordium.v2.IpInfo.IpVerifyKey", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.IpInfo.IpVerifyKey
 */
export const IpInfo_IpVerifyKey = new IpInfo_IpVerifyKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IpInfo_IpCdiVerifyKey$Type extends MessageType<IpInfo_IpCdiVerifyKey> {
    constructor() {
        super("concordium.v2.IpInfo.IpCdiVerifyKey", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.IpInfo.IpCdiVerifyKey
 */
export const IpInfo_IpCdiVerifyKey = new IpInfo_IpCdiVerifyKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DurationSeconds$Type extends MessageType<DurationSeconds> {
    constructor() {
        super("concordium.v2.DurationSeconds", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DurationSeconds
 */
export const DurationSeconds = new DurationSeconds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InclusiveRangeAmountFraction$Type extends MessageType<InclusiveRangeAmountFraction> {
    constructor() {
        super("concordium.v2.InclusiveRangeAmountFraction", [
            { no: 1, name: "min", kind: "message", T: () => AmountFraction },
            { no: 2, name: "max_", kind: "message", T: () => AmountFraction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InclusiveRangeAmountFraction
 */
export const InclusiveRangeAmountFraction = new InclusiveRangeAmountFraction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommissionRanges$Type extends MessageType<CommissionRanges> {
    constructor() {
        super("concordium.v2.CommissionRanges", [
            { no: 1, name: "finalization", kind: "message", T: () => InclusiveRangeAmountFraction },
            { no: 2, name: "baking", kind: "message", T: () => InclusiveRangeAmountFraction },
            { no: 3, name: "transaction", kind: "message", T: () => InclusiveRangeAmountFraction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.CommissionRanges
 */
export const CommissionRanges = new CommissionRanges$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CapitalBound$Type extends MessageType<CapitalBound> {
    constructor() {
        super("concordium.v2.CapitalBound", [
            { no: 1, name: "value", kind: "message", T: () => AmountFraction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.CapitalBound
 */
export const CapitalBound = new CapitalBound$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeverageFactor$Type extends MessageType<LeverageFactor> {
    constructor() {
        super("concordium.v2.LeverageFactor", [
            { no: 1, name: "value", kind: "message", T: () => Ratio }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.LeverageFactor
 */
export const LeverageFactor = new LeverageFactor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Epoch$Type extends MessageType<Epoch> {
    constructor() {
        super("concordium.v2.Epoch", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Epoch
 */
export const Epoch = new Epoch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Round$Type extends MessageType<Round> {
    constructor() {
        super("concordium.v2.Round", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Round
 */
export const Round = new Round$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RewardPeriodLength$Type extends MessageType<RewardPeriodLength> {
    constructor() {
        super("concordium.v2.RewardPeriodLength", [
            { no: 1, name: "value", kind: "message", T: () => Epoch }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.RewardPeriodLength
 */
export const RewardPeriodLength = new RewardPeriodLength$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MintRate$Type extends MessageType<MintRate> {
    constructor() {
        super("concordium.v2.MintRate", [
            { no: 1, name: "mantissa", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "exponent", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.MintRate
 */
export const MintRate = new MintRate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CooldownParametersCpv1$Type extends MessageType<CooldownParametersCpv1> {
    constructor() {
        super("concordium.v2.CooldownParametersCpv1", [
            { no: 1, name: "pool_owner_cooldown", kind: "message", T: () => DurationSeconds },
            { no: 2, name: "delegator_cooldown", kind: "message", T: () => DurationSeconds }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.CooldownParametersCpv1
 */
export const CooldownParametersCpv1 = new CooldownParametersCpv1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PoolParametersCpv1$Type extends MessageType<PoolParametersCpv1> {
    constructor() {
        super("concordium.v2.PoolParametersCpv1", [
            { no: 1, name: "passive_finalization_commission", kind: "message", T: () => AmountFraction },
            { no: 2, name: "passive_baking_commission", kind: "message", T: () => AmountFraction },
            { no: 3, name: "passive_transaction_commission", kind: "message", T: () => AmountFraction },
            { no: 4, name: "commission_bounds", kind: "message", T: () => CommissionRanges },
            { no: 5, name: "minimum_equity_capital", kind: "message", T: () => Amount },
            { no: 6, name: "capital_bound", kind: "message", T: () => CapitalBound },
            { no: 7, name: "leverage_bound", kind: "message", T: () => LeverageFactor }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PoolParametersCpv1
 */
export const PoolParametersCpv1 = new PoolParametersCpv1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeParametersCpv1$Type extends MessageType<TimeParametersCpv1> {
    constructor() {
        super("concordium.v2.TimeParametersCpv1", [
            { no: 1, name: "reward_period_length", kind: "message", T: () => RewardPeriodLength },
            { no: 2, name: "mint_per_payday", kind: "message", T: () => MintRate }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.TimeParametersCpv1
 */
export const TimeParametersCpv1 = new TimeParametersCpv1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MintDistributionCpv1$Type extends MessageType<MintDistributionCpv1> {
    constructor() {
        super("concordium.v2.MintDistributionCpv1", [
            { no: 1, name: "baking_reward", kind: "message", T: () => AmountFraction },
            { no: 2, name: "finalization_reward", kind: "message", T: () => AmountFraction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.MintDistributionCpv1
 */
export const MintDistributionCpv1 = new MintDistributionCpv1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProtocolUpdate$Type extends MessageType<ProtocolUpdate> {
    constructor() {
        super("concordium.v2.ProtocolUpdate", [
            { no: 1, name: "message_", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "specification_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "specificationHash", kind: "message", T: () => Sha256Hash },
            { no: 4, name: "specification_auxiliary_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ProtocolUpdate
 */
export const ProtocolUpdate = new ProtocolUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MintDistributionCpv0$Type extends MessageType<MintDistributionCpv0> {
    constructor() {
        super("concordium.v2.MintDistributionCpv0", [
            { no: 1, name: "mint_per_slot", kind: "message", T: () => MintRate },
            { no: 2, name: "baking_reward", kind: "message", T: () => AmountFraction },
            { no: 3, name: "finalization_reward", kind: "message", T: () => AmountFraction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.MintDistributionCpv0
 */
export const MintDistributionCpv0 = new MintDistributionCpv0$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransactionFeeDistribution$Type extends MessageType<TransactionFeeDistribution> {
    constructor() {
        super("concordium.v2.TransactionFeeDistribution", [
            { no: 1, name: "baker", kind: "message", T: () => AmountFraction },
            { no: 2, name: "gas_account", kind: "message", T: () => AmountFraction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.TransactionFeeDistribution
 */
export const TransactionFeeDistribution = new TransactionFeeDistribution$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GasRewards$Type extends MessageType<GasRewards> {
    constructor() {
        super("concordium.v2.GasRewards", [
            { no: 1, name: "baker", kind: "message", T: () => AmountFraction },
            { no: 2, name: "finalization_proof", kind: "message", T: () => AmountFraction },
            { no: 3, name: "account_creation", kind: "message", T: () => AmountFraction },
            { no: 4, name: "chain_update", kind: "message", T: () => AmountFraction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.GasRewards
 */
export const GasRewards = new GasRewards$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GasRewardsCpv2$Type extends MessageType<GasRewardsCpv2> {
    constructor() {
        super("concordium.v2.GasRewardsCpv2", [
            { no: 1, name: "baker", kind: "message", T: () => AmountFraction },
            { no: 3, name: "account_creation", kind: "message", T: () => AmountFraction },
            { no: 4, name: "chain_update", kind: "message", T: () => AmountFraction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.GasRewardsCpv2
 */
export const GasRewardsCpv2 = new GasRewardsCpv2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerStakeThreshold$Type extends MessageType<BakerStakeThreshold> {
    constructor() {
        super("concordium.v2.BakerStakeThreshold", [
            { no: 1, name: "baker_stake_threshold", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerStakeThreshold
 */
export const BakerStakeThreshold = new BakerStakeThreshold$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RootUpdate$Type extends MessageType<RootUpdate> {
    constructor() {
        super("concordium.v2.RootUpdate", [
            { no: 1, name: "root_keys_update", kind: "message", oneof: "updateType", T: () => HigherLevelKeys },
            { no: 2, name: "level_1_keys_update", kind: "message", oneof: "updateType", T: () => HigherLevelKeys },
            { no: 3, name: "level_2_keys_update_v0", kind: "message", oneof: "updateType", T: () => AuthorizationsV0 },
            { no: 4, name: "level_2_keys_update_v1", kind: "message", oneof: "updateType", T: () => AuthorizationsV1 }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.RootUpdate
 */
export const RootUpdate = new RootUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Level1Update$Type extends MessageType<Level1Update> {
    constructor() {
        super("concordium.v2.Level1Update", [
            { no: 1, name: "level_1_keys_update", kind: "message", oneof: "updateType", T: () => HigherLevelKeys },
            { no: 2, name: "level_2_keys_update_v0", kind: "message", oneof: "updateType", T: () => AuthorizationsV0 },
            { no: 3, name: "level_2_keys_update_v1", kind: "message", oneof: "updateType", T: () => AuthorizationsV1 }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Level1Update
 */
export const Level1Update = new Level1Update$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePayload$Type extends MessageType<UpdatePayload> {
    constructor() {
        super("concordium.v2.UpdatePayload", [
            { no: 1, name: "protocol_update", kind: "message", oneof: "payload", T: () => ProtocolUpdate },
            { no: 2, name: "election_difficulty_update", kind: "message", oneof: "payload", T: () => ElectionDifficulty },
            { no: 3, name: "euro_per_energy_update", kind: "message", oneof: "payload", T: () => ExchangeRate },
            { no: 4, name: "micro_ccd_per_euro_update", kind: "message", oneof: "payload", T: () => ExchangeRate },
            { no: 5, name: "foundation_account_update", kind: "message", oneof: "payload", T: () => AccountAddress },
            { no: 6, name: "mint_distribution_update", kind: "message", oneof: "payload", T: () => MintDistributionCpv0 },
            { no: 7, name: "transaction_fee_distribution_update", kind: "message", oneof: "payload", T: () => TransactionFeeDistribution },
            { no: 8, name: "gas_rewards_update", kind: "message", oneof: "payload", T: () => GasRewards },
            { no: 9, name: "baker_stake_threshold_update", kind: "message", oneof: "payload", T: () => BakerStakeThreshold },
            { no: 10, name: "root_update", kind: "message", oneof: "payload", T: () => RootUpdate },
            { no: 11, name: "level_1_update", kind: "message", oneof: "payload", T: () => Level1Update },
            { no: 12, name: "add_anonymity_revoker_update", kind: "message", oneof: "payload", T: () => ArInfo },
            { no: 13, name: "add_identity_provider_update", kind: "message", oneof: "payload", T: () => IpInfo },
            { no: 14, name: "cooldown_parameters_cpv_1_update", kind: "message", oneof: "payload", T: () => CooldownParametersCpv1 },
            { no: 15, name: "pool_parameters_cpv_1_update", kind: "message", oneof: "payload", T: () => PoolParametersCpv1 },
            { no: 16, name: "time_parameters_cpv_1_update", kind: "message", oneof: "payload", T: () => TimeParametersCpv1 },
            { no: 17, name: "mint_distribution_cpv_1_update", kind: "message", oneof: "payload", T: () => MintDistributionCpv1 },
            { no: 18, name: "gas_rewards_cpv_2_update", kind: "message", oneof: "payload", T: () => GasRewardsCpv2 },
            { no: 19, name: "timeout_parameters_update", kind: "message", oneof: "payload", T: () => TimeoutParameters },
            { no: 20, name: "min_block_time_update", kind: "message", oneof: "payload", T: () => Duration },
            { no: 21, name: "block_energy_limit_update", kind: "message", oneof: "payload", T: () => Energy },
            { no: 22, name: "finalization_committee_parameters_update", kind: "message", oneof: "payload", T: () => FinalizationCommitteeParameters }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.UpdatePayload
 */
export const UpdatePayload = new UpdatePayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionDetails$Type extends MessageType<AccountTransactionDetails> {
    constructor() {
        super("concordium.v2.AccountTransactionDetails", [
            { no: 1, name: "cost", kind: "message", T: () => Amount },
            { no: 2, name: "sender", kind: "message", T: () => AccountAddress },
            { no: 3, name: "effects", kind: "message", T: () => AccountTransactionEffects }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionDetails
 */
export const AccountTransactionDetails = new AccountTransactionDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountCreationDetails$Type extends MessageType<AccountCreationDetails> {
    constructor() {
        super("concordium.v2.AccountCreationDetails", [
            { no: 1, name: "credential_type", kind: "enum", T: () => ["concordium.v2.CredentialType", CredentialType, "CREDENTIAL_TYPE_"] },
            { no: 2, name: "address", kind: "message", T: () => AccountAddress },
            { no: 3, name: "reg_id", kind: "message", T: () => CredentialRegistrationId }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountCreationDetails
 */
export const AccountCreationDetails = new AccountCreationDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransactionTime$Type extends MessageType<TransactionTime> {
    constructor() {
        super("concordium.v2.TransactionTime", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.TransactionTime
 */
export const TransactionTime = new TransactionTime$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDetails$Type extends MessageType<UpdateDetails> {
    constructor() {
        super("concordium.v2.UpdateDetails", [
            { no: 1, name: "effective_time", kind: "message", T: () => TransactionTime },
            { no: 2, name: "payload", kind: "message", T: () => UpdatePayload }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.UpdateDetails
 */
export const UpdateDetails = new UpdateDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockItemSummary$Type extends MessageType<BlockItemSummary> {
    constructor() {
        super("concordium.v2.BlockItemSummary", [
            { no: 1, name: "index", kind: "message", T: () => BlockItemSummary_TransactionIndex },
            { no: 2, name: "energy_cost", kind: "message", T: () => Energy },
            { no: 3, name: "hash", kind: "message", T: () => TransactionHash },
            { no: 4, name: "account_transaction", kind: "message", oneof: "details", T: () => AccountTransactionDetails },
            { no: 5, name: "account_creation", kind: "message", oneof: "details", T: () => AccountCreationDetails },
            { no: 6, name: "update", kind: "message", oneof: "details", T: () => UpdateDetails }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockItemSummary
 */
export const BlockItemSummary = new BlockItemSummary$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockItemSummary_TransactionIndex$Type extends MessageType<BlockItemSummary_TransactionIndex> {
    constructor() {
        super("concordium.v2.BlockItemSummary.TransactionIndex", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockItemSummary.TransactionIndex
 */
export const BlockItemSummary_TransactionIndex = new BlockItemSummary_TransactionIndex$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenesisIndex$Type extends MessageType<GenesisIndex> {
    constructor() {
        super("concordium.v2.GenesisIndex", [
            { no: 1, name: "value", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.GenesisIndex
 */
export const GenesisIndex = new GenesisIndex$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConsensusInfo$Type extends MessageType<ConsensusInfo> {
    constructor() {
        super("concordium.v2.ConsensusInfo", [
            { no: 1, name: "best_block", kind: "message", T: () => BlockHash },
            { no: 2, name: "genesis_block", kind: "message", T: () => BlockHash },
            { no: 3, name: "genesis_time", kind: "message", T: () => Timestamp },
            { no: 4, name: "slot_duration", kind: "message", T: () => Duration },
            { no: 5, name: "epoch_duration", kind: "message", T: () => Duration },
            { no: 6, name: "last_finalized_block", kind: "message", T: () => BlockHash },
            { no: 7, name: "best_block_height", kind: "message", T: () => AbsoluteBlockHeight },
            { no: 8, name: "last_finalized_block_height", kind: "message", T: () => AbsoluteBlockHeight },
            { no: 9, name: "blocks_received_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "block_last_received_time", kind: "message", T: () => Timestamp },
            { no: 11, name: "block_receive_latency_ema", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "block_receive_latency_emsd", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "block_receive_period_ema", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 14, name: "block_receive_period_emsd", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 15, name: "blocks_verified_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 16, name: "block_last_arrived_time", kind: "message", T: () => Timestamp },
            { no: 17, name: "block_arrive_latency_ema", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 18, name: "block_arrive_latency_emsd", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 19, name: "block_arrive_period_ema", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 20, name: "block_arrive_period_emsd", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 21, name: "transactions_per_block_ema", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 22, name: "transactions_per_block_emsd", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 23, name: "finalization_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 24, name: "last_finalized_time", kind: "message", T: () => Timestamp },
            { no: 25, name: "finalization_period_ema", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 26, name: "finalization_period_emsd", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 27, name: "protocol_version", kind: "enum", T: () => ["concordium.v2.ProtocolVersion", ProtocolVersion] },
            { no: 28, name: "genesis_index", kind: "message", T: () => GenesisIndex },
            { no: 29, name: "current_era_genesis_block", kind: "message", T: () => BlockHash },
            { no: 30, name: "current_era_genesis_time", kind: "message", T: () => Timestamp },
            { no: 31, name: "current_timeout_duration", kind: "message", T: () => Duration },
            { no: 32, name: "current_round", kind: "message", T: () => Round },
            { no: 33, name: "current_epoch", kind: "message", T: () => Epoch },
            { no: 34, name: "trigger_block_time", kind: "message", T: () => Timestamp }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ConsensusInfo
 */
export const ConsensusInfo = new ConsensusInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArrivedBlockInfo$Type extends MessageType<ArrivedBlockInfo> {
    constructor() {
        super("concordium.v2.ArrivedBlockInfo", [
            { no: 1, name: "hash", kind: "message", T: () => BlockHash },
            { no: 2, name: "height", kind: "message", T: () => AbsoluteBlockHeight }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ArrivedBlockInfo
 */
export const ArrivedBlockInfo = new ArrivedBlockInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CryptographicParameters$Type extends MessageType<CryptographicParameters> {
    constructor() {
        super("concordium.v2.CryptographicParameters", [
            { no: 1, name: "genesis_string", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bulletproof_generators", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "on_chain_commitment_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.CryptographicParameters
 */
export const CryptographicParameters = new CryptographicParameters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockInfo$Type extends MessageType<BlockInfo> {
    constructor() {
        super("concordium.v2.BlockInfo", [
            { no: 1, name: "hash", kind: "message", T: () => BlockHash },
            { no: 2, name: "height", kind: "message", T: () => AbsoluteBlockHeight },
            { no: 3, name: "parent_block", kind: "message", T: () => BlockHash },
            { no: 4, name: "last_finalized_block", kind: "message", T: () => BlockHash },
            { no: 5, name: "genesis_index", kind: "message", T: () => GenesisIndex },
            { no: 6, name: "era_block_height", kind: "message", T: () => BlockHeight },
            { no: 7, name: "receive_time", kind: "message", T: () => Timestamp },
            { no: 8, name: "arrive_time", kind: "message", T: () => Timestamp },
            { no: 9, name: "slot_number", kind: "message", T: () => Slot },
            { no: 10, name: "slot_time", kind: "message", T: () => Timestamp },
            { no: 11, name: "baker", kind: "message", T: () => BakerId },
            { no: 12, name: "finalized", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "transaction_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "transactions_energy_cost", kind: "message", T: () => Energy },
            { no: 15, name: "transactions_size", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 16, name: "state_hash", kind: "message", T: () => StateHash },
            { no: 17, name: "protocol_version", kind: "enum", T: () => ["concordium.v2.ProtocolVersion", ProtocolVersion] },
            { no: 18, name: "round", kind: "message", T: () => Round },
            { no: 19, name: "epoch", kind: "message", T: () => Epoch }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockInfo
 */
export const BlockInfo = new BlockInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PoolInfoRequest$Type extends MessageType<PoolInfoRequest> {
    constructor() {
        super("concordium.v2.PoolInfoRequest", [
            { no: 1, name: "block_hash", kind: "message", T: () => BlockHashInput },
            { no: 2, name: "baker", kind: "message", T: () => BakerId }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PoolInfoRequest
 */
export const PoolInfoRequest = new PoolInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PoolPendingChange$Type extends MessageType<PoolPendingChange> {
    constructor() {
        super("concordium.v2.PoolPendingChange", [
            { no: 1, name: "reduce", kind: "message", oneof: "change", T: () => PoolPendingChange_Reduce },
            { no: 2, name: "remove", kind: "message", oneof: "change", T: () => PoolPendingChange_Remove }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PoolPendingChange
 */
export const PoolPendingChange = new PoolPendingChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PoolPendingChange_Reduce$Type extends MessageType<PoolPendingChange_Reduce> {
    constructor() {
        super("concordium.v2.PoolPendingChange.Reduce", [
            { no: 1, name: "reduced_equity_capital", kind: "message", T: () => Amount },
            { no: 2, name: "effective_time", kind: "message", T: () => Timestamp }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PoolPendingChange.Reduce
 */
export const PoolPendingChange_Reduce = new PoolPendingChange_Reduce$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PoolPendingChange_Remove$Type extends MessageType<PoolPendingChange_Remove> {
    constructor() {
        super("concordium.v2.PoolPendingChange.Remove", [
            { no: 1, name: "effective_time", kind: "message", T: () => Timestamp }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PoolPendingChange.Remove
 */
export const PoolPendingChange_Remove = new PoolPendingChange_Remove$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PoolCurrentPaydayInfo$Type extends MessageType<PoolCurrentPaydayInfo> {
    constructor() {
        super("concordium.v2.PoolCurrentPaydayInfo", [
            { no: 1, name: "blocks_baked", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "finalization_live", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "transaction_fees_earned", kind: "message", T: () => Amount },
            { no: 4, name: "effective_stake", kind: "message", T: () => Amount },
            { no: 5, name: "lottery_power", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "baker_equity_capital", kind: "message", T: () => Amount },
            { no: 7, name: "delegated_capital", kind: "message", T: () => Amount },
            { no: 8, name: "commission_rates", kind: "message", T: () => CommissionRates }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PoolCurrentPaydayInfo
 */
export const PoolCurrentPaydayInfo = new PoolCurrentPaydayInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PoolInfoResponse$Type extends MessageType<PoolInfoResponse> {
    constructor() {
        super("concordium.v2.PoolInfoResponse", [
            { no: 1, name: "baker", kind: "message", T: () => BakerId },
            { no: 2, name: "address", kind: "message", T: () => AccountAddress },
            { no: 3, name: "equity_capital", kind: "message", T: () => Amount },
            { no: 4, name: "delegated_capital", kind: "message", T: () => Amount },
            { no: 5, name: "delegated_capital_cap", kind: "message", T: () => Amount },
            { no: 6, name: "pool_info", kind: "message", T: () => BakerPoolInfo },
            { no: 7, name: "equity_pending_change", kind: "message", T: () => PoolPendingChange },
            { no: 8, name: "current_payday_info", kind: "message", T: () => PoolCurrentPaydayInfo },
            { no: 9, name: "all_pool_total_capital", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PoolInfoResponse
 */
export const PoolInfoResponse = new PoolInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PassiveDelegationInfo$Type extends MessageType<PassiveDelegationInfo> {
    constructor() {
        super("concordium.v2.PassiveDelegationInfo", [
            { no: 1, name: "delegated_capital", kind: "message", T: () => Amount },
            { no: 2, name: "commission_rates", kind: "message", T: () => CommissionRates },
            { no: 3, name: "current_payday_transaction_fees_earned", kind: "message", T: () => Amount },
            { no: 4, name: "current_payday_delegated_capital", kind: "message", T: () => Amount },
            { no: 5, name: "all_pool_total_capital", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PassiveDelegationInfo
 */
export const PassiveDelegationInfo = new PassiveDelegationInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlocksAtHeightRequest$Type extends MessageType<BlocksAtHeightRequest> {
    constructor() {
        super("concordium.v2.BlocksAtHeightRequest", [
            { no: 1, name: "absolute", kind: "message", oneof: "blocksAtHeight", T: () => BlocksAtHeightRequest_Absolute },
            { no: 2, name: "relative", kind: "message", oneof: "blocksAtHeight", T: () => BlocksAtHeightRequest_Relative }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlocksAtHeightRequest
 */
export const BlocksAtHeightRequest = new BlocksAtHeightRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlocksAtHeightRequest_Absolute$Type extends MessageType<BlocksAtHeightRequest_Absolute> {
    constructor() {
        super("concordium.v2.BlocksAtHeightRequest.Absolute", [
            { no: 1, name: "height", kind: "message", T: () => AbsoluteBlockHeight }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlocksAtHeightRequest.Absolute
 */
export const BlocksAtHeightRequest_Absolute = new BlocksAtHeightRequest_Absolute$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlocksAtHeightRequest_Relative$Type extends MessageType<BlocksAtHeightRequest_Relative> {
    constructor() {
        super("concordium.v2.BlocksAtHeightRequest.Relative", [
            { no: 1, name: "genesis_index", kind: "message", T: () => GenesisIndex },
            { no: 2, name: "height", kind: "message", T: () => BlockHeight },
            { no: 3, name: "restrict", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlocksAtHeightRequest.Relative
 */
export const BlocksAtHeightRequest_Relative = new BlocksAtHeightRequest_Relative$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlocksAtHeightResponse$Type extends MessageType<BlocksAtHeightResponse> {
    constructor() {
        super("concordium.v2.BlocksAtHeightResponse", [
            { no: 1, name: "blocks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BlockHash }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlocksAtHeightResponse
 */
export const BlocksAtHeightResponse = new BlocksAtHeightResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenomicsInfo$Type extends MessageType<TokenomicsInfo> {
    constructor() {
        super("concordium.v2.TokenomicsInfo", [
            { no: 1, name: "v0", kind: "message", oneof: "tokenomics", T: () => TokenomicsInfo_V0 },
            { no: 2, name: "v1", kind: "message", oneof: "tokenomics", T: () => TokenomicsInfo_V1 }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.TokenomicsInfo
 */
export const TokenomicsInfo = new TokenomicsInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenomicsInfo_V0$Type extends MessageType<TokenomicsInfo_V0> {
    constructor() {
        super("concordium.v2.TokenomicsInfo.V0", [
            { no: 1, name: "total_amount", kind: "message", T: () => Amount },
            { no: 2, name: "total_encrypted_amount", kind: "message", T: () => Amount },
            { no: 3, name: "baking_reward_account", kind: "message", T: () => Amount },
            { no: 4, name: "finalization_reward_account", kind: "message", T: () => Amount },
            { no: 5, name: "gas_account", kind: "message", T: () => Amount },
            { no: 6, name: "protocol_version", kind: "enum", T: () => ["concordium.v2.ProtocolVersion", ProtocolVersion] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.TokenomicsInfo.V0
 */
export const TokenomicsInfo_V0 = new TokenomicsInfo_V0$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenomicsInfo_V1$Type extends MessageType<TokenomicsInfo_V1> {
    constructor() {
        super("concordium.v2.TokenomicsInfo.V1", [
            { no: 1, name: "total_amount", kind: "message", T: () => Amount },
            { no: 2, name: "total_encrypted_amount", kind: "message", T: () => Amount },
            { no: 3, name: "baking_reward_account", kind: "message", T: () => Amount },
            { no: 4, name: "finalization_reward_account", kind: "message", T: () => Amount },
            { no: 5, name: "gas_account", kind: "message", T: () => Amount },
            { no: 6, name: "foundation_transaction_rewards", kind: "message", T: () => Amount },
            { no: 7, name: "next_payday_time", kind: "message", T: () => Timestamp },
            { no: 8, name: "next_payday_mint_rate", kind: "message", T: () => MintRate },
            { no: 9, name: "total_staked_capital", kind: "message", T: () => Amount },
            { no: 10, name: "protocol_version", kind: "enum", T: () => ["concordium.v2.ProtocolVersion", ProtocolVersion] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.TokenomicsInfo.V1
 */
export const TokenomicsInfo_V1 = new TokenomicsInfo_V1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InvokeInstanceRequest$Type extends MessageType<InvokeInstanceRequest> {
    constructor() {
        super("concordium.v2.InvokeInstanceRequest", [
            { no: 1, name: "block_hash", kind: "message", T: () => BlockHashInput },
            { no: 2, name: "invoker", kind: "message", T: () => Address },
            { no: 3, name: "instance", kind: "message", T: () => ContractAddress },
            { no: 4, name: "amount", kind: "message", T: () => Amount },
            { no: 5, name: "entrypoint", kind: "message", T: () => ReceiveName },
            { no: 6, name: "parameter", kind: "message", T: () => Parameter },
            { no: 7, name: "energy", kind: "message", T: () => Energy }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InvokeInstanceRequest
 */
export const InvokeInstanceRequest = new InvokeInstanceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InvokeInstanceResponse$Type extends MessageType<InvokeInstanceResponse> {
    constructor() {
        super("concordium.v2.InvokeInstanceResponse", [
            { no: 1, name: "success", kind: "message", oneof: "result", T: () => InvokeInstanceResponse_Success },
            { no: 2, name: "failure", kind: "message", oneof: "result", T: () => InvokeInstanceResponse_Failure }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InvokeInstanceResponse
 */
export const InvokeInstanceResponse = new InvokeInstanceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InvokeInstanceResponse_Failure$Type extends MessageType<InvokeInstanceResponse_Failure> {
    constructor() {
        super("concordium.v2.InvokeInstanceResponse.Failure", [
            { no: 1, name: "return_value", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "used_energy", kind: "message", T: () => Energy },
            { no: 3, name: "reason", kind: "message", T: () => RejectReason }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InvokeInstanceResponse.Failure
 */
export const InvokeInstanceResponse_Failure = new InvokeInstanceResponse_Failure$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InvokeInstanceResponse_Success$Type extends MessageType<InvokeInstanceResponse_Success> {
    constructor() {
        super("concordium.v2.InvokeInstanceResponse.Success", [
            { no: 1, name: "return_value", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "used_energy", kind: "message", T: () => Energy },
            { no: 3, name: "effects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractTraceElement }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InvokeInstanceResponse.Success
 */
export const InvokeInstanceResponse_Success = new InvokeInstanceResponse_Success$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPoolDelegatorsRequest$Type extends MessageType<GetPoolDelegatorsRequest> {
    constructor() {
        super("concordium.v2.GetPoolDelegatorsRequest", [
            { no: 1, name: "block_hash", kind: "message", T: () => BlockHashInput },
            { no: 2, name: "baker", kind: "message", T: () => BakerId }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.GetPoolDelegatorsRequest
 */
export const GetPoolDelegatorsRequest = new GetPoolDelegatorsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelegatorInfo$Type extends MessageType<DelegatorInfo> {
    constructor() {
        super("concordium.v2.DelegatorInfo", [
            { no: 1, name: "account", kind: "message", T: () => AccountAddress },
            { no: 2, name: "stake", kind: "message", T: () => Amount },
            { no: 3, name: "pending_change", kind: "message", T: () => StakePendingChange }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DelegatorInfo
 */
export const DelegatorInfo = new DelegatorInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelegatorRewardPeriodInfo$Type extends MessageType<DelegatorRewardPeriodInfo> {
    constructor() {
        super("concordium.v2.DelegatorRewardPeriodInfo", [
            { no: 1, name: "account", kind: "message", T: () => AccountAddress },
            { no: 2, name: "stake", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DelegatorRewardPeriodInfo
 */
export const DelegatorRewardPeriodInfo = new DelegatorRewardPeriodInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Branch$Type extends MessageType<Branch> {
    constructor() {
        super("concordium.v2.Branch", [
            { no: 1, name: "block_hash", kind: "message", T: () => BlockHash },
            { no: 2, name: "children", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Branch }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Branch
 */
export const Branch = new Branch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeadershipElectionNonce$Type extends MessageType<LeadershipElectionNonce> {
    constructor() {
        super("concordium.v2.LeadershipElectionNonce", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.LeadershipElectionNonce
 */
export const LeadershipElectionNonce = new LeadershipElectionNonce$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ElectionInfo$Type extends MessageType<ElectionInfo> {
    constructor() {
        super("concordium.v2.ElectionInfo", [
            { no: 1, name: "election_difficulty", kind: "message", T: () => ElectionDifficulty },
            { no: 2, name: "election_nonce", kind: "message", T: () => LeadershipElectionNonce },
            { no: 3, name: "baker_election_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ElectionInfo_Baker }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ElectionInfo
 */
export const ElectionInfo = new ElectionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ElectionInfo_Baker$Type extends MessageType<ElectionInfo_Baker> {
    constructor() {
        super("concordium.v2.ElectionInfo.Baker", [
            { no: 1, name: "baker", kind: "message", T: () => BakerId },
            { no: 2, name: "account", kind: "message", T: () => AccountAddress },
            { no: 3, name: "lottery_power", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ElectionInfo.Baker
 */
export const ElectionInfo_Baker = new ElectionInfo_Baker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockSpecialEvent$Type extends MessageType<BlockSpecialEvent> {
    constructor() {
        super("concordium.v2.BlockSpecialEvent", [
            { no: 1, name: "baking_rewards", kind: "message", oneof: "event", T: () => BlockSpecialEvent_BakingRewards },
            { no: 2, name: "mint", kind: "message", oneof: "event", T: () => BlockSpecialEvent_Mint },
            { no: 3, name: "finalization_rewards", kind: "message", oneof: "event", T: () => BlockSpecialEvent_FinalizationRewards },
            { no: 4, name: "block_reward", kind: "message", oneof: "event", T: () => BlockSpecialEvent_BlockReward },
            { no: 5, name: "payday_foundation_reward", kind: "message", oneof: "event", T: () => BlockSpecialEvent_PaydayFoundationReward },
            { no: 6, name: "payday_account_reward", kind: "message", oneof: "event", T: () => BlockSpecialEvent_PaydayAccountReward },
            { no: 7, name: "block_accrue_reward", kind: "message", oneof: "event", T: () => BlockSpecialEvent_BlockAccrueReward },
            { no: 8, name: "payday_pool_reward", kind: "message", oneof: "event", T: () => BlockSpecialEvent_PaydayPoolReward }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent
 */
export const BlockSpecialEvent = new BlockSpecialEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockSpecialEvent_AccountAmounts$Type extends MessageType<BlockSpecialEvent_AccountAmounts> {
    constructor() {
        super("concordium.v2.BlockSpecialEvent.AccountAmounts", [
            { no: 1, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BlockSpecialEvent_AccountAmounts_Entry }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.AccountAmounts
 */
export const BlockSpecialEvent_AccountAmounts = new BlockSpecialEvent_AccountAmounts$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockSpecialEvent_AccountAmounts_Entry$Type extends MessageType<BlockSpecialEvent_AccountAmounts_Entry> {
    constructor() {
        super("concordium.v2.BlockSpecialEvent.AccountAmounts.Entry", [
            { no: 1, name: "account", kind: "message", T: () => AccountAddress },
            { no: 2, name: "amount", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.AccountAmounts.Entry
 */
export const BlockSpecialEvent_AccountAmounts_Entry = new BlockSpecialEvent_AccountAmounts_Entry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockSpecialEvent_BakingRewards$Type extends MessageType<BlockSpecialEvent_BakingRewards> {
    constructor() {
        super("concordium.v2.BlockSpecialEvent.BakingRewards", [
            { no: 1, name: "baker_rewards", kind: "message", T: () => BlockSpecialEvent_AccountAmounts },
            { no: 2, name: "remainder", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.BakingRewards
 */
export const BlockSpecialEvent_BakingRewards = new BlockSpecialEvent_BakingRewards$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockSpecialEvent_Mint$Type extends MessageType<BlockSpecialEvent_Mint> {
    constructor() {
        super("concordium.v2.BlockSpecialEvent.Mint", [
            { no: 1, name: "mint_baking_reward", kind: "message", T: () => Amount },
            { no: 2, name: "mint_finalization_reward", kind: "message", T: () => Amount },
            { no: 3, name: "mint_platform_development_charge", kind: "message", T: () => Amount },
            { no: 4, name: "foundation_account", kind: "message", T: () => AccountAddress }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.Mint
 */
export const BlockSpecialEvent_Mint = new BlockSpecialEvent_Mint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockSpecialEvent_FinalizationRewards$Type extends MessageType<BlockSpecialEvent_FinalizationRewards> {
    constructor() {
        super("concordium.v2.BlockSpecialEvent.FinalizationRewards", [
            { no: 1, name: "finalization_rewards", kind: "message", T: () => BlockSpecialEvent_AccountAmounts },
            { no: 2, name: "remainder", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.FinalizationRewards
 */
export const BlockSpecialEvent_FinalizationRewards = new BlockSpecialEvent_FinalizationRewards$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockSpecialEvent_BlockReward$Type extends MessageType<BlockSpecialEvent_BlockReward> {
    constructor() {
        super("concordium.v2.BlockSpecialEvent.BlockReward", [
            { no: 1, name: "transaction_fees", kind: "message", T: () => Amount },
            { no: 2, name: "old_gas_account", kind: "message", T: () => Amount },
            { no: 3, name: "new_gas_account", kind: "message", T: () => Amount },
            { no: 4, name: "baker_reward", kind: "message", T: () => Amount },
            { no: 5, name: "foundation_charge", kind: "message", T: () => Amount },
            { no: 6, name: "baker", kind: "message", T: () => AccountAddress },
            { no: 7, name: "foundation_account", kind: "message", T: () => AccountAddress }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.BlockReward
 */
export const BlockSpecialEvent_BlockReward = new BlockSpecialEvent_BlockReward$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockSpecialEvent_PaydayFoundationReward$Type extends MessageType<BlockSpecialEvent_PaydayFoundationReward> {
    constructor() {
        super("concordium.v2.BlockSpecialEvent.PaydayFoundationReward", [
            { no: 1, name: "foundation_account", kind: "message", T: () => AccountAddress },
            { no: 2, name: "development_charge", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.PaydayFoundationReward
 */
export const BlockSpecialEvent_PaydayFoundationReward = new BlockSpecialEvent_PaydayFoundationReward$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockSpecialEvent_PaydayAccountReward$Type extends MessageType<BlockSpecialEvent_PaydayAccountReward> {
    constructor() {
        super("concordium.v2.BlockSpecialEvent.PaydayAccountReward", [
            { no: 1, name: "account", kind: "message", T: () => AccountAddress },
            { no: 2, name: "transaction_fees", kind: "message", T: () => Amount },
            { no: 3, name: "baker_reward", kind: "message", T: () => Amount },
            { no: 4, name: "finalization_reward", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.PaydayAccountReward
 */
export const BlockSpecialEvent_PaydayAccountReward = new BlockSpecialEvent_PaydayAccountReward$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockSpecialEvent_BlockAccrueReward$Type extends MessageType<BlockSpecialEvent_BlockAccrueReward> {
    constructor() {
        super("concordium.v2.BlockSpecialEvent.BlockAccrueReward", [
            { no: 1, name: "transaction_fees", kind: "message", T: () => Amount },
            { no: 2, name: "old_gas_account", kind: "message", T: () => Amount },
            { no: 3, name: "new_gas_account", kind: "message", T: () => Amount },
            { no: 4, name: "baker_reward", kind: "message", T: () => Amount },
            { no: 5, name: "passive_reward", kind: "message", T: () => Amount },
            { no: 6, name: "foundation_charge", kind: "message", T: () => Amount },
            { no: 7, name: "baker", kind: "message", T: () => BakerId }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.BlockAccrueReward
 */
export const BlockSpecialEvent_BlockAccrueReward = new BlockSpecialEvent_BlockAccrueReward$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockSpecialEvent_PaydayPoolReward$Type extends MessageType<BlockSpecialEvent_PaydayPoolReward> {
    constructor() {
        super("concordium.v2.BlockSpecialEvent.PaydayPoolReward", [
            { no: 1, name: "pool_owner", kind: "message", T: () => BakerId },
            { no: 2, name: "transaction_fees", kind: "message", T: () => Amount },
            { no: 3, name: "baker_reward", kind: "message", T: () => Amount },
            { no: 4, name: "finalization_reward", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.PaydayPoolReward
 */
export const BlockSpecialEvent_PaydayPoolReward = new BlockSpecialEvent_PaydayPoolReward$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PendingUpdate$Type extends MessageType<PendingUpdate> {
    constructor() {
        super("concordium.v2.PendingUpdate", [
            { no: 1, name: "effective_time", kind: "message", T: () => TransactionTime },
            { no: 2, name: "root_keys", kind: "message", oneof: "effect", T: () => HigherLevelKeys },
            { no: 3, name: "level1_keys", kind: "message", oneof: "effect", T: () => HigherLevelKeys },
            { no: 4, name: "level2_keys_cpv_0", kind: "message", oneof: "effect", T: () => AuthorizationsV0 },
            { no: 5, name: "level2_keys_cpv_1", kind: "message", oneof: "effect", T: () => AuthorizationsV1 },
            { no: 6, name: "protocol", kind: "message", oneof: "effect", T: () => ProtocolUpdate },
            { no: 7, name: "election_difficulty", kind: "message", oneof: "effect", T: () => ElectionDifficulty },
            { no: 8, name: "euro_per_energy", kind: "message", oneof: "effect", T: () => ExchangeRate },
            { no: 9, name: "micro_ccd_per_euro", kind: "message", oneof: "effect", T: () => ExchangeRate },
            { no: 10, name: "foundation_account", kind: "message", oneof: "effect", T: () => AccountAddress },
            { no: 11, name: "mint_distribution_cpv_0", kind: "message", oneof: "effect", T: () => MintDistributionCpv0 },
            { no: 12, name: "mint_distribution_cpv_1", kind: "message", oneof: "effect", T: () => MintDistributionCpv1 },
            { no: 13, name: "transaction_fee_distribution", kind: "message", oneof: "effect", T: () => TransactionFeeDistribution },
            { no: 14, name: "gas_rewards", kind: "message", oneof: "effect", T: () => GasRewards },
            { no: 15, name: "pool_parameters_cpv_0", kind: "message", oneof: "effect", T: () => BakerStakeThreshold },
            { no: 16, name: "pool_parameters_cpv_1", kind: "message", oneof: "effect", T: () => PoolParametersCpv1 },
            { no: 17, name: "add_anonymity_revoker", kind: "message", oneof: "effect", T: () => ArInfo },
            { no: 18, name: "add_identity_provider", kind: "message", oneof: "effect", T: () => IpInfo },
            { no: 19, name: "cooldown_parameters", kind: "message", oneof: "effect", T: () => CooldownParametersCpv1 },
            { no: 20, name: "time_parameters", kind: "message", oneof: "effect", T: () => TimeParametersCpv1 },
            { no: 21, name: "gas_rewards_cpv_2", kind: "message", oneof: "effect", T: () => GasRewardsCpv2 },
            { no: 22, name: "timeout_parameters", kind: "message", oneof: "effect", T: () => TimeoutParameters },
            { no: 23, name: "min_block_time", kind: "message", oneof: "effect", T: () => Duration },
            { no: 24, name: "block_energy_limit", kind: "message", oneof: "effect", T: () => Energy },
            { no: 25, name: "finalization_committee_parameters", kind: "message", oneof: "effect", T: () => FinalizationCommitteeParameters }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PendingUpdate
 */
export const PendingUpdate = new PendingUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NextUpdateSequenceNumbers$Type extends MessageType<NextUpdateSequenceNumbers> {
    constructor() {
        super("concordium.v2.NextUpdateSequenceNumbers", [
            { no: 1, name: "root_keys", kind: "message", T: () => SequenceNumber },
            { no: 2, name: "level1_keys", kind: "message", T: () => SequenceNumber },
            { no: 3, name: "level2_keys", kind: "message", T: () => SequenceNumber },
            { no: 4, name: "protocol", kind: "message", T: () => SequenceNumber },
            { no: 5, name: "election_difficulty", kind: "message", T: () => SequenceNumber },
            { no: 6, name: "euro_per_energy", kind: "message", T: () => SequenceNumber },
            { no: 7, name: "micro_ccd_per_euro", kind: "message", T: () => SequenceNumber },
            { no: 8, name: "foundation_account", kind: "message", T: () => SequenceNumber },
            { no: 9, name: "mint_distribution", kind: "message", T: () => SequenceNumber },
            { no: 10, name: "transaction_fee_distribution", kind: "message", T: () => SequenceNumber },
            { no: 11, name: "gas_rewards", kind: "message", T: () => SequenceNumber },
            { no: 12, name: "pool_parameters", kind: "message", T: () => SequenceNumber },
            { no: 13, name: "add_anonymity_revoker", kind: "message", T: () => SequenceNumber },
            { no: 14, name: "add_identity_provider", kind: "message", T: () => SequenceNumber },
            { no: 15, name: "cooldown_parameters", kind: "message", T: () => SequenceNumber },
            { no: 16, name: "time_parameters", kind: "message", T: () => SequenceNumber },
            { no: 17, name: "timeout_parameters", kind: "message", T: () => SequenceNumber },
            { no: 18, name: "min_block_time", kind: "message", T: () => SequenceNumber },
            { no: 19, name: "block_energy_limit", kind: "message", T: () => SequenceNumber },
            { no: 20, name: "finalization_committee_parameters", kind: "message", T: () => SequenceNumber }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.NextUpdateSequenceNumbers
 */
export const NextUpdateSequenceNumbers = new NextUpdateSequenceNumbers$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IpAddress$Type extends MessageType<IpAddress> {
    constructor() {
        super("concordium.v2.IpAddress", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.IpAddress
 */
export const IpAddress = new IpAddress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Port$Type extends MessageType<Port> {
    constructor() {
        super("concordium.v2.Port", [
            { no: 1, name: "value", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Port
 */
export const Port = new Port$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IpSocketAddress$Type extends MessageType<IpSocketAddress> {
    constructor() {
        super("concordium.v2.IpSocketAddress", [
            { no: 1, name: "ip", kind: "message", T: () => IpAddress },
            { no: 2, name: "port", kind: "message", T: () => Port }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.IpSocketAddress
 */
export const IpSocketAddress = new IpSocketAddress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerId$Type extends MessageType<PeerId> {
    constructor() {
        super("concordium.v2.PeerId", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PeerId
 */
export const PeerId = new PeerId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BannedPeer$Type extends MessageType<BannedPeer> {
    constructor() {
        super("concordium.v2.BannedPeer", [
            { no: 1, name: "ip_address", kind: "message", T: () => IpAddress }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BannedPeer
 */
export const BannedPeer = new BannedPeer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BannedPeers$Type extends MessageType<BannedPeers> {
    constructor() {
        super("concordium.v2.BannedPeers", [
            { no: 1, name: "peers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BannedPeer }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BannedPeers
 */
export const BannedPeers = new BannedPeers$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerToBan$Type extends MessageType<PeerToBan> {
    constructor() {
        super("concordium.v2.PeerToBan", [
            { no: 1, name: "ip_address", kind: "message", T: () => IpAddress }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PeerToBan
 */
export const PeerToBan = new PeerToBan$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DumpRequest$Type extends MessageType<DumpRequest> {
    constructor() {
        super("concordium.v2.DumpRequest", [
            { no: 1, name: "file", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "raw", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DumpRequest
 */
export const DumpRequest = new DumpRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeersInfo$Type extends MessageType<PeersInfo> {
    constructor() {
        super("concordium.v2.PeersInfo", [
            { no: 1, name: "peers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PeersInfo_Peer }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PeersInfo
 */
export const PeersInfo = new PeersInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeersInfo_Peer$Type extends MessageType<PeersInfo_Peer> {
    constructor() {
        super("concordium.v2.PeersInfo.Peer", [
            { no: 1, name: "peer_id", kind: "message", T: () => PeerId },
            { no: 2, name: "socket_address", kind: "message", T: () => IpSocketAddress },
            { no: 3, name: "network_stats", kind: "message", T: () => PeersInfo_Peer_NetworkStats },
            { no: 4, name: "bootstrapper", kind: "message", oneof: "consensusInfo", T: () => Empty },
            { no: 5, name: "node_catchup_status", kind: "enum", oneof: "consensusInfo", T: () => ["concordium.v2.PeersInfo.Peer.CatchupStatus", PeersInfo_Peer_CatchupStatus] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PeersInfo.Peer
 */
export const PeersInfo_Peer = new PeersInfo_Peer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeersInfo_Peer_NetworkStats$Type extends MessageType<PeersInfo_Peer_NetworkStats> {
    constructor() {
        super("concordium.v2.PeersInfo.Peer.NetworkStats", [
            { no: 2, name: "packets_sent", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "packets_received", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "latency", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PeersInfo.Peer.NetworkStats
 */
export const PeersInfo_Peer_NetworkStats = new PeersInfo_Peer_NetworkStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeInfo$Type extends MessageType<NodeInfo> {
    constructor() {
        super("concordium.v2.NodeInfo", [
            { no: 1, name: "peer_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "local_time", kind: "message", T: () => Timestamp },
            { no: 4, name: "peer_uptime", kind: "message", T: () => Duration },
            { no: 5, name: "network_info", kind: "message", T: () => NodeInfo_NetworkInfo },
            { no: 6, name: "bootstrapper", kind: "message", oneof: "details", T: () => Empty },
            { no: 7, name: "node", kind: "message", oneof: "details", T: () => NodeInfo_Node }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.NodeInfo
 */
export const NodeInfo = new NodeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeInfo_NetworkInfo$Type extends MessageType<NodeInfo_NetworkInfo> {
    constructor() {
        super("concordium.v2.NodeInfo.NetworkInfo", [
            { no: 1, name: "node_id", kind: "message", T: () => PeerId },
            { no: 2, name: "peer_total_sent", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "peer_total_received", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "avg_bps_in", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "avg_bps_out", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.NodeInfo.NetworkInfo
 */
export const NodeInfo_NetworkInfo = new NodeInfo_NetworkInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeInfo_BakerConsensusInfo$Type extends MessageType<NodeInfo_BakerConsensusInfo> {
    constructor() {
        super("concordium.v2.NodeInfo.BakerConsensusInfo", [
            { no: 1, name: "baker_id", kind: "message", T: () => BakerId },
            { no: 2, name: "passive_committee_info", kind: "enum", oneof: "status", T: () => ["concordium.v2.NodeInfo.BakerConsensusInfo.PassiveCommitteeInfo", NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo] },
            { no: 3, name: "active_baker_committee_info", kind: "message", oneof: "status", T: () => NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo },
            { no: 4, name: "active_finalizer_committee_info", kind: "message", oneof: "status", T: () => NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.NodeInfo.BakerConsensusInfo
 */
export const NodeInfo_BakerConsensusInfo = new NodeInfo_BakerConsensusInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo$Type extends MessageType<NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo> {
    constructor() {
        super("concordium.v2.NodeInfo.BakerConsensusInfo.ActiveBakerCommitteeInfo", []);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.NodeInfo.BakerConsensusInfo.ActiveBakerCommitteeInfo
 */
export const NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo = new NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo$Type extends MessageType<NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo> {
    constructor() {
        super("concordium.v2.NodeInfo.BakerConsensusInfo.ActiveFinalizerCommitteeInfo", []);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.NodeInfo.BakerConsensusInfo.ActiveFinalizerCommitteeInfo
 */
export const NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo = new NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeInfo_Node$Type extends MessageType<NodeInfo_Node> {
    constructor() {
        super("concordium.v2.NodeInfo.Node", [
            { no: 1, name: "not_running", kind: "message", oneof: "consensusStatus", T: () => Empty },
            { no: 2, name: "passive", kind: "message", oneof: "consensusStatus", T: () => Empty },
            { no: 3, name: "active", kind: "message", oneof: "consensusStatus", T: () => NodeInfo_BakerConsensusInfo }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.NodeInfo.Node
 */
export const NodeInfo_Node = new NodeInfo_Node$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendBlockItemRequest$Type extends MessageType<SendBlockItemRequest> {
    constructor() {
        super("concordium.v2.SendBlockItemRequest", [
            { no: 1, name: "account_transaction", kind: "message", oneof: "blockItem", T: () => AccountTransaction },
            { no: 2, name: "credential_deployment", kind: "message", oneof: "blockItem", T: () => CredentialDeployment },
            { no: 3, name: "update_instruction", kind: "message", oneof: "blockItem", T: () => UpdateInstruction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.SendBlockItemRequest
 */
export const SendBlockItemRequest = new SendBlockItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CredentialDeployment$Type extends MessageType<CredentialDeployment> {
    constructor() {
        super("concordium.v2.CredentialDeployment", [
            { no: 1, name: "message_expiry", kind: "message", T: () => TransactionTime },
            { no: 2, name: "raw_payload", kind: "scalar", oneof: "payload", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.CredentialDeployment
 */
export const CredentialDeployment = new CredentialDeployment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Signature$Type extends MessageType<Signature> {
    constructor() {
        super("concordium.v2.Signature", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.Signature
 */
export const Signature = new Signature$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignatureMap$Type extends MessageType<SignatureMap> {
    constructor() {
        super("concordium.v2.SignatureMap", [
            { no: 1, name: "signatures", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => Signature } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.SignatureMap
 */
export const SignatureMap = new SignatureMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountSignatureMap$Type extends MessageType<AccountSignatureMap> {
    constructor() {
        super("concordium.v2.AccountSignatureMap", [
            { no: 1, name: "signatures", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => Signature } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountSignatureMap
 */
export const AccountSignatureMap = new AccountSignatureMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionSignature$Type extends MessageType<AccountTransactionSignature> {
    constructor() {
        super("concordium.v2.AccountTransactionSignature", [
            { no: 1, name: "signatures", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => AccountSignatureMap } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionSignature
 */
export const AccountTransactionSignature = new AccountTransactionSignature$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionHeader$Type extends MessageType<AccountTransactionHeader> {
    constructor() {
        super("concordium.v2.AccountTransactionHeader", [
            { no: 1, name: "sender", kind: "message", T: () => AccountAddress },
            { no: 2, name: "sequence_number", kind: "message", T: () => SequenceNumber },
            { no: 3, name: "energy_amount", kind: "message", T: () => Energy },
            { no: 5, name: "expiry", kind: "message", T: () => TransactionTime }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionHeader
 */
export const AccountTransactionHeader = new AccountTransactionHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitContractPayload$Type extends MessageType<InitContractPayload> {
    constructor() {
        super("concordium.v2.InitContractPayload", [
            { no: 1, name: "amount", kind: "message", T: () => Amount },
            { no: 2, name: "module_ref", kind: "message", T: () => ModuleRef },
            { no: 3, name: "init_name", kind: "message", T: () => InitName },
            { no: 4, name: "parameter", kind: "message", T: () => Parameter }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.InitContractPayload
 */
export const InitContractPayload = new InitContractPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateContractPayload$Type extends MessageType<UpdateContractPayload> {
    constructor() {
        super("concordium.v2.UpdateContractPayload", [
            { no: 1, name: "amount", kind: "message", T: () => Amount },
            { no: 2, name: "address", kind: "message", T: () => ContractAddress },
            { no: 3, name: "receive_name", kind: "message", T: () => ReceiveName },
            { no: 4, name: "parameter", kind: "message", T: () => Parameter }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.UpdateContractPayload
 */
export const UpdateContractPayload = new UpdateContractPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferPayload$Type extends MessageType<TransferPayload> {
    constructor() {
        super("concordium.v2.TransferPayload", [
            { no: 1, name: "amount", kind: "message", T: () => Amount },
            { no: 2, name: "receiver", kind: "message", T: () => AccountAddress }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.TransferPayload
 */
export const TransferPayload = new TransferPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferWithMemoPayload$Type extends MessageType<TransferWithMemoPayload> {
    constructor() {
        super("concordium.v2.TransferWithMemoPayload", [
            { no: 1, name: "amount", kind: "message", T: () => Amount },
            { no: 2, name: "receiver", kind: "message", T: () => AccountAddress },
            { no: 3, name: "memo", kind: "message", T: () => Memo }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.TransferWithMemoPayload
 */
export const TransferWithMemoPayload = new TransferWithMemoPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionPayload$Type extends MessageType<AccountTransactionPayload> {
    constructor() {
        super("concordium.v2.AccountTransactionPayload", [
            { no: 1, name: "raw_payload", kind: "scalar", oneof: "payload", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "deploy_module", kind: "message", oneof: "payload", T: () => VersionedModuleSource },
            { no: 3, name: "init_contract", kind: "message", oneof: "payload", T: () => InitContractPayload },
            { no: 4, name: "update_contract", kind: "message", oneof: "payload", T: () => UpdateContractPayload },
            { no: 5, name: "transfer", kind: "message", oneof: "payload", T: () => TransferPayload },
            { no: 6, name: "transfer_with_memo", kind: "message", oneof: "payload", T: () => TransferWithMemoPayload },
            { no: 7, name: "register_data", kind: "message", oneof: "payload", T: () => RegisteredData }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionPayload
 */
export const AccountTransactionPayload = new AccountTransactionPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreAccountTransaction$Type extends MessageType<PreAccountTransaction> {
    constructor() {
        super("concordium.v2.PreAccountTransaction", [
            { no: 1, name: "header", kind: "message", T: () => AccountTransactionHeader },
            { no: 2, name: "payload", kind: "message", T: () => AccountTransactionPayload }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.PreAccountTransaction
 */
export const PreAccountTransaction = new PreAccountTransaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransaction$Type extends MessageType<AccountTransaction> {
    constructor() {
        super("concordium.v2.AccountTransaction", [
            { no: 1, name: "signature", kind: "message", T: () => AccountTransactionSignature },
            { no: 2, name: "header", kind: "message", T: () => AccountTransactionHeader },
            { no: 3, name: "payload", kind: "message", T: () => AccountTransactionPayload }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransaction
 */
export const AccountTransaction = new AccountTransaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateInstructionHeader$Type extends MessageType<UpdateInstructionHeader> {
    constructor() {
        super("concordium.v2.UpdateInstructionHeader", [
            { no: 1, name: "sequence_number", kind: "message", T: () => UpdateSequenceNumber },
            { no: 2, name: "effective_time", kind: "message", T: () => TransactionTime },
            { no: 3, name: "timeout", kind: "message", T: () => TransactionTime }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.UpdateInstructionHeader
 */
export const UpdateInstructionHeader = new UpdateInstructionHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateInstructionPayload$Type extends MessageType<UpdateInstructionPayload> {
    constructor() {
        super("concordium.v2.UpdateInstructionPayload", [
            { no: 3, name: "raw_payload", kind: "scalar", oneof: "payload", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.UpdateInstructionPayload
 */
export const UpdateInstructionPayload = new UpdateInstructionPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateInstruction$Type extends MessageType<UpdateInstruction> {
    constructor() {
        super("concordium.v2.UpdateInstruction", [
            { no: 1, name: "signatures", kind: "message", T: () => SignatureMap },
            { no: 2, name: "header", kind: "message", T: () => UpdateInstructionHeader },
            { no: 3, name: "payload", kind: "message", T: () => UpdateInstructionPayload }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.UpdateInstruction
 */
export const UpdateInstruction = new UpdateInstruction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountTransactionSignHash$Type extends MessageType<AccountTransactionSignHash> {
    constructor() {
        super("concordium.v2.AccountTransactionSignHash", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.AccountTransactionSignHash
 */
export const AccountTransactionSignHash = new AccountTransactionSignHash$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CredentialsPerBlockLimit$Type extends MessageType<CredentialsPerBlockLimit> {
    constructor() {
        super("concordium.v2.CredentialsPerBlockLimit", [
            { no: 1, name: "value", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.CredentialsPerBlockLimit
 */
export const CredentialsPerBlockLimit = new CredentialsPerBlockLimit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChainParametersV0$Type extends MessageType<ChainParametersV0> {
    constructor() {
        super("concordium.v2.ChainParametersV0", [
            { no: 1, name: "election_difficulty", kind: "message", T: () => ElectionDifficulty },
            { no: 2, name: "euro_per_energy", kind: "message", T: () => ExchangeRate },
            { no: 3, name: "micro_ccd_per_euro", kind: "message", T: () => ExchangeRate },
            { no: 4, name: "baker_cooldown_epochs", kind: "message", T: () => Epoch },
            { no: 5, name: "account_creation_limit", kind: "message", T: () => CredentialsPerBlockLimit },
            { no: 6, name: "mint_distribution", kind: "message", T: () => MintDistributionCpv0 },
            { no: 7, name: "transaction_fee_distribution", kind: "message", T: () => TransactionFeeDistribution },
            { no: 8, name: "gas_rewards", kind: "message", T: () => GasRewards },
            { no: 9, name: "foundation_account", kind: "message", T: () => AccountAddress },
            { no: 10, name: "minimum_threshold_for_baking", kind: "message", T: () => Amount },
            { no: 11, name: "root_keys", kind: "message", T: () => HigherLevelKeys },
            { no: 12, name: "level1_keys", kind: "message", T: () => HigherLevelKeys },
            { no: 13, name: "level2_keys", kind: "message", T: () => AuthorizationsV0 }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ChainParametersV0
 */
export const ChainParametersV0 = new ChainParametersV0$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChainParametersV1$Type extends MessageType<ChainParametersV1> {
    constructor() {
        super("concordium.v2.ChainParametersV1", [
            { no: 1, name: "election_difficulty", kind: "message", T: () => ElectionDifficulty },
            { no: 2, name: "euro_per_energy", kind: "message", T: () => ExchangeRate },
            { no: 3, name: "micro_ccd_per_euro", kind: "message", T: () => ExchangeRate },
            { no: 4, name: "cooldown_parameters", kind: "message", T: () => CooldownParametersCpv1 },
            { no: 5, name: "time_parameters", kind: "message", T: () => TimeParametersCpv1 },
            { no: 6, name: "account_creation_limit", kind: "message", T: () => CredentialsPerBlockLimit },
            { no: 7, name: "mint_distribution", kind: "message", T: () => MintDistributionCpv1 },
            { no: 8, name: "transaction_fee_distribution", kind: "message", T: () => TransactionFeeDistribution },
            { no: 9, name: "gas_rewards", kind: "message", T: () => GasRewards },
            { no: 10, name: "foundation_account", kind: "message", T: () => AccountAddress },
            { no: 11, name: "pool_parameters", kind: "message", T: () => PoolParametersCpv1 },
            { no: 12, name: "root_keys", kind: "message", T: () => HigherLevelKeys },
            { no: 13, name: "level1_keys", kind: "message", T: () => HigherLevelKeys },
            { no: 14, name: "level2_keys", kind: "message", T: () => AuthorizationsV1 }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ChainParametersV1
 */
export const ChainParametersV1 = new ChainParametersV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChainParametersV2$Type extends MessageType<ChainParametersV2> {
    constructor() {
        super("concordium.v2.ChainParametersV2", [
            { no: 1, name: "consensus_parameters", kind: "message", T: () => ConsensusParametersV1 },
            { no: 2, name: "euro_per_energy", kind: "message", T: () => ExchangeRate },
            { no: 3, name: "micro_ccd_per_euro", kind: "message", T: () => ExchangeRate },
            { no: 4, name: "cooldown_parameters", kind: "message", T: () => CooldownParametersCpv1 },
            { no: 5, name: "time_parameters", kind: "message", T: () => TimeParametersCpv1 },
            { no: 6, name: "account_creation_limit", kind: "message", T: () => CredentialsPerBlockLimit },
            { no: 7, name: "mint_distribution", kind: "message", T: () => MintDistributionCpv1 },
            { no: 8, name: "transaction_fee_distribution", kind: "message", T: () => TransactionFeeDistribution },
            { no: 9, name: "gas_rewards", kind: "message", T: () => GasRewardsCpv2 },
            { no: 10, name: "foundation_account", kind: "message", T: () => AccountAddress },
            { no: 11, name: "pool_parameters", kind: "message", T: () => PoolParametersCpv1 },
            { no: 12, name: "root_keys", kind: "message", T: () => HigherLevelKeys },
            { no: 13, name: "level1_keys", kind: "message", T: () => HigherLevelKeys },
            { no: 14, name: "level2_keys", kind: "message", T: () => AuthorizationsV1 },
            { no: 15, name: "finalization_committee_parameters", kind: "message", T: () => FinalizationCommitteeParameters }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ChainParametersV2
 */
export const ChainParametersV2 = new ChainParametersV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChainParameters$Type extends MessageType<ChainParameters> {
    constructor() {
        super("concordium.v2.ChainParameters", [
            { no: 1, name: "v0", kind: "message", oneof: "parameters", T: () => ChainParametersV0 },
            { no: 2, name: "v1", kind: "message", oneof: "parameters", T: () => ChainParametersV1 },
            { no: 3, name: "v2", kind: "message", oneof: "parameters", T: () => ChainParametersV2 }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.ChainParameters
 */
export const ChainParameters = new ChainParameters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinalizationSummaryParty$Type extends MessageType<FinalizationSummaryParty> {
    constructor() {
        super("concordium.v2.FinalizationSummaryParty", [
            { no: 1, name: "baker", kind: "message", T: () => BakerId },
            { no: 2, name: "weight", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "signed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.FinalizationSummaryParty
 */
export const FinalizationSummaryParty = new FinalizationSummaryParty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinalizationIndex$Type extends MessageType<FinalizationIndex> {
    constructor() {
        super("concordium.v2.FinalizationIndex", [
            { no: 1, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.FinalizationIndex
 */
export const FinalizationIndex = new FinalizationIndex$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinalizationSummary$Type extends MessageType<FinalizationSummary> {
    constructor() {
        super("concordium.v2.FinalizationSummary", [
            { no: 1, name: "block", kind: "message", T: () => BlockHash },
            { no: 2, name: "index", kind: "message", T: () => FinalizationIndex },
            { no: 3, name: "delay", kind: "message", T: () => BlockHeight },
            { no: 4, name: "finalizers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FinalizationSummaryParty }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.FinalizationSummary
 */
export const FinalizationSummary = new FinalizationSummary$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockFinalizationSummary$Type extends MessageType<BlockFinalizationSummary> {
    constructor() {
        super("concordium.v2.BlockFinalizationSummary", [
            { no: 1, name: "none", kind: "message", oneof: "summary", T: () => Empty },
            { no: 2, name: "record", kind: "message", oneof: "summary", T: () => FinalizationSummary }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockFinalizationSummary
 */
export const BlockFinalizationSummary = new BlockFinalizationSummary$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockItem$Type extends MessageType<BlockItem> {
    constructor() {
        super("concordium.v2.BlockItem", [
            { no: 1, name: "hash", kind: "message", T: () => TransactionHash },
            { no: 2, name: "account_transaction", kind: "message", oneof: "blockItem", T: () => AccountTransaction },
            { no: 3, name: "credential_deployment", kind: "message", oneof: "blockItem", T: () => CredentialDeployment },
            { no: 4, name: "update_instruction", kind: "message", oneof: "blockItem", T: () => UpdateInstruction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockItem
 */
export const BlockItem = new BlockItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BakerRewardPeriodInfo$Type extends MessageType<BakerRewardPeriodInfo> {
    constructor() {
        super("concordium.v2.BakerRewardPeriodInfo", [
            { no: 1, name: "baker", kind: "message", T: () => BakerInfo },
            { no: 2, name: "effective_stake", kind: "message", T: () => Amount },
            { no: 3, name: "commission_rates", kind: "message", T: () => CommissionRates },
            { no: 4, name: "equity_capital", kind: "message", T: () => Amount },
            { no: 5, name: "delegated_capital", kind: "message", T: () => Amount },
            { no: 6, name: "is_finalizer", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BakerRewardPeriodInfo
 */
export const BakerRewardPeriodInfo = new BakerRewardPeriodInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuorumSignature$Type extends MessageType<QuorumSignature> {
    constructor() {
        super("concordium.v2.QuorumSignature", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.QuorumSignature
 */
export const QuorumSignature = new QuorumSignature$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuorumCertificate$Type extends MessageType<QuorumCertificate> {
    constructor() {
        super("concordium.v2.QuorumCertificate", [
            { no: 1, name: "block_hash", kind: "message", T: () => BlockHash },
            { no: 2, name: "round", kind: "message", T: () => Round },
            { no: 3, name: "epoch", kind: "message", T: () => Epoch },
            { no: 4, name: "aggregate_signature", kind: "message", T: () => QuorumSignature },
            { no: 5, name: "signatories", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BakerId }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.QuorumCertificate
 */
export const QuorumCertificate = new QuorumCertificate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinalizerRound$Type extends MessageType<FinalizerRound> {
    constructor() {
        super("concordium.v2.FinalizerRound", [
            { no: 1, name: "round", kind: "message", T: () => Round },
            { no: 2, name: "finalizers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BakerId }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.FinalizerRound
 */
export const FinalizerRound = new FinalizerRound$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeoutSignature$Type extends MessageType<TimeoutSignature> {
    constructor() {
        super("concordium.v2.TimeoutSignature", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.TimeoutSignature
 */
export const TimeoutSignature = new TimeoutSignature$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeoutCertificate$Type extends MessageType<TimeoutCertificate> {
    constructor() {
        super("concordium.v2.TimeoutCertificate", [
            { no: 1, name: "round", kind: "message", T: () => Round },
            { no: 2, name: "min_epoch", kind: "message", T: () => Epoch },
            { no: 3, name: "qc_rounds_first_epoch", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FinalizerRound },
            { no: 4, name: "qc_rounds_second_epoch", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FinalizerRound },
            { no: 5, name: "aggregate_signature", kind: "message", T: () => TimeoutSignature }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.TimeoutCertificate
 */
export const TimeoutCertificate = new TimeoutCertificate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuccessorProof$Type extends MessageType<SuccessorProof> {
    constructor() {
        super("concordium.v2.SuccessorProof", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.SuccessorProof
 */
export const SuccessorProof = new SuccessorProof$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EpochFinalizationEntry$Type extends MessageType<EpochFinalizationEntry> {
    constructor() {
        super("concordium.v2.EpochFinalizationEntry", [
            { no: 1, name: "finalized_qc", kind: "message", T: () => QuorumCertificate },
            { no: 2, name: "successor_qc", kind: "message", T: () => QuorumCertificate },
            { no: 3, name: "successor_proof", kind: "message", T: () => SuccessorProof }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.EpochFinalizationEntry
 */
export const EpochFinalizationEntry = new EpochFinalizationEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockCertificates$Type extends MessageType<BlockCertificates> {
    constructor() {
        super("concordium.v2.BlockCertificates", [
            { no: 1, name: "quorum_certificate", kind: "message", T: () => QuorumCertificate },
            { no: 2, name: "timeout_certificate", kind: "message", T: () => TimeoutCertificate },
            { no: 3, name: "epoch_finalization_entry", kind: "message", T: () => EpochFinalizationEntry }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.BlockCertificates
 */
export const BlockCertificates = new BlockCertificates$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinningBaker$Type extends MessageType<WinningBaker> {
    constructor() {
        super("concordium.v2.WinningBaker", [
            { no: 1, name: "round", kind: "message", T: () => Round },
            { no: 2, name: "winner", kind: "message", T: () => BakerId },
            { no: 3, name: "present", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.WinningBaker
 */
export const WinningBaker = new WinningBaker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunRequest$Type extends MessageType<DryRunRequest> {
    constructor() {
        super("concordium.v2.DryRunRequest", [
            { no: 1, name: "load_block_state", kind: "message", oneof: "request", T: () => BlockHashInput },
            { no: 2, name: "state_query", kind: "message", oneof: "request", T: () => DryRunStateQuery },
            { no: 3, name: "state_operation", kind: "message", oneof: "request", T: () => DryRunStateOperation }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunRequest
 */
export const DryRunRequest = new DryRunRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunStateQuery$Type extends MessageType<DryRunStateQuery> {
    constructor() {
        super("concordium.v2.DryRunStateQuery", [
            { no: 1, name: "get_account_info", kind: "message", oneof: "query", T: () => AccountIdentifierInput },
            { no: 2, name: "get_instance_info", kind: "message", oneof: "query", T: () => ContractAddress },
            { no: 3, name: "invoke_instance", kind: "message", oneof: "query", T: () => DryRunInvokeInstance }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunStateQuery
 */
export const DryRunStateQuery = new DryRunStateQuery$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunInvokeInstance$Type extends MessageType<DryRunInvokeInstance> {
    constructor() {
        super("concordium.v2.DryRunInvokeInstance", [
            { no: 1, name: "invoker", kind: "message", T: () => Address },
            { no: 2, name: "instance", kind: "message", T: () => ContractAddress },
            { no: 3, name: "amount", kind: "message", T: () => Amount },
            { no: 4, name: "entrypoint", kind: "message", T: () => ReceiveName },
            { no: 5, name: "parameter", kind: "message", T: () => Parameter },
            { no: 6, name: "energy", kind: "message", T: () => Energy }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunInvokeInstance
 */
export const DryRunInvokeInstance = new DryRunInvokeInstance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunStateOperation$Type extends MessageType<DryRunStateOperation> {
    constructor() {
        super("concordium.v2.DryRunStateOperation", [
            { no: 1, name: "set_timestamp", kind: "message", oneof: "operation", T: () => Timestamp },
            { no: 2, name: "mint_to_account", kind: "message", oneof: "operation", T: () => DryRunMintToAccount },
            { no: 3, name: "run_transaction", kind: "message", oneof: "operation", T: () => DryRunTransaction }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunStateOperation
 */
export const DryRunStateOperation = new DryRunStateOperation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunMintToAccount$Type extends MessageType<DryRunMintToAccount> {
    constructor() {
        super("concordium.v2.DryRunMintToAccount", [
            { no: 1, name: "account", kind: "message", T: () => AccountAddress },
            { no: 2, name: "amount", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunMintToAccount
 */
export const DryRunMintToAccount = new DryRunMintToAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunTransaction$Type extends MessageType<DryRunTransaction> {
    constructor() {
        super("concordium.v2.DryRunTransaction", [
            { no: 1, name: "sender", kind: "message", T: () => AccountAddress },
            { no: 2, name: "energy_amount", kind: "message", T: () => Energy },
            { no: 3, name: "payload", kind: "message", T: () => AccountTransactionPayload },
            { no: 4, name: "signatures", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DryRunSignature }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunTransaction
 */
export const DryRunTransaction = new DryRunTransaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunSignature$Type extends MessageType<DryRunSignature> {
    constructor() {
        super("concordium.v2.DryRunSignature", [
            { no: 1, name: "credential", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "key", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunSignature
 */
export const DryRunSignature = new DryRunSignature$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunResponse$Type extends MessageType<DryRunResponse> {
    constructor() {
        super("concordium.v2.DryRunResponse", [
            { no: 1, name: "error", kind: "message", oneof: "response", T: () => DryRunErrorResponse },
            { no: 2, name: "success", kind: "message", oneof: "response", T: () => DryRunSuccessResponse },
            { no: 3, name: "quota_remaining", kind: "message", T: () => Energy }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunResponse
 */
export const DryRunResponse = new DryRunResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunErrorResponse$Type extends MessageType<DryRunErrorResponse> {
    constructor() {
        super("concordium.v2.DryRunErrorResponse", [
            { no: 1, name: "no_state", kind: "message", oneof: "error", T: () => DryRunErrorResponse_NoState },
            { no: 2, name: "block_not_found", kind: "message", oneof: "error", T: () => DryRunErrorResponse_BlockNotFound },
            { no: 3, name: "account_not_found", kind: "message", oneof: "error", T: () => DryRunErrorResponse_AccountNotFound },
            { no: 4, name: "instance_not_found", kind: "message", oneof: "error", T: () => DryRunErrorResponse_InstanceNotFound },
            { no: 5, name: "amount_over_limit", kind: "message", oneof: "error", T: () => DryRunErrorResponse_AmountOverLimit },
            { no: 6, name: "balance_insufficient", kind: "message", oneof: "error", T: () => DryRunErrorResponse_BalanceInsufficient },
            { no: 8, name: "energy_insufficient", kind: "message", oneof: "error", T: () => DryRunErrorResponse_EnergyInsufficient },
            { no: 9, name: "invoke_failed", kind: "message", oneof: "error", T: () => DryRunErrorResponse_InvokeFailure }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse
 */
export const DryRunErrorResponse = new DryRunErrorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunErrorResponse_NoState$Type extends MessageType<DryRunErrorResponse_NoState> {
    constructor() {
        super("concordium.v2.DryRunErrorResponse.NoState", []);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.NoState
 */
export const DryRunErrorResponse_NoState = new DryRunErrorResponse_NoState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunErrorResponse_BlockNotFound$Type extends MessageType<DryRunErrorResponse_BlockNotFound> {
    constructor() {
        super("concordium.v2.DryRunErrorResponse.BlockNotFound", []);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.BlockNotFound
 */
export const DryRunErrorResponse_BlockNotFound = new DryRunErrorResponse_BlockNotFound$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunErrorResponse_AccountNotFound$Type extends MessageType<DryRunErrorResponse_AccountNotFound> {
    constructor() {
        super("concordium.v2.DryRunErrorResponse.AccountNotFound", []);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.AccountNotFound
 */
export const DryRunErrorResponse_AccountNotFound = new DryRunErrorResponse_AccountNotFound$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunErrorResponse_InstanceNotFound$Type extends MessageType<DryRunErrorResponse_InstanceNotFound> {
    constructor() {
        super("concordium.v2.DryRunErrorResponse.InstanceNotFound", []);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.InstanceNotFound
 */
export const DryRunErrorResponse_InstanceNotFound = new DryRunErrorResponse_InstanceNotFound$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunErrorResponse_AmountOverLimit$Type extends MessageType<DryRunErrorResponse_AmountOverLimit> {
    constructor() {
        super("concordium.v2.DryRunErrorResponse.AmountOverLimit", [
            { no: 1, name: "amount_limit", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.AmountOverLimit
 */
export const DryRunErrorResponse_AmountOverLimit = new DryRunErrorResponse_AmountOverLimit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunErrorResponse_BalanceInsufficient$Type extends MessageType<DryRunErrorResponse_BalanceInsufficient> {
    constructor() {
        super("concordium.v2.DryRunErrorResponse.BalanceInsufficient", [
            { no: 1, name: "required_amount", kind: "message", T: () => Amount },
            { no: 2, name: "available_amount", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.BalanceInsufficient
 */
export const DryRunErrorResponse_BalanceInsufficient = new DryRunErrorResponse_BalanceInsufficient$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunErrorResponse_EnergyInsufficient$Type extends MessageType<DryRunErrorResponse_EnergyInsufficient> {
    constructor() {
        super("concordium.v2.DryRunErrorResponse.EnergyInsufficient", [
            { no: 1, name: "energy_required", kind: "message", T: () => Energy }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.EnergyInsufficient
 */
export const DryRunErrorResponse_EnergyInsufficient = new DryRunErrorResponse_EnergyInsufficient$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunErrorResponse_InvokeFailure$Type extends MessageType<DryRunErrorResponse_InvokeFailure> {
    constructor() {
        super("concordium.v2.DryRunErrorResponse.InvokeFailure", [
            { no: 1, name: "return_value", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "used_energy", kind: "message", T: () => Energy },
            { no: 3, name: "reason", kind: "message", T: () => RejectReason }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.InvokeFailure
 */
export const DryRunErrorResponse_InvokeFailure = new DryRunErrorResponse_InvokeFailure$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunSuccessResponse$Type extends MessageType<DryRunSuccessResponse> {
    constructor() {
        super("concordium.v2.DryRunSuccessResponse", [
            { no: 1, name: "block_state_loaded", kind: "message", oneof: "response", T: () => DryRunSuccessResponse_BlockStateLoaded },
            { no: 2, name: "account_info", kind: "message", oneof: "response", T: () => AccountInfo },
            { no: 3, name: "instance_info", kind: "message", oneof: "response", T: () => InstanceInfo },
            { no: 4, name: "invoke_succeeded", kind: "message", oneof: "response", T: () => DryRunSuccessResponse_InvokeSuccess },
            { no: 5, name: "timestamp_set", kind: "message", oneof: "response", T: () => DryRunSuccessResponse_TimestampSet },
            { no: 6, name: "minted_to_account", kind: "message", oneof: "response", T: () => DryRunSuccessResponse_MintedToAccount },
            { no: 7, name: "transaction_executed", kind: "message", oneof: "response", T: () => DryRunSuccessResponse_TransactionExecuted }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunSuccessResponse
 */
export const DryRunSuccessResponse = new DryRunSuccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunSuccessResponse_BlockStateLoaded$Type extends MessageType<DryRunSuccessResponse_BlockStateLoaded> {
    constructor() {
        super("concordium.v2.DryRunSuccessResponse.BlockStateLoaded", [
            { no: 1, name: "current_timestamp", kind: "message", T: () => Timestamp },
            { no: 2, name: "block_hash", kind: "message", T: () => BlockHash },
            { no: 3, name: "protocol_version", kind: "enum", T: () => ["concordium.v2.ProtocolVersion", ProtocolVersion] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunSuccessResponse.BlockStateLoaded
 */
export const DryRunSuccessResponse_BlockStateLoaded = new DryRunSuccessResponse_BlockStateLoaded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunSuccessResponse_TimestampSet$Type extends MessageType<DryRunSuccessResponse_TimestampSet> {
    constructor() {
        super("concordium.v2.DryRunSuccessResponse.TimestampSet", []);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunSuccessResponse.TimestampSet
 */
export const DryRunSuccessResponse_TimestampSet = new DryRunSuccessResponse_TimestampSet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunSuccessResponse_MintedToAccount$Type extends MessageType<DryRunSuccessResponse_MintedToAccount> {
    constructor() {
        super("concordium.v2.DryRunSuccessResponse.MintedToAccount", []);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunSuccessResponse.MintedToAccount
 */
export const DryRunSuccessResponse_MintedToAccount = new DryRunSuccessResponse_MintedToAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunSuccessResponse_TransactionExecuted$Type extends MessageType<DryRunSuccessResponse_TransactionExecuted> {
    constructor() {
        super("concordium.v2.DryRunSuccessResponse.TransactionExecuted", [
            { no: 1, name: "energy_cost", kind: "message", T: () => Energy },
            { no: 2, name: "details", kind: "message", T: () => AccountTransactionDetails },
            { no: 3, name: "return_value", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunSuccessResponse.TransactionExecuted
 */
export const DryRunSuccessResponse_TransactionExecuted = new DryRunSuccessResponse_TransactionExecuted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DryRunSuccessResponse_InvokeSuccess$Type extends MessageType<DryRunSuccessResponse_InvokeSuccess> {
    constructor() {
        super("concordium.v2.DryRunSuccessResponse.InvokeSuccess", [
            { no: 1, name: "return_value", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "used_energy", kind: "message", T: () => Energy },
            { no: 3, name: "effects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractTraceElement }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message concordium.v2.DryRunSuccessResponse.InvokeSuccess
 */
export const DryRunSuccessResponse_InvokeSuccess = new DryRunSuccessResponse_InvokeSuccess$Type();
