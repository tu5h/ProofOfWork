// @generated by protobuf-ts 2.9.1 with parameter optimize_code_size
// @generated from protobuf file "v2/concordium/service.proto" (package "concordium.v2", syntax proto3)
// tslint:disable
import { DryRunResponse } from "./types.js";
import { DryRunRequest } from "./types.js";
import { WinningBaker } from "./types.js";
import { EpochRequest } from "./types.js";
import { BlockCertificates } from "./types.js";
import { BakerRewardPeriodInfo } from "./types.js";
import { BlockItem } from "./types.js";
import { BlockFinalizationSummary } from "./types.js";
import { ChainParameters } from "./types.js";
import { AccountTransactionSignHash } from "./types.js";
import { PreAccountTransaction } from "./types.js";
import { SendBlockItemRequest } from "./types.js";
import { NodeInfo } from "./types.js";
import { PeersInfo } from "./types.js";
import { DumpRequest } from "./types.js";
import { BannedPeer } from "./types.js";
import { PeerToBan } from "./types.js";
import { BannedPeers } from "./types.js";
import { IpSocketAddress } from "./types.js";
import { Timestamp } from "./types.js";
import { NextUpdateSequenceNumbers } from "./types.js";
import { PendingUpdate } from "./types.js";
import { BlockSpecialEvent } from "./types.js";
import { BlockItemSummary } from "./types.js";
import { ArInfo } from "./types.js";
import { IpInfo } from "./types.js";
import { ElectionInfo } from "./types.js";
import { Branch } from "./types.js";
import { DelegatorRewardPeriodInfo } from "./types.js";
import { DelegatorInfo } from "./types.js";
import { GetPoolDelegatorsRequest } from "./types.js";
import { InvokeInstanceResponse } from "./types.js";
import { InvokeInstanceRequest } from "./types.js";
import { TokenomicsInfo } from "./types.js";
import { BlocksAtHeightResponse } from "./types.js";
import { BlocksAtHeightRequest } from "./types.js";
import { PassiveDelegationInfo } from "./types.js";
import { PoolInfoResponse } from "./types.js";
import { PoolInfoRequest } from "./types.js";
import { BakerId } from "./types.js";
import { BlockInfo } from "./types.js";
import { CryptographicParameters } from "./types.js";
import { BlockItemStatus } from "./types.js";
import { TransactionHash } from "./types.js";
import { ConsensusInfo } from "./types.js";
import { NextAccountSequenceNumber } from "./types.js";
import { InstanceStateValueAtKey } from "./types.js";
import { InstanceStateLookupRequest } from "./types.js";
import { InstanceStateKVPair } from "./types.js";
import { InstanceInfo } from "./types.js";
import { InstanceInfoRequest } from "./types.js";
import { ContractAddress } from "./types.js";
import { VersionedModuleSource } from "./types.js";
import { ModuleSourceRequest } from "./types.js";
import { BlockHash } from "./types.js";
import { AncestorsRequest } from "./types.js";
import { ModuleRef } from "./types.js";
import { AccountAddress } from "./types.js";
import { BlockHashInput } from "./types.js";
import { AccountInfo } from "./types.js";
import { AccountInfoRequest } from "./types.js";
import { FinalizedBlockInfo } from "./types.js";
import { ArrivedBlockInfo } from "./types.js";
import { Empty } from "./types.js";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
/**
 * @generated ServiceType for protobuf service concordium.v2.Queries
 */
export const Queries = new ServiceType("concordium.v2.Queries", [
    { name: "GetBlocks", serverStreaming: true, options: {}, I: Empty, O: ArrivedBlockInfo },
    { name: "GetFinalizedBlocks", serverStreaming: true, options: {}, I: Empty, O: FinalizedBlockInfo },
    { name: "GetAccountInfo", options: {}, I: AccountInfoRequest, O: AccountInfo },
    { name: "GetAccountList", serverStreaming: true, options: {}, I: BlockHashInput, O: AccountAddress },
    { name: "GetModuleList", serverStreaming: true, options: {}, I: BlockHashInput, O: ModuleRef },
    { name: "GetAncestors", serverStreaming: true, options: {}, I: AncestorsRequest, O: BlockHash },
    { name: "GetModuleSource", options: {}, I: ModuleSourceRequest, O: VersionedModuleSource },
    { name: "GetInstanceList", serverStreaming: true, options: {}, I: BlockHashInput, O: ContractAddress },
    { name: "GetInstanceInfo", options: {}, I: InstanceInfoRequest, O: InstanceInfo },
    { name: "GetInstanceState", serverStreaming: true, options: {}, I: InstanceInfoRequest, O: InstanceStateKVPair },
    { name: "InstanceStateLookup", options: {}, I: InstanceStateLookupRequest, O: InstanceStateValueAtKey },
    { name: "GetNextAccountSequenceNumber", options: {}, I: AccountAddress, O: NextAccountSequenceNumber },
    { name: "GetConsensusInfo", options: {}, I: Empty, O: ConsensusInfo },
    { name: "GetBlockItemStatus", options: {}, I: TransactionHash, O: BlockItemStatus },
    { name: "GetCryptographicParameters", options: {}, I: BlockHashInput, O: CryptographicParameters },
    { name: "GetBlockInfo", options: {}, I: BlockHashInput, O: BlockInfo },
    { name: "GetBakerList", serverStreaming: true, options: {}, I: BlockHashInput, O: BakerId },
    { name: "GetPoolInfo", options: {}, I: PoolInfoRequest, O: PoolInfoResponse },
    { name: "GetPassiveDelegationInfo", options: {}, I: BlockHashInput, O: PassiveDelegationInfo },
    { name: "GetBlocksAtHeight", options: {}, I: BlocksAtHeightRequest, O: BlocksAtHeightResponse },
    { name: "GetTokenomicsInfo", options: {}, I: BlockHashInput, O: TokenomicsInfo },
    { name: "InvokeInstance", options: {}, I: InvokeInstanceRequest, O: InvokeInstanceResponse },
    { name: "GetPoolDelegators", serverStreaming: true, options: {}, I: GetPoolDelegatorsRequest, O: DelegatorInfo },
    { name: "GetPoolDelegatorsRewardPeriod", serverStreaming: true, options: {}, I: GetPoolDelegatorsRequest, O: DelegatorRewardPeriodInfo },
    { name: "GetPassiveDelegators", serverStreaming: true, options: {}, I: BlockHashInput, O: DelegatorInfo },
    { name: "GetPassiveDelegatorsRewardPeriod", serverStreaming: true, options: {}, I: BlockHashInput, O: DelegatorRewardPeriodInfo },
    { name: "GetBranches", options: {}, I: Empty, O: Branch },
    { name: "GetElectionInfo", options: {}, I: BlockHashInput, O: ElectionInfo },
    { name: "GetIdentityProviders", serverStreaming: true, options: {}, I: BlockHashInput, O: IpInfo },
    { name: "GetAnonymityRevokers", serverStreaming: true, options: {}, I: BlockHashInput, O: ArInfo },
    { name: "GetAccountNonFinalizedTransactions", serverStreaming: true, options: {}, I: AccountAddress, O: TransactionHash },
    { name: "GetBlockTransactionEvents", serverStreaming: true, options: {}, I: BlockHashInput, O: BlockItemSummary },
    { name: "GetBlockSpecialEvents", serverStreaming: true, options: {}, I: BlockHashInput, O: BlockSpecialEvent },
    { name: "GetBlockPendingUpdates", serverStreaming: true, options: {}, I: BlockHashInput, O: PendingUpdate },
    { name: "GetNextUpdateSequenceNumbers", options: {}, I: BlockHashInput, O: NextUpdateSequenceNumbers },
    { name: "GetBakerEarliestWinTime", options: {}, I: BakerId, O: Timestamp },
    { name: "Shutdown", options: {}, I: Empty, O: Empty },
    { name: "PeerConnect", options: {}, I: IpSocketAddress, O: Empty },
    { name: "PeerDisconnect", options: {}, I: IpSocketAddress, O: Empty },
    { name: "GetBannedPeers", options: {}, I: Empty, O: BannedPeers },
    { name: "BanPeer", options: {}, I: PeerToBan, O: Empty },
    { name: "UnbanPeer", options: {}, I: BannedPeer, O: Empty },
    { name: "DumpStart", options: {}, I: DumpRequest, O: Empty },
    { name: "DumpStop", options: {}, I: Empty, O: Empty },
    { name: "GetPeersInfo", options: {}, I: Empty, O: PeersInfo },
    { name: "GetNodeInfo", options: {}, I: Empty, O: NodeInfo },
    { name: "SendBlockItem", options: {}, I: SendBlockItemRequest, O: TransactionHash },
    { name: "GetAccountTransactionSignHash", options: {}, I: PreAccountTransaction, O: AccountTransactionSignHash },
    { name: "GetBlockChainParameters", options: {}, I: BlockHashInput, O: ChainParameters },
    { name: "GetBlockFinalizationSummary", options: {}, I: BlockHashInput, O: BlockFinalizationSummary },
    { name: "GetBlockItems", serverStreaming: true, options: {}, I: BlockHashInput, O: BlockItem },
    { name: "GetBakersRewardPeriod", serverStreaming: true, options: {}, I: BlockHashInput, O: BakerRewardPeriodInfo },
    { name: "GetBlockCertificates", options: {}, I: BlockHashInput, O: BlockCertificates },
    { name: "GetWinningBakersEpoch", serverStreaming: true, options: {}, I: EpochRequest, O: WinningBaker },
    { name: "GetFirstBlockEpoch", options: {}, I: EpochRequest, O: BlockHash },
    { name: "DryRun", serverStreaming: true, clientStreaming: true, options: {}, I: DryRunRequest, O: DryRunResponse }
]);
//# sourceMappingURL=service.js.map