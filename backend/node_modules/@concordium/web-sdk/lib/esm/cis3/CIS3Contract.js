import { CISContract, ContractDryRun, } from '../GenericContract.js';
import { ensureMatchesInput } from '../deserializationHelpers.js';
import * as EntrypointName from '../types/EntrypointName.js';
import { makeDynamicFunction } from '../util.js';
import { deserializeCIS3SupportsPermitResponse, formatCIS3PermitParam, serializeCIS3PermitParam, serializeCIS3SupportsPermitQueryParams, } from './util.js';
/**
 * Contains methods for performing dry-run invocations of update instructions on CIS3 smart contracts.
 */
class CIS3DryRun extends ContractDryRun {
    /**
     * Performs a dry-run invocation of the `permit` entrypoint.
     *
     * @param {AccountAddress.Type | ContractAddress.Type} sender - The address of the sender of the transaction.
     * @param {CIS3.PermitParam} params - The parameters for the `permit` entrypoint.
     * @param {BlockHash.Type} blockHash - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.
     *
     * @returns {InvokeContractResult} The contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.
     */
    permit(sender, params, blockHash) {
        return this.invokeMethod(EntrypointName.fromStringUnchecked('permit'), sender, serializeCIS3PermitParam, params, blockHash);
    }
}
/**
 * Defines methods for interacting with CIS3 contracts.
 */
export class CIS3Contract extends CISContract {
    constructor() {
        super(...arguments);
        /**
         * Parameter schema for the `permit` CIS3 entrypoint.
         */
        this.schema = {
            /** Parameter schema for `permit` entrypoint */
            permit: 'FAADAAAACQAAAHNpZ25hdHVyZRIAAhIAAhUBAAAABwAAAEVkMjU1MTkBAQAAAB5AAAAABgAAAHNpZ25lcgsHAAAAbWVzc2FnZRQABQAAABAAAABjb250cmFjdF9hZGRyZXNzDAUAAABub25jZQUJAAAAdGltZXN0YW1wDQsAAABlbnRyeV9wb2ludBYBBwAAAHBheWxvYWQQAQI=',
        };
    }
    /**
     * Creates a new `CIS3Contract` instance by querying the node for the necessary information through the supplied `grpcClient`.
     *
     * @param {ConcordiumGRPCClient} grpcClient - The client used for contract invocations and updates.
     * @param {ContractAddress} contractAddress - Address of the contract instance.
     *
     * @throws If `InstanceInfo` could not be received for the contract,
     * or if the contract name could not be parsed from the information received from the node.
     */
    static async create(grpcClient, contractAddress) {
        const contractName = await super.getContractName(grpcClient, contractAddress);
        return new CIS3Contract(grpcClient, contractAddress, contractName);
    }
    makeDryRunInstance(grpcClient, contractAddress, contractName) {
        return new CIS3DryRun(grpcClient, contractAddress, contractName);
    }
    /**
     * Creates a CIS3 `permit` update transaction.
     * This is a CIS3 sponsored transaction that allows a sponsor to send a transaction on behalf of a sponsoree.
     *
     * @param {CreateContractTransactionMetadata} metadata - Metadata needed for the transaction creation.
     * @param {CIS3.PermitParam} params - The parameters for the `permit` entrypoint.
     *     Includes the signature of the sponsoree, the address of the sponsoree, and the signed message.
     *
     * @returns {ContractUpdateTransactionWithSchema} Transaction data for a `CIS3.permit` update.
     */
    createPermit(metadata, params) {
        return this.createUpdateTransaction(EntrypointName.fromStringUnchecked('permit'), serializeCIS3PermitParam, metadata, params, formatCIS3PermitParam);
    }
    /**
     * Sends a `permit` update transaction to the network.
     * This is a CIS3 sponsored transaction that allows a sponsor to send a transaction on behalf of a sponsoree.
     *
     * @param {ContractTransactionMetadata} metadata - Metadata needed for the transaction creation.
     * @param {CIS3.PermitParam} params - The parameters for the `permit` entrypoint.
     *     Includes the signature of the sponsoree, the address of the sponsoree, and the signed message.
     * @param {AccountSigner} signer - The signer (of the sponsor) to use for the transaction.
     *
     * @returns {Promise<TransactionHash>} The hash of the transaction.
     */
    permit(metadata, params, signer) {
        const transaction = this.createPermit(metadata, params);
        return this.sendUpdateTransaction(transaction, metadata, signer);
    }
    supportsPermit(entrypoints, blockHash) {
        const serialize = makeDynamicFunction(serializeCIS3SupportsPermitQueryParams);
        const deserialize = ensureMatchesInput(entrypoints, deserializeCIS3SupportsPermitResponse);
        return this.invokeView(EntrypointName.fromStringUnchecked('supportsPermit'), serialize, deserialize, entrypoints, blockHash);
    }
}
//# sourceMappingURL=CIS3Contract.js.map