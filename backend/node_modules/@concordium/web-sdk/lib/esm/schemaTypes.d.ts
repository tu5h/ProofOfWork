import { ContractName, EntrypointName } from './contractHelpers.js';
import { Cursor } from './deserializationHelpers.js';
/**
 * The JSON schema representation of a rust Option
 *
 * @template T - The type to represent as optional
 */
export type OptionJson<T> = {
    None: [];
} | {
    Some: [T];
};
/**
 * Takes a value and wraps it in a {@link OptionJson}.
 *
 * @template T - The type to represent as optional
 *
 * @param {T} value - The value to wrap.
 *
 * @returns {OptionJson<T>} the wrapped value
 */
export declare function toOptionJson<T>(value: T | undefined): OptionJson<T>;
/** Schema version from before the schema bytes contained version information. */
type UnversionedSchemaVersion = 0 | 1;
/**
 * Represents unparsed bytes for a smart contract module schema.
 */
export type RawModuleSchema = {
    /** The bytes does contain the version information. */
    readonly type: 'versioned';
    /** Buffer containing the schema module bytes, assumed to contain the version information. */
    readonly buffer: ArrayBuffer;
} | {
    /** The bytes does not contain the version information. */
    readonly type: 'unversioned';
    /** Buffer containing the schema module bytes. Assumed to be without the version information */
    readonly buffer: ArrayBuffer;
    /** Smart contract module schema version. */
    readonly version: UnversionedSchemaVersion;
};
/**
 * Parse a raw smart contract module schema into a structured type.
 *
 * @param {RawModuleSchema} rawModuleSchema The raw smart contract module schema.
 * @returns {VersionedSchemaModule} A structured representation of the smart contract module schema.
 * @throws If unable to deserialize the module schema from provided bytes.
 */
export declare function parseRawModuleSchema(rawModuleSchema: RawModuleSchema): VersionedSchemaModule;
/**
 * Represents the different schema versions.
 *
 * The serialization of this type includes the versioning information.
 * The serialization of this is always prefixed with two 255u8 in order to distinguish this versioned schema from the unversioned.
 * When embedded into a smart contract module, name the custom section `concordium-schema`.
 */
export type VersionedSchemaModule = {
    version: 0;
    module: SchemaModuleV0;
} | {
    version: 1;
    module: SchemaModuleV1;
} | {
    version: 2;
    module: SchemaModuleV2;
} | {
    version: 3;
    module: SchemaModuleV3;
};
/**
 * Contains all schemas for a smart contract module V0.
 * Older versions of smart contracts might have this embedded in the custom section labelled `concordium-schema-v1`.
 */
export type SchemaModuleV0 = {
    /** Map from contract name to a collection of schemas for that contract. */
    contracts: Map<ContractName, SchemaContractV1>;
};
/**
 * Contains all schemas for a smart contract module V1.
 * Older versions of smart contracts might have this embedded in the custom section labelled `concordium-schema-v2`.
 */
export type SchemaModuleV1 = {
    /** Map from contract name to a collection of schemas for that contract. */
    contracts: Map<ContractName, SchemaContractV1>;
};
/** Contains all the contract schemas for a smart contract module V1. */
export type SchemaModuleV2 = {
    /** Map from contract name to a collection of schemas for that contract. */
    contracts: Map<ContractName, SchemaContractV2>;
};
/** Contains all the contract schemas for a smart contract module V1. */
export type SchemaModuleV3 = {
    /** Map from contract name to a collection of schemas for that contract. */
    contracts: Map<ContractName, SchemaContractV3>;
};
/** Describes all the schemas of a V0 smart contract. */
export type SchemaContractV0 = {
    /** Schema for the smart contract state. */
    state?: SchemaType;
    /** Schemas for the init-function. */
    init?: SchemaFunctionV1;
    /** Map of schemas for the receive-functions. */
    receive: Map<EntrypointName, SchemaFunctionV1>;
};
/** Describes schemas of a smart contract in a V1 smart contract module. */
export type SchemaContractV1 = {
    /** Schemas for the init-function. */
    init?: SchemaFunctionV1;
    /** Map of schemas for the receive-functions. */
    receive: Map<EntrypointName, SchemaFunctionV1>;
};
/** Describes schemas of a smart contract in a V1 smart contract module. */
export type SchemaContractV2 = {
    /** Schemas for the init-function. */
    init?: SchemaFunctionV2;
    /** Map of schemas for the receive-functions. */
    receive: Map<EntrypointName, SchemaFunctionV2>;
};
/** Describes schemas of a smart contract in a V1 smart contract module. */
export type SchemaContractV3 = {
    /** Schemas for the init-function. */
    init?: SchemaFunctionV2;
    /** Map of schemas for the receive-functions. */
    receive: Map<EntrypointName, SchemaFunctionV2>;
    /** Schema for events logged by this contract. */
    event?: SchemaType;
};
/** Describes schemas of a init or receive function in a smart contract in a V1 smart contract module. */
export type SchemaFunctionV1 = {
    /** Schema for the parameter of this function. */
    parameter?: SchemaType;
    /** Schema for the return value of this function. */
    returnValue?: SchemaType;
};
/** Describes schemas of a init or receive function in a smart contract in a V1 smart contract module. */
export type SchemaFunctionV2 = {
    /** Schema for the parameter of this function. */
    parameter?: SchemaType;
    /** Schema for the return value of this function. */
    returnValue?: SchemaType;
    /** Schema for error message of this function. */
    error?: SchemaType;
};
/** Type of the variable used to encode the length collections such as Sets, List, Maps and more. */
export type SchemaSizeLength = 'U8' | 'U16' | 'U32' | 'U64';
/** Schema information for some variant of an enum (here it is an enum in Rust terms). */
export type SchemaEnumVariant = {
    /** Name of the variant. */
    name: string;
    /** Fields of this variant */
    fields: SchemaFields;
};
/**
 * Schema information of fields in either a struct or a variant of some enum (here it is an enum in Rust terms).
 * The fields are either named, unnamed or none.
 */
export type SchemaFields = {
    type: 'Named';
    fields: SchemaNamedField[];
} | {
    type: 'Unnamed';
    fields: SchemaType[];
} | {
    type: 'None';
};
/**
 * Schema information of a single named field in either a struct or a variant of some enum (here it is an enum in Rust terms).
 */
export type SchemaNamedField = {
    name: string;
    field: SchemaType;
};
/** The schema type information. Provides information of how to serialize or deserialzie some binary information into a structure. */
export type SchemaType = {
    type: 'Unit' | 'Bool' | 'U8' | 'U16' | 'U32' | 'U64' | 'U128' | 'I8' | 'I16' | 'I32' | 'I64' | 'I128' | 'Amount' | 'AccountAddress' | 'ContractAddress' | 'Timestamp' | 'Duration';
} | {
    type: 'Pair';
    first: SchemaType;
    second: SchemaType;
} | {
    type: 'List';
    sizeLength: SchemaSizeLength;
    item: SchemaType;
} | {
    type: 'Set';
    sizeLength: SchemaSizeLength;
    item: SchemaType;
} | {
    type: 'Map';
    sizeLength: SchemaSizeLength;
    key: SchemaType;
    value: SchemaType;
} | {
    type: 'Array';
    size: number;
    item: SchemaType;
} | {
    type: 'Struct';
    fields: SchemaFields;
} | {
    type: 'Enum';
    variants: SchemaEnumVariant[];
} | {
    type: 'String';
    sizeLength: SchemaSizeLength;
} | {
    type: 'ContractName';
    sizeLength: SchemaSizeLength;
} | {
    type: 'ReceiveName';
    sizeLength: SchemaSizeLength;
} | {
    type: 'ULeb128';
    maxByteSize: number;
} | {
    type: 'ILeb128';
    maxByteSize: number;
} | {
    type: 'ByteList';
    sizeLength: SchemaSizeLength;
} | {
    type: 'ByteArray';
    size: number;
} | {
    type: 'TaggedEnum';
    variants: Map<number, SchemaEnumVariant>;
};
/**
 * Deserialize a versioned smart contract module schema. This checks for the prefix of two max-value u8 bytes and fails otherwise.
 * @param {Cursor} cursor A cursor over the buffer to deserialize.
 * @throws If provided smart contract module schema is not prefixed with two max-value u8 bytes, or if the deserialization fails.
 * @returns {VersionedSchemaModule} The structured representation of a smart contract schema module.
 */
export declare function deserializeVersionedSchemaModule(cursor: Cursor): VersionedSchemaModule;
/**
 * Deserialize a smart contract module schema which does not contain version information.
 * This is only relevant for old versions of the smart contract module schema.
 * @param {UnversionedSchemaVersion} version The version of the smart contract schema module.
 * @param {Cursor} cursor A cursor over the buffer to deserialize.
 * @throws If the deserialization fails.
 * @returns {VersionedSchemaModule} The structured representation of a smart contract schema module.
 */
export declare function deserializeUnversionedSchemaModule(version: UnversionedSchemaVersion, cursor: Cursor): VersionedSchemaModule;
/**
 * Deserialize a schema type.
 * @param {ArrayBuffer} buffer The buffer to deserialize.
 * @returns {SchemaType} The deserialized schema type.
 */
export declare function deserializeSchemaType(buffer: ArrayBuffer): SchemaType;
/**
 * Serialize a schema type.
 * @param {SchemaType} schemaType The schema type to serialize
 * @returns {Uint8Array} The buffer containing the serialized schema type.
 */
export declare function serializeSchemaType(schemaType: SchemaType): Uint8Array;
export {};
