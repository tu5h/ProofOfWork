import * as wasm from '@concordium/rust-bindings/wallet';
import { stringify } from 'json-bigint';
import { VerifiablePresentation } from '../types/VerifiablePresentation.js';
/**
 * Verifies that the given signature is correct for the given values/randomness/holder/issuerPublicKey/issuerContract
 */
export function verifyWeb3IdCredentialSignature(input) {
    // Use json-bigint stringify to ensure we can handle bigints
    return wasm.verifyWeb3IdCredentialSignature(stringify(input));
}
/**
 * Given a statement about an identity and the inputs necessary to prove the statement, produces a proof that the associated identity fulfills the statement.
 */
export function getVerifiablePresentation(input) {
    try {
        const s = VerifiablePresentation.fromString(
        // Use json-bigint stringify to ensure we can handle bigints
        wasm.createWeb3IdProof(stringify(input)));
        return s;
    }
    catch (e) {
        throw new Error(e);
    }
}
/**
 * Verify the proofs contained in the {@linkcode VerifiablePresentation}.
 *
 * @param presentation - The verifiable presentation to verify.
 * @param globalContext - The cryptographic parameters of the chain the presentation is created on.
 * @param publicData - The public data corresponding to the proofs contained in the presentation.
 *
 * @returns The request corresponding to the verifable presentation, if verification is successful.
 * @throws If the verification is not successful for any reason.
 */
export function verifyPresentation(presentation, globalContext, publicData) {
    const input = stringify({ presentation, globalContext, publicData });
    const result = wasm.verifyPresentation(input);
    return JSON.parse(result);
}
//# sourceMappingURL=web3Id.js.map