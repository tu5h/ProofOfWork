import type { IdProofInput, IdProofOutput } from '../id/index.js';
import type { ArInfo, CryptographicParameters, IdObjectRequestV1, IdRecoveryRequest, IpInfo, Network, Versioned } from '../types.js';
interface IdentityRequestInputCommon {
    ipInfo: IpInfo;
    globalContext: CryptographicParameters;
    arsInfos: Record<string, ArInfo>;
    arThreshold: number;
}
/**
 * The input parameter for creating an identity object request where
 * the secret keys are derived from the provided seed.
 */
export type IdentityRequestInput = IdentityRequestInputCommon & {
    seed: string;
    net: Network;
    identityIndex: number;
};
/**
 * The input parameter for creating an identity object request where
 * the secret keys and randomness are provided directly.
 */
export type IdentityRequestWithKeysInput = IdentityRequestInputCommon & {
    prfKey: string;
    idCredSec: string;
    blindingRandomness: string;
};
/**
 * Creates a V1 identity request by providing the secret keys directly.
 * This allows for the generation of the keys separately from creating
 * the request.
 */
export declare function createIdentityRequestWithKeys(input: IdentityRequestWithKeysInput): Versioned<IdObjectRequestV1>;
/**
 * Creates a V1 identity request from a seed. This will derive the corresponding
 * keys based on the provided identity index, identity provider index and seed.
 * The identity provider index is extracted from the provided IpInfo.
 */
export declare function createIdentityRequest(input: IdentityRequestInput): Versioned<IdObjectRequestV1>;
type IdentityRecoveryRequestInputCommon = {
    ipInfo: IpInfo;
    globalContext: CryptographicParameters;
    timestamp: number;
};
/**
 * The input parameter for creating an identity recovery request where
 * the secret keys are derived from the provided seed.
 */
export type IdentityRecoveryRequestInput = IdentityRecoveryRequestInputCommon & {
    seedAsHex: string;
    net: Network;
    identityIndex: number;
};
/**
 * The input parameter for creating an identity recovery request where
 * the secret keys and randomness are provided directly.
 */
export type IdentityRecoveryRequestWithKeysInput = IdentityRecoveryRequestInputCommon & {
    idCredSec: string;
};
/**
 * Creates an identity recovery request from a seed. This will derive the
 * corresponding keys based on the provided identity index, identity provider index
 * and seed. The identity provider index is extracted from the provided IpInfo.
 */
export declare function createIdentityRecoveryRequest(input: IdentityRecoveryRequestInput): Versioned<IdRecoveryRequest>;
/**
 * Creates an indentity recovery request by providing the secret key directly.
 * This allows for the generation of the keys separately from creating
 * the request.
 */
export declare function createIdentityRecoveryRequestWithKeys(input: IdentityRecoveryRequestWithKeysInput): Versioned<IdRecoveryRequest>;
/**
 * Given a statement about an identity and the inputs necessary to prove the statement, produces a proof that the associated identity fulfills the statement.
 */
export declare function getIdProof(input: IdProofInput): IdProofOutput;
export {};
