import { stringify } from 'json-bigint';
import { CISContract, ContractDryRun } from '../GenericContract.js';
import { CIS0, cis0Supports } from '../cis0.js';
import { ensureMatchesInput } from '../deserializationHelpers.js';
import * as EntrypointName from '../types/EntrypointName.js';
import { makeDynamicFunction } from '../util.js';
import { deserializeCIS2BalanceOfResponse, deserializeCIS2OperatorOfResponse, deserializeCIS2TokenMetadataResponse, formatCIS2Transfer, formatCIS2UpdateOperator, serializeCIS2BalanceOfQueries, serializeCIS2OperatorOfQueries, serializeCIS2TokenIds, serializeCIS2Transfers, serializeCIS2UpdateOperators, } from './util.js';
/**
 * Contains methods for performing dry-run invocations of update instructions on CIS-2 smart contracts.
 */
class CIS2DryRun extends ContractDryRun {
    transfer(sender, transfers, blockHash) {
        const serialize = makeDynamicFunction(serializeCIS2Transfers);
        return this.invokeMethod(EntrypointName.fromStringUnchecked('transfer'), sender, serialize, transfers, blockHash);
    }
    updateOperator(owner, updates, blockHash) {
        const serialize = makeDynamicFunction(serializeCIS2UpdateOperators);
        return this.invokeMethod(EntrypointName.fromStringUnchecked('updateOperator'), owner, serialize, updates, blockHash);
    }
}
/**
 * Contains methods for performing operations on CIS-2 smart contracts.
 */
export class CIS2Contract extends CISContract {
    constructor() {
        super(...arguments);
        this.schema = {
            /** Base64 encoded schema for CIS-2.transfer parameter */
            transfer: 'EAEUAAUAAAAIAAAAdG9rZW5faWQdAAYAAABhbW91bnQbJQAAAAQAAABmcm9tFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAIAAAB0bxUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAgAAAAwWAQQAAABkYXRhHQE',
            /** Base64 encoded schema for CIS-2.updateOperator parameter */
            updateOperator: 'EAEUAAIAAAAGAAAAdXBkYXRlFQIAAAAGAAAAUmVtb3ZlAgMAAABBZGQCCAAAAG9wZXJhdG9yFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA',
        };
    }
    makeDryRunInstance(grpcClient, contractAddress, contractName) {
        return new CIS2DryRun(grpcClient, contractAddress, contractName);
    }
    /**
     * Creates a new `CIS2Contract` instance by querying the node for the necessary information through the supplied `grpcClient`.
     *
     * @param {ConcordiumGRPCClient} grpcClient - The client used for contract invocations and updates.
     * @param {ContractAddress.Type} contractAddress - Address of the contract instance.
     *
     * @throws If `InstanceInfo` could not be received for the contract, if the contract does not support the CIS-2 standard,
     * or if the contract name could not be parsed from the information received from the node.
     */
    static async create(grpcClient, contractAddress) {
        const contractName = await super.getContractName(grpcClient, contractAddress);
        const result = await cis0Supports(grpcClient, contractAddress, 'CIS-2');
        if (result?.type !== CIS0.SupportType.Support) {
            throw new Error(`The CIS-2 standard is not supported by the contract at address ${stringify(contractAddress)}`);
        }
        return new CIS2Contract(grpcClient, contractAddress, contractName);
    }
    createTransfer(metadata, transfers) {
        const serialize = makeDynamicFunction(serializeCIS2Transfers);
        const format = makeDynamicFunction((us) => us.map(formatCIS2Transfer));
        return this.createUpdateTransaction(EntrypointName.fromStringUnchecked('transfer'), serialize, metadata, transfers, format);
    }
    transfer(metadata, transfers, signer) {
        const transaction = this.createTransfer(metadata, transfers);
        return this.sendUpdateTransaction(transaction, metadata, signer);
    }
    createUpdateOperator(metadata, updates) {
        const serialize = makeDynamicFunction(serializeCIS2UpdateOperators);
        const format = makeDynamicFunction((us) => us.map(formatCIS2UpdateOperator));
        return this.createUpdateTransaction(EntrypointName.fromStringUnchecked('updateOperator'), serialize, metadata, updates, format);
    }
    updateOperator(metadata, updates, signer) {
        const transaction = this.createUpdateOperator(metadata, updates);
        return this.sendUpdateTransaction(transaction, metadata, signer);
    }
    async balanceOf(queries, blockHash) {
        const serialize = makeDynamicFunction(serializeCIS2BalanceOfQueries);
        const deserialize = ensureMatchesInput(queries, deserializeCIS2BalanceOfResponse);
        return this.invokeView(EntrypointName.fromStringUnchecked('balanceOf'), serialize, deserialize, queries, blockHash);
    }
    operatorOf(queries, blockHash) {
        const serialize = makeDynamicFunction(serializeCIS2OperatorOfQueries);
        const deserialize = ensureMatchesInput(queries, deserializeCIS2OperatorOfResponse);
        return this.invokeView(EntrypointName.fromStringUnchecked('operatorOf'), serialize, deserialize, queries, blockHash);
    }
    tokenMetadata(tokenIds, blockHash) {
        const serialize = makeDynamicFunction(serializeCIS2TokenIds);
        const deserialize = ensureMatchesInput(tokenIds, deserializeCIS2TokenMetadataResponse);
        return this.invokeView(EntrypointName.fromStringUnchecked('tokenMetadata'), serialize, deserialize, tokenIds, blockHash);
    }
}
//# sourceMappingURL=CIS2Contract.js.map