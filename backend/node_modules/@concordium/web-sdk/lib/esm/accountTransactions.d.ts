import { Buffer } from 'buffer/index.js';
import { Cursor } from './deserializationHelpers.js';
import { ContractAddress } from './pub/types.js';
import { AccountTransactionPayload, AccountTransactionType, BakerKeysWithProofs, Base58String, ConfigureBakerPayload, ConfigureDelegationPayload, DelegationTarget, DeployModulePayload, HexString, InitContractPayload, OpenStatus, RegisterDataPayload, SimpleTransferPayload, SimpleTransferWithMemoPayload, UpdateContractPayload, UpdateCredentialsPayload, UrlString } from './types.js';
/**
 * A handler for a specific {@linkcode AccountTransactionType}.
 */
export interface AccountTransactionHandler<PayloadType extends AccountTransactionPayload = AccountTransactionPayload, JSONType = PayloadType> {
    /**
     * Serializes the payload to a buffer.
     * @param payload - The payload to serialize.
     * @returns The serialized payload.
     */
    serialize: (payload: PayloadType) => Buffer;
    /**
     * Deserializes the serialized payload into the payload type.
     * @param serializedPayload - The serialized payload to be deserialized.
     * @returns The deserialized payload.
     */
    deserialize: (serializedPayload: Cursor) => PayloadType;
    /**
     * Gets the base energy cost for the given payload.
     * @param payload - The payload for which to get the base energy cost.
     * @returns The base energy cost for the payload.
     */
    getBaseEnergyCost: (payload: PayloadType) => bigint;
    /**
     * Converts the payload into JSON format.
     * @param payload - The payload to be converted into JSON.
     * @returns The payload in JSON format.
     */
    toJSON: (payload: PayloadType) => JSONType;
    /**
     * Converts a JSON-serialized payload into the payload type.
     * @param json - The JSON to be converted back into the payload.
     * @returns The payload obtained from the JSON.
     */
    fromJSON: (json: JSONType) => PayloadType;
}
export interface SimpleTransferPayloadJSON {
    toAddress: Base58String;
    amount: string;
}
export declare class SimpleTransferHandler implements AccountTransactionHandler<SimpleTransferPayload, SimpleTransferPayloadJSON> {
    getBaseEnergyCost(): bigint;
    serialize(transfer: SimpleTransferPayload): Buffer;
    deserialize(serializedPayload: Cursor): SimpleTransferPayload;
    toJSON(transfer: SimpleTransferPayload): SimpleTransferPayloadJSON;
    fromJSON(json: SimpleTransferPayloadJSON): SimpleTransferPayload;
}
export interface SimpleTransferWithMemoPayloadJSON extends SimpleTransferPayloadJSON {
    memo: HexString;
}
export declare class SimpleTransferWithMemoHandler extends SimpleTransferHandler implements AccountTransactionHandler<SimpleTransferWithMemoPayload, SimpleTransferWithMemoPayloadJSON> {
    serialize(transfer: SimpleTransferWithMemoPayload): Buffer;
    deserialize(serializedPayload: Cursor): SimpleTransferWithMemoPayload;
    toJSON(transfer: SimpleTransferWithMemoPayload): SimpleTransferWithMemoPayloadJSON;
    fromJSON(json: SimpleTransferWithMemoPayloadJSON): SimpleTransferWithMemoPayload;
}
export interface DeployModulePayloadJSON {
    source: HexString;
    version?: number;
}
export declare class DeployModuleHandler implements AccountTransactionHandler<DeployModulePayload, DeployModulePayloadJSON> {
    getBaseEnergyCost(payload: DeployModulePayload): bigint;
    serialize(payload: DeployModulePayload): Buffer;
    deserialize(): DeployModulePayload;
    toJSON(payload: DeployModulePayload): DeployModulePayloadJSON;
    fromJSON(json: DeployModulePayloadJSON): DeployModulePayload;
}
export interface InitContractPayloadJSON {
    amount: string;
    moduleRef: HexString;
    initName: string;
    param: HexString;
    maxContractExecutionEnergy: bigint;
}
export declare class InitContractHandler implements AccountTransactionHandler<InitContractPayload, InitContractPayloadJSON> {
    getBaseEnergyCost(payload: InitContractPayload): bigint;
    serialize(payload: InitContractPayload): Buffer;
    deserialize(): InitContractPayload;
    toJSON(payload: InitContractPayload): InitContractPayloadJSON;
    fromJSON(json: InitContractPayloadJSON): InitContractPayload;
}
export interface UpdateContractPayloadJSON {
    amount: string;
    address: ContractAddress.SchemaValue;
    receiveName: string;
    message: HexString;
    maxContractExecutionEnergy: bigint;
}
export declare class UpdateContractHandler implements AccountTransactionHandler<UpdateContractPayload, UpdateContractPayloadJSON> {
    getBaseEnergyCost(payload: UpdateContractPayload): bigint;
    serialize(payload: UpdateContractPayload): Buffer;
    deserialize(): UpdateContractPayload;
    toJSON(payload: UpdateContractPayload): UpdateContractPayloadJSON;
    fromJSON(json: UpdateContractPayloadJSON): UpdateContractPayload;
}
export declare class UpdateCredentialsHandler implements AccountTransactionHandler<UpdateCredentialsPayload> {
    getBaseEnergyCost(updateCredentials: UpdateCredentialsPayload): bigint;
    serialize(updateCredentials: UpdateCredentialsPayload): Buffer;
    deserialize(): UpdateCredentialsPayload;
    toJSON(updateCredentials: UpdateCredentialsPayload): UpdateCredentialsPayload;
    fromJSON(json: UpdateCredentialsPayload): UpdateCredentialsPayload;
}
export interface RegisterDataPayloadJSON {
    data: HexString;
}
export declare class RegisterDataHandler implements AccountTransactionHandler<RegisterDataPayload, RegisterDataPayloadJSON> {
    getBaseEnergyCost(): bigint;
    serialize(payload: RegisterDataPayload): Buffer;
    deserialize(serializedPayload: Cursor): RegisterDataPayload;
    toJSON(payload: RegisterDataPayload): RegisterDataPayloadJSON;
    fromJSON(json: RegisterDataPayloadJSON): RegisterDataPayload;
}
export interface ConfigureBakerPayloadJSON {
    stake?: string;
    restakeEarnings?: boolean;
    openForDelegation?: OpenStatus;
    keys?: BakerKeysWithProofs;
    metadataUrl?: UrlString;
    transactionFeeCommission?: number;
    bakingRewardCommission?: number;
    finalizationRewardCommission?: number;
}
export declare class ConfigureBakerHandler implements AccountTransactionHandler<ConfigureBakerPayload, ConfigureBakerPayloadJSON> {
    getBaseEnergyCost(payload: ConfigureBakerPayload): bigint;
    serialize(payload: ConfigureBakerPayload): Buffer;
    deserialize(): ConfigureBakerPayload;
    toJSON(payload: ConfigureBakerPayload): ConfigureBakerPayloadJSON;
    fromJSON(json: ConfigureBakerPayloadJSON): ConfigureBakerPayload;
}
export interface ConfigureDelegationPayloadJSON {
    stake?: string;
    restakeEarnings?: boolean;
    delegationTarget?: DelegationTarget;
}
export declare class ConfigureDelegationHandler implements AccountTransactionHandler<ConfigureDelegationPayload, ConfigureDelegationPayloadJSON> {
    getBaseEnergyCost(): bigint;
    serialize(payload: ConfigureDelegationPayload): Buffer;
    deserialize(): ConfigureDelegationPayload;
    toJSON(payload: ConfigureDelegationPayload): ConfigureDelegationPayloadJSON;
    fromJSON(json: ConfigureDelegationPayloadJSON): ConfigureDelegationPayload;
}
export type AccountTransactionPayloadJSON = SimpleTransferPayloadJSON | SimpleTransferWithMemoPayloadJSON | DeployModulePayloadJSON | InitContractPayloadJSON | UpdateContractPayloadJSON | UpdateCredentialsPayload | RegisterDataPayloadJSON | ConfigureDelegationPayloadJSON | ConfigureBakerPayloadJSON;
export declare function getAccountTransactionHandler(type: AccountTransactionType.Transfer): SimpleTransferHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.TransferWithMemo): SimpleTransferWithMemoHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.UpdateCredentials): UpdateCredentialsHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.DeployModule): DeployModuleHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.InitContract): InitContractHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.Update): UpdateContractHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.RegisterData): RegisterDataHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.ConfigureDelegation): ConfigureDelegationHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.ConfigureBaker): ConfigureBakerHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType): AccountTransactionHandler<AccountTransactionPayload, AccountTransactionPayloadJSON>;
