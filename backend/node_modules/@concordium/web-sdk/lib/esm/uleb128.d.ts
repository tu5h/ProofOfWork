import { Buffer } from 'buffer/index.js';
/**
 * Decodes an unsigned leb128 encoded value to bigint. Note that if buffer
 * that is provided does not _only_ contain the uleb128 encoded number an
 * error will be thrown.
 *
 * @param {Uint8Array} buffer - The buffer to decode
 *
 * @returns {bigint} the decoded bigint value.
 */
export declare const uleb128Decode: (buffer: Uint8Array) => bigint;
/**
 * Decodes an unsigned leb128 encoded value to bigint and returns it along
 * with the index of the end of the encoded uleb128 number + 1.
 *
 * @param {UInt8Array} bytes - The buffer to decode
 * @param {number} index - A non-negative index to decode at, defaults to 0
 *
 * @returns {[bigint, number]} the decoded bigint value and the index of
 * the end of the encoded uleb128 number + 1.
 */
export declare function uleb128DecodeWithIndex(bytes: Uint8Array, index?: number): [bigint, number];
/**
 * Encodes a bigint value as unsigned leb128.
 *
 * @param {bigint} num - The `bigint` value to encode
 *
 * @returns {Buffer} the encoded value.
 */
export declare const uleb128Encode: (num: bigint) => Buffer;
