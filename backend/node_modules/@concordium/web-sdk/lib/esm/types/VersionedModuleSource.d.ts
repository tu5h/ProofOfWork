import * as H from '../contractHelpers.js';
import { RawModuleSchema } from '../schemaTypes.js';
import { VersionedModuleSource } from '../types.js';
import * as ModuleReference from './ModuleReference.js';
/** Interface of a smart contract containing the name of the contract and every entrypoint. */
export type ContractInterface = {
    /** The name of the smart contract. Note: This does _not_ including the 'init_' prefix. */
    contractName: H.ContractName;
    /** A set of entrypoints exposed by the smart contract. Note: These do _not_ include the '<contractName>.' prefix. */
    entrypointNames: Set<H.EntrypointName>;
};
/** Interface of a smart contract module containing the interface of every contract in the module. */
export type ModuleInterface = Map<H.ContractName, ContractInterface>;
/**
 * Parse a smart contract module source from bytes, potentially read from a file.
 * @param {ArrayBuffer} buffer Bytes encoding a versioned smart contract module.
 * @throws When provided bytes fails to be parsed or are using an unknown smart contract module version.
 */
export declare function versionedModuleSourceFromBuffer(buffer: ArrayBuffer): VersionedModuleSource;
/**
 * Serialize a versioned module source. Useful when saving to file.
 * @param {VersionedModuleSource} moduleSource The versioned module source to serialize.
 * @returns {Uint8Array} Buffer with serialized module source.
 */
export declare function versionedModuleSourceToBuffer(moduleSource: VersionedModuleSource): Uint8Array;
/**
 * Calculate the module reference from the module source.
 * @param {VersionedModuleSource} moduleSource The smart contract module source.
 * @returns {ModuleReference} The calculated reference of the module
 */
export declare function calculateModuleReference(moduleSource: VersionedModuleSource): ModuleReference.Type;
/**
 * Build a module interface based on exports from the WebAssembly module.
 *
 * @param {VersionedModuleSource} moduleSource The smart contract module source.
 * @returns The interface of the smart contract module.
 */
export declare function parseModuleInterface(moduleSource: VersionedModuleSource): Promise<ModuleInterface>;
/**
 * Extract the embedded smart contract schema bytes. Returns `null` if no schema is embedded.
 * @param {VersionedModuleSource} moduleSource The smart contract module source.
 * @returns {RawModuleSchema | null} The raw module schema if found.
 */
export declare function getEmbeddedModuleSchema(moduleSource: VersionedModuleSource): Promise<RawModuleSchema | null>;
