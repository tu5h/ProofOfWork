import type * as Proto from '../grpc-api/v2/concordium/types.js';
import { TypedJson, TypedJsonDiscriminator } from './util.js';
/**
 * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.
 * @deprecated
 */
export declare const JSON_DISCRIMINATOR = TypedJsonDiscriminator.Energy;
export type Serializable = string;
/** Energy measure. Used as part of cost calculations for transactions. */
declare class Energy {
    /** The internal value for representing the energy. */
    readonly value: bigint;
    protected get serializable(): Serializable;
    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
    private __type;
    constructor(
    /** The internal value for representing the energy. */
    value: bigint);
    /**
     * Get a string representation of the energy.
     * @returns {string} The string representation.
     */
    toString(): string;
}
/**
 * Unwraps {@linkcode Type} value
 * @param value value to unwrap.
 * @returns the unwrapped {@linkcode bigint} value
 */
export declare function toUnwrappedJSON(value: Type): bigint;
/** Energy measure. Used as part of cost calculations for transactions. */
export type Type = Energy;
/**
 * Type predicate for {@linkcode Type}
 *
 * @param value value to check.
 * @returns whether `value` is of type {@linkcode Type}
 */
export declare function instanceOf(value: unknown): value is Energy;
/**
 * Construct an Energy type.
 * @param {bigint | number} value The measure of energy.
 * @throws If the provided value is a negative number.
 * @returns {Energy}
 */
export declare function create(value: bigint | number): Energy;
/**
 * Convert energy from its protobuf encoding.
 * @param {Proto.Energy} energy The energy in protobuf.
 * @returns {Energy} The energy.
 */
export declare function fromProto(energy: Proto.Energy): Energy;
/**
 * Convert energy into its protobuf encoding.
 * @param {Energy} energy The energy.
 * @returns {Proto.Energy} The protobuf encoding.
 */
export declare function toProto(energy: Energy): Proto.Energy;
/**
 * Constructs a {@linkcode Type} from {@linkcode Serializable}.
 * @param {Serializable} value
 * @returns {Type} The duration.
 */
export declare function fromSerializable(value: Serializable): Type;
/**
 * Converts {@linkcode Type} into {@linkcode Serializable}
 * @param {Type} energy
 * @returns {Serializable} The serializable value
 */
export declare function toSerializable(energy: Type): Serializable;
/**
 * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
 * @deprecated Use the {@linkcode toSerializable} function instead.
 * @param {Type} value - The account address instance to transform.
 * @returns {TypedJson} The transformed object.
 */
export declare function toTypedJSON(value: Type): TypedJson<Serializable>;
/**
 * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.
 * @deprecated Use the {@linkcode fromSerializable} function instead.
 * @param {TypedJson} json - The typed JSON to convert.
 * @throws {TypedJsonParseError} - If unexpected JSON string is passed.
 * @returns {Type} The parsed instance.
 */
export declare const fromTypedJSON: ({ ["@type"]: type, value }: TypedJson<string>) => string | Energy;
export {};
