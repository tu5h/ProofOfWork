import { TypedJsonDiscriminator, makeFromTypedJson } from './util.js';
/**
 * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.
 * @deprecated
 */
export const JSON_DISCRIMINATOR = TypedJsonDiscriminator.Timestamp;
/** Represents a timestamp. */
class Timestamp {
    constructor(
    /** The internal value for representing the timestamp as milliseconds since Unix epoch. */
    value) {
        this.value = value;
        /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
        this.__type = JSON_DISCRIMINATOR;
    }
    /**
     * Get a string representation of the timestamp as the number of milliseconds since Unix epoch.
     * @returns {string} The string representation.
     */
    toString() {
        return this.value.toString();
    }
}
/**
 * Unwraps {@linkcode Type} value
 * @param value value to unwrap.
 * @returns the unwrapped {@linkcode bigint} value
 */
export function toUnwrappedJSON(value) {
    return value.value;
}
/**
 * Type predicate for {@linkcode Type}
 *
 * @param value value to check.
 * @returns whether `value` is of type {@linkcode Type}
 */
export function instanceOf(value) {
    return value instanceof Timestamp;
}
/**
 * Create a Timestamp from milliseconds since Unix epoch.
 * @param {number} value Milliseconds since Unix epoch.
 * @throws If the value is negative.
 * @returns {Timestamp} The created timestamp.
 */
export function fromMillis(value) {
    if (value < 0) {
        throw new Error('Invalid timestamp: The value cannot be a negative number.');
    }
    return new Timestamp(BigInt(value));
}
/**
 * Create a Timestamp from a Date object.
 * @param {Date} date Date representing the timestamp.
 * @throws If the date if from before January 1, 1970 UTC.
 * @returns {Timestamp} The created timestamp.
 */
export function fromDate(date) {
    return fromMillis(date.getTime());
}
/**
 * Construct a Timestamp minutes in the future from the time of calling this function.
 * @param {number} minutes The number of minutes in the future to set as the expiry time.
 * @returns {Timestamp} The transaction expiry.
 */
export function futureMinutes(minutes) {
    const timestampMillis = Date.now() + minutes * 60 * 1000;
    return fromDate(new Date(timestampMillis));
}
/**
 * Get timestamp in the JSON format used when serializing using a smart contract schema type.
 * @param {Timestamp} timestamp The timestamp.
 * @returns {SchemaValue} The schema value representation.
 */
export function toSchemaValue(timestamp) {
    return toDate(timestamp).toISOString();
}
/**
 * Convert to timestamp from JSON format used when serializing using a smart contract schema type.
 * @param {SchemaValue} timestamp The timestamp in schema format.
 * @returns {Timestamp} The timestamp
 */
export function fromSchemaValue(timestamp) {
    return fromMillis(Date.parse(timestamp));
}
/**
 * Get timestamp as a Date.
 * @param {Timestamp} timestamp The timestamp.
 * @returns {Date} Date object.
 */
export function toDate(timestamp) {
    const number = Number(timestamp.value);
    if (isNaN(number)) {
        throw new Error('Timestamp cannot be represented as a date.');
    }
    return new Date(number);
}
/**
 * Convert a timestamp from its protobuf encoding.
 * @param {Proto.Timestamp} timestamp The timestamp in protobuf.
 * @returns {Timestamp} The timestamp.
 */
export function fromProto(timestamp) {
    return fromMillis(timestamp.value);
}
/**
 * Convert a timestamp into its protobuf encoding.
 * @param {Timestamp} timestamp The timestamp.
 * @returns {Proto.Timestamp} The protobuf encoding.
 */
export function toProto(timestamp) {
    return {
        value: timestamp.value,
    };
}
/**
 * Constructs a {@linkcode Type} from {@linkcode Serializable}.
 * @param {Serializable} value
 * @returns {Type} The duration.
 */
export function fromSerializable(value) {
    return fromMillis(BigInt(value));
}
/**
 * Converts {@linkcode Type} into {@linkcode Serializable}
 * @param {Type} value
 * @returns {Serializable} The serializable value
 */
export function toSerializable(value) {
    return value.value.toString();
}
/**
 * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
 * @deprecated Use the {@linkcode toSerializable} function instead.
 * @param {Type} value - The account address instance to transform.
 * @returns {TypedJson} The transformed object.
 */
export function toTypedJSON(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR,
        value: toSerializable(value),
    };
}
/**
 * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.
 * @deprecated Use the{@linkcode fromSerializable} function instead.
 * @param {TypedJson} json - The typed JSON to convert.
 * @throws {TypedJsonParseError} - If unexpected JSON string is passed.
 * @returns {Type} The parsed instance.
 */
export const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromSerializable);
//# sourceMappingURL=Timestamp.js.map