import { AccountTransactionType, TransactionStatusEnum, TransactionSummaryType } from '../types.js';
import * as AccountAddress from './AccountAddress.js';
import type * as BlockHash from './BlockHash.js';
import type * as ContractAddress from './ContractAddress.js';
import type * as ContractEvent from './ContractEvent.js';
import type * as Energy from './Energy.js';
import type * as TransactionHash from './TransactionHash.js';
import { UpdateInstructionPayload } from './chainUpdate.js';
import { RejectReason } from './rejectReason.js';
import { AccountTransferredEvent, AmountAddedByDecryptionEvent, BakerAddedEvent, BakerEvent, BakerKeysUpdatedEvent, BakerRemovedEvent, BakerSetRestakeEarningsEvent, BakerStakeChangedEvent, ContractInitializedEvent, ContractTraceEvent, CredentialKeysUpdatedEvent, CredentialsUpdatedEvent, DataRegisteredEvent, DelegationEvent, EncryptedAmountsRemovedEvent, EncryptedSelfAmountAddedEvent, MemoEvent, ModuleDeployedEvent, NewEncryptedAmountEvent, TransferredWithScheduleEvent } from './transactionEvent.js';
export interface BaseBlockItemSummary {
    index: bigint;
    energyCost: Energy.Type;
    hash: TransactionHash.Type;
}
export interface BaseAccountTransactionSummary extends BaseBlockItemSummary {
    type: TransactionSummaryType.AccountTransaction;
    cost: bigint;
    sender: AccountAddress.Type;
}
export declare enum TransactionKindString {
    DeployModule = "deployModule",
    InitContract = "initContract",
    Update = "update",
    Transfer = "transfer",
    AddBaker = "addBaker",
    RemoveBaker = "removeBaker",
    UpdateBakerStake = "updateBakerStake",
    UpdateBakerRestakeEarnings = "updateBakerRestakeEarnings",
    UpdateBakerKeys = "updateBakerKeys",
    UpdateCredentialKeys = "updateCredentialKeys",
    BakingReward = "bakingReward",
    BlockReward = "blockReward",
    FinalizationReward = "finalizationReward",
    EncryptedAmountTransfer = "encryptedAmountTransfer",
    TransferToEncrypted = "transferToEncrypted",
    TransferToPublic = "transferToPublic",
    TransferWithSchedule = "transferWithSchedule",
    UpdateCredentials = "updateCredentials",
    RegisterData = "registerData",
    TransferWithMemo = "transferWithMemo",
    EncryptedAmountTransferWithMemo = "encryptedAmountTransferWithMemo",
    TransferWithScheduleAndMemo = "transferWithScheduleAndMemo",
    ConfigureBaker = "configureBaker",
    ConfigureDelegation = "configureDelegation",
    StakingReward = "paydayAccountReward",
    Failed = "failed"
}
/**
 * Given an AccountTransactionType number value, return the corresponding TransactionKindString value
 */
export declare function getTransactionKindString(type: AccountTransactionType): TransactionKindString;
export interface TransferSummary {
    transactionType: TransactionKindString.Transfer;
    transfer: AccountTransferredEvent;
}
export interface TransferWithMemoSummary {
    transactionType: TransactionKindString.TransferWithMemo;
    transfer: AccountTransferredEvent;
    memo: MemoEvent;
}
export interface TransferWithScheduleSummary {
    transactionType: TransactionKindString.TransferWithSchedule;
    event: TransferredWithScheduleEvent;
}
export interface TransferWithScheduleAndMemoSummary {
    transactionType: TransactionKindString.TransferWithScheduleAndMemo;
    transfer: TransferredWithScheduleEvent;
    memo: MemoEvent;
}
export interface EncryptedAmountTransferSummary {
    transactionType: TransactionKindString.EncryptedAmountTransfer;
    removed: EncryptedAmountsRemovedEvent;
    added: NewEncryptedAmountEvent;
}
export interface EncryptedAmountTransferWithMemoSummary {
    transactionType: TransactionKindString.EncryptedAmountTransferWithMemo;
    removed: EncryptedAmountsRemovedEvent;
    added: NewEncryptedAmountEvent;
    memo: MemoEvent;
}
export interface ModuleDeployedSummary {
    transactionType: TransactionKindString.DeployModule;
    moduleDeployed: ModuleDeployedEvent;
}
export interface InitContractSummary {
    transactionType: TransactionKindString.InitContract;
    contractInitialized: ContractInitializedEvent;
}
export interface UpdateContractSummary {
    transactionType: TransactionKindString.Update;
    events: ContractTraceEvent[];
}
export interface DataRegisteredSummary {
    transactionType: TransactionKindString.RegisterData;
    dataRegistered: DataRegisteredEvent;
}
export interface TransferToPublicSummary {
    transactionType: TransactionKindString.TransferToPublic;
    removed: EncryptedAmountsRemovedEvent;
    added: AmountAddedByDecryptionEvent;
}
export interface TransferToEncryptedSummary {
    transactionType: TransactionKindString.TransferToEncrypted;
    added: EncryptedSelfAmountAddedEvent;
}
export interface AddBakerSummary {
    transactionType: TransactionKindString.AddBaker;
    bakerAdded: BakerAddedEvent;
}
export interface RemoveBakerSummary {
    transactionType: TransactionKindString.RemoveBaker;
    bakerRemoved: BakerRemovedEvent;
}
export interface UpdateBakerKeysSummary {
    transactionType: TransactionKindString.UpdateBakerKeys;
    bakerKeysUpdated: BakerKeysUpdatedEvent;
}
export interface UpdateBakerStakeSummary {
    transactionType: TransactionKindString.UpdateBakerStake;
    bakerStakeChanged: BakerStakeChangedEvent;
}
export interface UpdateBakerRestakeEarningsSummary {
    transactionType: TransactionKindString.UpdateBakerRestakeEarnings;
    bakerRestakeEarningsUpdated: BakerSetRestakeEarningsEvent;
}
export interface ConfigureBakerSummary {
    transactionType: TransactionKindString.ConfigureBaker;
    events: BakerEvent[];
}
export interface ConfigureDelegationSummary {
    transactionType: TransactionKindString.ConfigureDelegation;
    events: DelegationEvent[];
}
export interface UpdateCredentialKeysSummary {
    transactionType: TransactionKindString.UpdateCredentialKeys;
    keysUpdated: CredentialKeysUpdatedEvent;
}
export interface UpdateCredentialsSummary {
    transactionType: TransactionKindString.UpdateCredentials;
    credentialsUpdated: CredentialsUpdatedEvent;
}
export interface FailedTransactionSummary {
    transactionType: TransactionKindString.Failed;
    failedTransactionType?: TransactionKindString;
    rejectReason: RejectReason;
}
export type AccountTransactionSummary = BaseAccountTransactionSummary & (TransferSummary | TransferWithMemoSummary | TransferWithScheduleSummary | TransferWithScheduleAndMemoSummary | EncryptedAmountTransferSummary | EncryptedAmountTransferWithMemoSummary | DataRegisteredSummary | TransferToPublicSummary | TransferToEncryptedSummary | ModuleDeployedSummary | InitContractSummary | UpdateContractSummary | FailedTransactionSummary | AddBakerSummary | RemoveBakerSummary | UpdateBakerKeysSummary | UpdateBakerStakeSummary | UpdateBakerRestakeEarningsSummary | ConfigureBakerSummary | ConfigureDelegationSummary | UpdateCredentialKeysSummary | UpdateCredentialsSummary);
export interface AccountCreationSummary extends BaseBlockItemSummary {
    type: TransactionSummaryType.AccountCreation;
    credentialType: 'initial' | 'normal';
    address: AccountAddress.Type;
    regId: string;
}
export interface UpdateSummary extends BaseBlockItemSummary {
    type: TransactionSummaryType.UpdateTransaction;
    effectiveTime: bigint;
    payload: UpdateInstructionPayload;
}
export type BlockItemSummary = AccountTransactionSummary | AccountCreationSummary | UpdateSummary;
export interface BlockItemSummaryInBlock {
    blockHash: BlockHash.Type;
    summary: BlockItemSummary;
}
export interface PendingBlockItem {
    status: TransactionStatusEnum.Received;
}
export interface CommittedBlockItem {
    status: TransactionStatusEnum.Committed;
    outcomes: BlockItemSummaryInBlock[];
}
export interface FinalizedBlockItem {
    status: TransactionStatusEnum.Finalized;
    outcome: BlockItemSummaryInBlock;
}
export type BlockItemStatus = CommittedBlockItem | FinalizedBlockItem | PendingBlockItem;
/**
 * Type predicate for {@link InitContractSummary}.
 *
 * @param {BlockItemSummary} summary - The block item summary to check.
 *
 * @returns {boolean} whether summary is of type `InitContractSummary`.
 */
export declare const isInitContractSummary: (summary: BlockItemSummary) => summary is BaseAccountTransactionSummary & InitContractSummary;
/**
 * Type predicate for {@link UpdateContractSummary}.
 *
 * @param {BlockItemSummary} summary - The block item summary to check.
 *
 * @returns {boolean} whether summary is of type `UpdateContractSummary`.
 */
export declare const isUpdateContractSummary: (summary: BlockItemSummary) => summary is BaseAccountTransactionSummary & UpdateContractSummary;
/**
 * Type predicate for transfer-like transactions.
 *
 * @param {BlockItemSummary} summary - The block item summary to check.
 *
 * @returns {boolean} whether summary is of type `TransferSummary` or `TransferWithMemoSummary`.
 */
export declare const isTransferLikeSummary: (summary: BlockItemSummary) => summary is BaseAccountTransactionSummary & (TransferSummary | TransferWithMemoSummary);
/**
 * Type predicate for {@link FailedTransactionSummary}.
 *
 * @param {BlockItemSummary} summary - The block item summary to check.
 *
 * @returns {boolean} whether transaction was rejected.
 */
export declare const isRejectTransaction: (summary: BlockItemSummary) => summary is BaseAccountTransactionSummary & FailedTransactionSummary;
/**
 * Helper function to determine whether a transaction was successful (inverse of {@link isRejectTransaction}).
 *
 * @param {BlockItemSummary} summary - The block item summary to check.
 *
 * @returns {boolean} whether transaction was successful.
 */
export declare const isSuccessTransaction: (summary: BlockItemSummary) => summary is (BaseAccountTransactionSummary & TransferSummary) | (BaseAccountTransactionSummary & TransferWithMemoSummary) | (BaseAccountTransactionSummary & TransferWithScheduleSummary) | (BaseAccountTransactionSummary & TransferWithScheduleAndMemoSummary) | (BaseAccountTransactionSummary & EncryptedAmountTransferSummary) | (BaseAccountTransactionSummary & EncryptedAmountTransferWithMemoSummary) | (BaseAccountTransactionSummary & ModuleDeployedSummary) | (BaseAccountTransactionSummary & InitContractSummary) | (BaseAccountTransactionSummary & UpdateContractSummary) | (BaseAccountTransactionSummary & DataRegisteredSummary) | (BaseAccountTransactionSummary & TransferToPublicSummary) | (BaseAccountTransactionSummary & TransferToEncryptedSummary) | (BaseAccountTransactionSummary & AddBakerSummary) | (BaseAccountTransactionSummary & RemoveBakerSummary) | (BaseAccountTransactionSummary & UpdateBakerKeysSummary) | (BaseAccountTransactionSummary & UpdateBakerStakeSummary) | (BaseAccountTransactionSummary & UpdateBakerRestakeEarningsSummary) | (BaseAccountTransactionSummary & ConfigureBakerSummary) | (BaseAccountTransactionSummary & ConfigureDelegationSummary) | (BaseAccountTransactionSummary & UpdateCredentialKeysSummary) | (BaseAccountTransactionSummary & UpdateCredentialsSummary) | AccountCreationSummary | UpdateSummary;
/**
 * Gets the {@link RejectReason} for rejected transction.
 *
 * @param {BlockItemSummary} summary - The block item summary to check.
 *
 * @returns {RejectReason | undfined} Reject reason if `summary` is a rejected transaction. Otherwise returns undefined.
 */
export declare function getTransactionRejectReason<T extends FailedTransactionSummary>(summary: T): RejectReason;
export declare function getTransactionRejectReason(summary: AccountCreationSummary | UpdateSummary): undefined;
export declare function getTransactionRejectReason(summary: Exclude<AccountTransactionSummary, FailedTransactionSummary>): undefined;
export declare function getTransactionRejectReason(summary: BlockItemSummary): RejectReason | undefined;
/**
 * Gets the receiver account of a transaction, if the transaction is a transfer transaction (excluding encrypted transfers).
 *
 * @param {BlockItemSummary} summary - The block item summary to check.
 *
 * @returns {Base58String | undefined} The receiver account for transfer transactions. Otherwise returns undefined.
 */
export declare function getReceiverAccount<T extends TransferSummary | TransferWithMemoSummary | TransferWithScheduleSummary | TransferWithScheduleAndMemoSummary>(summary: T): AccountAddress.Type;
export declare function getReceiverAccount(summary: Exclude<AccountTransactionSummary, TransferSummary | TransferWithMemoSummary | TransferWithScheduleSummary | TransferWithScheduleAndMemoSummary>): undefined;
export declare function getReceiverAccount(summary: AccountCreationSummary | UpdateSummary): undefined;
export declare function getReceiverAccount(summary: BlockItemSummary): AccountAddress.Type | undefined;
/**
 * Gets a list of {@link ContractAddress} contract addresses affected by the transaction.
 *
 * @param {BlockItemSummary} summary - The block item summary to check.
 *
 * @returns {ContractAddress[]} List of contract addresses affected by the transaction.
 */
export declare function affectedContracts<T extends InitContractSummary | UpdateContractSummary>(summary: T): ContractAddress.Type[];
export declare function affectedContracts(summary: Exclude<AccountTransactionSummary, InitContractSummary | UpdateContractSummary>): never[];
export declare function affectedContracts(summary: AccountCreationSummary | UpdateSummary): never[];
export declare function affectedContracts(summary: BlockItemSummary): ContractAddress.Type[];
/**
 * Gets a list of {@link Base58String} account addresses affected by the transaction.
 *
 * @param {BlockItemSummary} summary - The block item summary to check.
 *
 * @returns {AccountAddress.Type[]} List of account addresses affected by the transaction.
 */
export declare function affectedAccounts(summary: AccountTransactionSummary): AccountAddress.Type[];
export declare function affectedAccounts(summary: AccountCreationSummary | UpdateSummary): never[];
export declare function affectedAccounts(summary: BlockItemSummary): AccountAddress.Type[];
export type SummaryContractUpdateLog = {
    address: ContractAddress.Type;
    events: ContractEvent.Type[];
};
/**
 * Gets a list of update logs, each consisting of a {@link ContractAddress.Type} and a list of {@link ContractEvent.Type} events.
 * The list will be empty for any transaction type but {@link UpdateContractSummary} contract updates.
 *
 * @param {BlockItemSummary} summary - The block item summary to check.
 *
 * @returns {SummaryContractUpdateLog[]} List of update logs corresponding to the transaction.
 */
export declare function getSummaryContractUpdateLogs<T extends UpdateContractSummary>(summary: T): SummaryContractUpdateLog[];
export declare function getSummaryContractUpdateLogs(summary: AccountCreationSummary | UpdateSummary): never[];
export declare function getSummaryContractUpdateLogs(summary: Exclude<AccountTransactionSummary, UpdateContractSummary>): never[];
export declare function getSummaryContractUpdateLogs(summary: BlockItemSummary): SummaryContractUpdateLog[];
