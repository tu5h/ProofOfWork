import type * as Proto from '../grpc-api/v2/concordium/types.js';
import type { HexString } from '../types.js';
import { TypedJson, TypedJsonDiscriminator } from './util.js';
/**
 * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.
 * @deprecated
 */
export declare const JSON_DISCRIMINATOR = TypedJsonDiscriminator.ModuleReference;
/**
 * @deprecated
 */
export type Serializable = HexString;
/**
 * Reference to a smart contract module.
 */
declare class ModuleReference {
    /** Internal field, the module reference represented as a hex string. */
    readonly moduleRef: HexString;
    /** Internal field, buffer containing the 32 bytes for the module reference. */
    readonly decodedModuleRef: Uint8Array;
    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
    private __type;
    constructor(
    /** Internal field, the module reference represented as a hex string. */
    moduleRef: HexString, 
    /** Internal field, buffer containing the 32 bytes for the module reference. */
    decodedModuleRef: Uint8Array);
    /**
     * Get a string representation of the module reference.
     * @returns {string} The string representation.
     */
    toString(): string;
    /**
     * Get a JSON-serializable representation of the module reference.
     * @returns {HexString} The JSON-serializable representation.
     */
    toJSON(): HexString;
}
/**
 * Converts a {@linkcode HexString} to a module reference.
 * @param {HexString} json The JSON representation of the module reference.
 * @returns {ModuleReference} The module reference.
 */
export declare function fromJSON(json: HexString): ModuleReference;
/**
 * Unwraps {@linkcode Type} value
 * @deprecated Use the {@linkcode ModuleReference.toJSON} method instead.
 * @param value value to unwrap.
 * @returns the unwrapped {@linkcode Serializable} value
 */
export declare function toUnwrappedJSON(value: Type): Serializable;
/**
 * Reference to a smart contract module.
 */
export type Type = ModuleReference;
/**
 * Type predicate for {@linkcode Type}
 *
 * @param value value to check.
 * @returns whether `value` is of type {@linkcode Type}
 */
export declare function instanceOf(value: unknown): value is ModuleReference;
/**
 * Create a ModuleReference from a buffer of 32 bytes.
 * @param {ArrayBuffer} buffer Buffer containing 32 bytes for the hash.
 * @throws If the provided buffer does not contain exactly 32 bytes.
 * @returns {ModuleReference} A module reference.
 */
export declare function fromBuffer(buffer: ArrayBuffer): ModuleReference;
/**
 * Create a ModuleReference from a hex string.
 * @param {HexString} moduleRef Hex encoding of the module reference.
 * @throws If the provided hex encoding does not correspond to a buffer of exactly 32 bytes.
 * @returns {ModuleReference} A module reference.
 */
export declare function fromHexString(moduleRef: HexString): ModuleReference;
/**
 * Get the module reference bytes encoded as hex.
 * @param {ModuleReference} moduleReference The module reference.
 * @returns {HexString} String with hex encoding.
 */
export declare function toHexString(moduleReference: ModuleReference): HexString;
/**
 * Convert module reference from its protobuf encoding.
 * @param {Proto.ModuleRef} moduleReference The module reference in protobuf.
 * @returns {ModuleReference} The module reference.
 */
export declare function fromProto(moduleReference: Proto.ModuleRef): ModuleReference;
/**
 * Convert module reference into its protobuf encoding.
 * @param {ModuleReference} moduleReference The module reference.
 * @returns {Proto.ModuleRef} The protobuf encoding.
 */
export declare function toProto(moduleReference: ModuleReference): Proto.ModuleRef;
/**
 * Check if two module references are the same.
 * @param {ModuleReference} left
 * @param {ModuleReference} right
 * @returns {boolean} True if they are equal.
 */
export declare function equals(left: ModuleReference, right: ModuleReference): boolean;
/**
 * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
 * @deprecated Use the {@linkcode ModuleReference.toJSON} method instead.
 * @param {Type} value - The account address instance to transform.
 * @returns {TypedJson} The transformed object.
 */
export declare function toTypedJSON(value: ModuleReference): TypedJson<Serializable>;
/**
 * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.
 * @deprecated Use the {@linkcode fromJSON} function instead.
 * @param {TypedJson} json - The typed JSON to convert.
 * @throws {TypedJsonParseError} - If unexpected JSON string is passed.
 * @returns {Type} The parsed instance.
 */
export declare const fromTypedJSON: ({ ["@type"]: type, value }: TypedJson<string>) => string | ModuleReference;
export {};
