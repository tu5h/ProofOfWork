import { Buffer } from 'buffer/index.js';
import { TypedJsonDiscriminator, makeFromTypedJson } from './util.js';
/**
 * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.
 * @deprecated
 */
export const JSON_DISCRIMINATOR = TypedJsonDiscriminator.TransactionHash;
/**
 * The number of bytes used to represent a transaction hash.
 */
const TRANSACTION_HASH_BYTE_LENGTH = 32;
/** Hash of a transaction. */
class TransactionHash {
    constructor(
    /** Internal buffer with the hash. */
    buffer) {
        this.buffer = buffer;
        /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
        this.__type = JSON_DISCRIMINATOR;
    }
    /**
     * Get a string representation of the transaction hash.
     * @returns {string} The string representation.
     */
    toString() {
        return toHexString(this);
    }
    /**
     * Get a JSON-serializable representation of the transaction hash.
     * @returns {HexString} The JSON-serializable representation.
     */
    toJSON() {
        return toHexString(this);
    }
}
/**
 * Converts a {@linkcode HexString} to a transaction hash.
 * @param {HexString} json The JSON representation of the transaction hash.
 * @returns {TransactionHash} The transaction hash.
 */
export function fromJSON(json) {
    return fromHexString(json);
}
/**
 * Unwraps {@linkcode Type} value
 * @deprecated Use the {@linkcode TransactionHash.toJSON} method instead.
 * @param value value to unwrap.
 * @returns the unwrapped {@linkcode Serializable} value
 */
export function toUnwrappedJSON(value) {
    return toHexString(value);
}
/**
 * Type predicate for {@linkcode Type}
 *
 * @param value value to check.
 * @returns whether `value` is of type {@linkcode Type}
 */
export function instanceOf(value) {
    return value instanceof TransactionHash;
}
/**
 * Create a TransactionHash from a buffer.
 * @param {ArrayBuffer} buffer Bytes for the transaction hash. Must be exactly 32 bytes.
 * @throws If the provided buffer does not contain 32 bytes.
 * @returns {TransactionHash}
 */
export function fromBuffer(buffer) {
    if (buffer.byteLength !== TRANSACTION_HASH_BYTE_LENGTH) {
        throw new Error(`Invalid transaction hash provided: Expected a buffer containing 32 bytes, instead got '${Buffer.from(buffer).toString('hex')}'.`);
    }
    return new TransactionHash(new Uint8Array(buffer));
}
/**
 * Create a TransactionHash from a hex string.
 * @param {HexString} hex String with hex encoding of the transaction hash.
 * @throws if the encoding does not correspond to exactly 32 bytes.
 * @returns {TransactionHash}
 */
export function fromHexString(hex) {
    return fromBuffer(Buffer.from(hex, 'hex'));
}
/**
 * Convert a transaction hash into a hex encoded string.
 * @param {TransactionHash} hash TransactionHash to convert to hex.
 * @returns {HexString} String with hex encoding.
 */
export function toHexString(hash) {
    return Buffer.from(hash.buffer).toString('hex');
}
/**
 * Get byte representation of a TransactionHash.
 * @param {TransactionHash} hash The transaction hash.
 * @returns {ArrayBuffer} Hash represented as bytes.
 */
export function toBuffer(hash) {
    return hash.buffer;
}
/**
 * Convert a transaction hash from its protobuf encoding.
 * @param {Proto.TransactionHash} transactionHash The transaction hash in protobuf.
 * @returns {TransactionHash} The transaction hash.
 */
export function fromProto(transactionHash) {
    return fromBuffer(transactionHash.value);
}
/**
 * Convert a transaction hash into its protobuf encoding.
 * @param {TransactionHash} transactionHash The transaction hash.
 * @returns {Proto.TransactionHash} The protobuf encoding.
 */
export function toProto(transactionHash) {
    return {
        value: transactionHash.buffer,
    };
}
/**
 * Check if two transaction hashes are the same.
 * @param {TransactionHash} left
 * @param {TransactionHash} right
 * @returns {boolean} True if they are equal.
 */
export function equals(left, right) {
    for (let i = 0; i < TRANSACTION_HASH_BYTE_LENGTH; i++) {
        if (left.buffer.at(i) !== right.buffer.at(i)) {
            return false;
        }
    }
    return true;
}
/**
 * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
 * @deprecated Use the {@linkcode TransactionHash.toJSON} method instead.
 * @param {Type} value - The account address instance to transform.
 * @returns {TypedJson} The transformed object.
 */
export function toTypedJSON(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR,
        value: toHexString(value),
    };
}
/**
 * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.
 * @deprecated Use the {@linkcode fromJSON} function instead.
 * @param {TypedJson} json - The typed JSON to convert.
 * @throws {TypedJsonParseError} - If unexpected JSON string is passed.
 * @returns {Type} The parsed instance.
 */
export const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromHexString);
//# sourceMappingURL=TransactionHash.js.map