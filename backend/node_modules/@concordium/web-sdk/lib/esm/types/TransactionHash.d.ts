import type * as Proto from '../grpc-api/v2/concordium/types.js';
import type { HexString } from '../types.js';
import { TypedJson, TypedJsonDiscriminator } from './util.js';
/**
 * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.
 * @deprecated
 */
export declare const JSON_DISCRIMINATOR = TypedJsonDiscriminator.TransactionHash;
/**
 * @deprecated
 */
export type Serializable = HexString;
/** Hash of a transaction. */
declare class TransactionHash {
    /** Internal buffer with the hash. */
    readonly buffer: Uint8Array;
    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
    private __type;
    constructor(
    /** Internal buffer with the hash. */
    buffer: Uint8Array);
    /**
     * Get a string representation of the transaction hash.
     * @returns {string} The string representation.
     */
    toString(): string;
    /**
     * Get a JSON-serializable representation of the transaction hash.
     * @returns {HexString} The JSON-serializable representation.
     */
    toJSON(): HexString;
}
/**
 * Converts a {@linkcode HexString} to a transaction hash.
 * @param {HexString} json The JSON representation of the transaction hash.
 * @returns {TransactionHash} The transaction hash.
 */
export declare function fromJSON(json: HexString): TransactionHash;
/**
 * Unwraps {@linkcode Type} value
 * @deprecated Use the {@linkcode TransactionHash.toJSON} method instead.
 * @param value value to unwrap.
 * @returns the unwrapped {@linkcode Serializable} value
 */
export declare function toUnwrappedJSON(value: Type): Serializable;
/** Hash of a transaction. */
export type Type = TransactionHash;
/**
 * Type predicate for {@linkcode Type}
 *
 * @param value value to check.
 * @returns whether `value` is of type {@linkcode Type}
 */
export declare function instanceOf(value: unknown): value is TransactionHash;
/**
 * Create a TransactionHash from a buffer.
 * @param {ArrayBuffer} buffer Bytes for the transaction hash. Must be exactly 32 bytes.
 * @throws If the provided buffer does not contain 32 bytes.
 * @returns {TransactionHash}
 */
export declare function fromBuffer(buffer: ArrayBuffer): TransactionHash;
/**
 * Create a TransactionHash from a hex string.
 * @param {HexString} hex String with hex encoding of the transaction hash.
 * @throws if the encoding does not correspond to exactly 32 bytes.
 * @returns {TransactionHash}
 */
export declare function fromHexString(hex: HexString): TransactionHash;
/**
 * Convert a transaction hash into a hex encoded string.
 * @param {TransactionHash} hash TransactionHash to convert to hex.
 * @returns {HexString} String with hex encoding.
 */
export declare function toHexString(hash: TransactionHash): HexString;
/**
 * Get byte representation of a TransactionHash.
 * @param {TransactionHash} hash The transaction hash.
 * @returns {ArrayBuffer} Hash represented as bytes.
 */
export declare function toBuffer(hash: TransactionHash): Uint8Array;
/**
 * Convert a transaction hash from its protobuf encoding.
 * @param {Proto.TransactionHash} transactionHash The transaction hash in protobuf.
 * @returns {TransactionHash} The transaction hash.
 */
export declare function fromProto(transactionHash: Proto.TransactionHash): TransactionHash;
/**
 * Convert a transaction hash into its protobuf encoding.
 * @param {TransactionHash} transactionHash The transaction hash.
 * @returns {Proto.TransactionHash} The protobuf encoding.
 */
export declare function toProto(transactionHash: TransactionHash): Proto.TransactionHash;
/**
 * Check if two transaction hashes are the same.
 * @param {TransactionHash} left
 * @param {TransactionHash} right
 * @returns {boolean} True if they are equal.
 */
export declare function equals(left: TransactionHash, right: TransactionHash): boolean;
/**
 * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
 * @deprecated Use the {@linkcode TransactionHash.toJSON} method instead.
 * @param {Type} value - The account address instance to transform.
 * @returns {TypedJson} The transformed object.
 */
export declare function toTypedJSON(value: TransactionHash): TypedJson<Serializable>;
/**
 * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.
 * @deprecated Use the {@linkcode fromJSON} function instead.
 * @param {TypedJson} json - The typed JSON to convert.
 * @throws {TypedJsonParseError} - If unexpected JSON string is passed.
 * @returns {Type} The parsed instance.
 */
export declare const fromTypedJSON: ({ ["@type"]: type, value }: TypedJson<string>) => string | TransactionHash;
export {};
