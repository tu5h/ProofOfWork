import type * as Proto from '../grpc-api/v2/concordium/types.js';
import { TypedJson, TypedJsonDiscriminator } from './util.js';
/**
 * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.
 * @deprecated
 */
export declare const JSON_DISCRIMINATOR = TypedJsonDiscriminator.ContractAddress;
type ContractAddressLike<T> = {
    index: T;
    subindex: T;
};
export type Serializable = ContractAddressLike<string>;
/** Address of a smart contract instance. */
declare class ContractAddress implements ContractAddressLike<bigint> {
    /** The index of the smart contract address. */
    readonly index: bigint;
    /** The subindex of the smart contract address. */
    readonly subindex: bigint;
    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
    private __type;
    constructor(
    /** The index of the smart contract address. */
    index: bigint, 
    /** The subindex of the smart contract address. */
    subindex: bigint);
    /**
     * Get a string representation of the contract address using the `<index, subindex>` format.
     * @returns {string} The string representation.
     */
    toString(): string;
}
/**
 * Unwraps {@linkcode Type} value
 *
 * @param value value to unwrap.
 * @returns the unwrapped {@linkcode Serializable} value
 */
export declare function toUnwrappedJSON({ index, subindex }: Type): ContractAddressLike<bigint>;
/** Address of a smart contract instance. */
export type Type = ContractAddress;
/**
 * Type predicate for {@linkcode Type}
 *
 * @param value value to check.
 * @returns whether `value` is of type {@linkcode Type}
 */
export declare function instanceOf(value: unknown): value is ContractAddress;
/**
 * Construct a ContractAddress type.
 * @param {number | bigint} index The index of the smart contract instance.
 * @param {number | bigint} [subindex] The subindex of the smart contract instance. Defaults to 0.
 * @throws If provided index or subindex is sub-zero.
 * @returns {ContractAddress}
 */
export declare function create(index: number | bigint, subindex?: number | bigint): ContractAddress;
/** Type used when encoding a contract address in the JSON format used when serializing using a smart contract schema type. */
export type SchemaValue = {
    index: bigint;
    subindex: bigint;
};
/**
 * Get contract address in the JSON format used when serializing using a smart contract schema type.
 * @param {ContractAddress} contractAddress The contract address.
 * @returns {SchemaValue} The schema JSON representation.
 */
export declare function toSchemaValue(contractAddress: ContractAddress): SchemaValue;
/**
 * Convert to contract address from JSON format used when serializing using a smart contract schema type.
 * @param {SchemaValue} contractAddress The contract address in schema JSON format.
 * @returns {ContractAddress} The contract address.
 */
export declare function fromSchemaValue(contractAddress: SchemaValue): ContractAddress;
/**
 * Convert a smart contract address from its protobuf encoding.
 * @param {Proto.ContractAddress} contractAddress The contract address in protobuf.
 * @returns {ContractAddress} The contract address.
 */
export declare function fromProto(contractAddress: Proto.ContractAddress): ContractAddress;
/**
 * Convert a smart contract address into its protobuf encoding.
 * @param {ContractAddress} contractAddress The contract address.
 * @returns {Proto.ContractAddress} The protobuf encoding.
 */
export declare function toProto(contractAddress: ContractAddress): Proto.ContractAddress;
/**
 * Check if two contract addresses are the same.
 * @param {ContractAddress} left
 * @param {ContractAddress} right
 * @returns {boolean} True if they are equal.
 */
export declare function equals(left: ContractAddress, right: ContractAddress): boolean;
/**
 * Constructs a {@linkcode ContractAddress} from {@linkcode Serializable}.
 * @param {Serializable} value
 * @returns {ContractAddress} The contract address.
 */
export declare function fromSerializable(value: Serializable): ContractAddress;
/**
 * Converts {@linkcode ContractAddress} into {@linkcode Serializable}.
 * @param {ContractAddress} contractAddress
 * @returns {Serializable} The serializable contract address
 */
export declare function toSerializable(contractAddress: ContractAddress): Serializable;
/**
 * Converts {@linkcode ContractAddress} into a string using the `<index, subindex>` format.
 * @deprecated Use the {@linkcode ContractAddress.toString} method instead.
 * @param {ContractAddress} contractAddress
 * @returns {string} The string representation of the address.
 */
export declare function toString(contractAddress: ContractAddress): string;
/**
 * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
 * @deprecated Use the {@linkcode toSerializable} function instead.
 * @param {Type} value - The account address instance to transform.
 * @returns {TypedJson} The transformed object.
 */
export declare function toTypedJSON(value: ContractAddress): TypedJson<Serializable>;
/**
 * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.
 * @deprecated Use the {@linkcode fromSerializable} function instead.
 * @param {TypedJson} json - The typed JSON to convert.
 * @throws {TypedJsonParseError} - If unexpected JSON string is passed.
 * @returns {Type} The parsed instance.
 */
export declare const fromTypedJSON: ({ ["@type"]: type, value }: TypedJson<Serializable>) => Serializable | ContractAddress;
export {};
