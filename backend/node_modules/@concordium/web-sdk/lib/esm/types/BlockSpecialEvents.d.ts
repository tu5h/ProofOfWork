import type { BakerId } from '../types.js';
import * as AccountAddress from './AccountAddress.js';
import * as CcdAmount from './CcdAmount.js';
export type BlockSpecialEvent = BlockSpecialEventBakingRewards | BlockSpecialEventMint | BlockSpecialEventFinalizationRewards | BlockSpecialEventBlockReward | BlockSpecialEventPaydayFoundationReward | BlockSpecialEventPaydayAccountReward | BlockSpecialEventBlockAccrueReward | BlockSpecialEventPaydayPoolReward;
export interface BlockSpecialEventBakingRewards {
    tag: 'bakingRewards';
    bakingRewards: BlockSpecialEventAccountAmount[];
    remainder: CcdAmount.Type;
}
export interface BlockSpecialEventMint {
    tag: 'mint';
    mintBakingReward: CcdAmount.Type;
    mintFinalizationReward: CcdAmount.Type;
    mintPlatformDevelopmentCharge: CcdAmount.Type;
    foundationAccount: AccountAddress.Type;
}
export interface BlockSpecialEventFinalizationRewards {
    tag: 'finalizationRewards';
    finalizationRewards?: BlockSpecialEventAccountAmount[];
    remainder?: CcdAmount.Type;
}
export interface BlockSpecialEventBlockReward {
    tag: 'blockReward';
    transactionFees: CcdAmount.Type;
    oldGasAccount: CcdAmount.Type;
    newGasAccount: CcdAmount.Type;
    bakerReward: CcdAmount.Type;
    foundationCharge: CcdAmount.Type;
    baker: AccountAddress.Type;
    foundationAccount: AccountAddress.Type;
}
export interface BlockSpecialEventPaydayFoundationReward {
    tag: 'paydayFoundationReward';
    foundationAccount: AccountAddress.Type;
    developmentCharge: CcdAmount.Type;
}
export interface BlockSpecialEventPaydayAccountReward {
    tag: 'paydayAccountReward';
    account: AccountAddress.Type;
    transactionFees: CcdAmount.Type;
    bakerReward: CcdAmount.Type;
    finalizationReward: CcdAmount.Type;
}
export interface BlockSpecialEventBlockAccrueReward {
    tag: 'blockAccrueReward';
    transactionFees: CcdAmount.Type;
    oldGasAccount: CcdAmount.Type;
    newGasAccount: CcdAmount.Type;
    bakerReward: CcdAmount.Type;
    passiveReward: CcdAmount.Type;
    foundationCharge: CcdAmount.Type;
    baker: BakerId;
}
export interface BlockSpecialEventPaydayPoolReward {
    tag: 'paydayPoolReward';
    poolOwner?: BakerId;
    transactionFees: CcdAmount.Type;
    bakerReward: CcdAmount.Type;
    finalizationReward: CcdAmount.Type;
}
export interface BlockSpecialEventAccountAmount {
    account: AccountAddress.Type;
    amount: CcdAmount.Type;
}
/**
 * Gets a list of {@link AccountAddress.Type} account addresses affected the {@link BlockSpecialEvent}.
 *
 * @param {BlockSpecialEvent} event - The block special event to check.
 *
 * @returns {AccountAddress.Type[]} List of account addresses affected by the event.
 */
export declare function specialEventAffectedAccounts(event: Exclude<BlockSpecialEvent, BlockSpecialEventBlockAccrueReward | BlockSpecialEventPaydayPoolReward>): AccountAddress.Type[];
export declare function specialEventAffectedAccounts(event: BlockSpecialEventBlockAccrueReward | BlockSpecialEventPaydayPoolReward): never[];
export declare function specialEventAffectedAccounts(event: BlockSpecialEvent): AccountAddress.Type[];
