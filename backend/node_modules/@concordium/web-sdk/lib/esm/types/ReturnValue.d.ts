import { SchemaType } from '../schemaTypes.js';
import type { Base64String, HexString, SmartContractTypeValues } from '../types.js';
import { TypedJson, TypedJsonDiscriminator } from './util.js';
/**
 * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.
 * @deprecated
 */
export declare const JSON_DISCRIMINATOR = TypedJsonDiscriminator.ReturnValue;
/**
 * @deprecated
 */
export type Serializable = HexString;
/** Return value from invoking a smart contract entrypoint. */
declare class ReturnValue {
    /** Internal buffer of bytes representing the return type. */
    readonly buffer: Uint8Array;
    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
    private __type;
    constructor(
    /** Internal buffer of bytes representing the return type. */
    buffer: Uint8Array);
    /**
     * Get a string representation of the return value.
     * @returns {string} The string representation.
     */
    toString(): string;
    /**
     * Get a JSON-serializable representation of the return value.
     * @returns {HexString} The JSON-serializable representation.
     */
    toJSON(): HexString;
}
/**
 * Converts a {@linkcode HexString} to a return value.
 * @param {HexString} json The JSON representation of the return value.
 * @returns {ReturnValue} The return value.
 */
export declare function fromJSON(json: HexString): ReturnValue;
/**
 * Unwraps {@linkcode Type} value
 * @deprecated Use the {@linkcode ReturnValue.toJSON} method instead.
 * @param value value to unwrap.
 * @returns the unwrapped {@linkcode Serializable} value
 */
export declare function toUnwrappedJSON(value: Type): Serializable;
/** Return value from invoking a smart contract entrypoint. */
export type Type = ReturnValue;
/**
 * Type predicate for {@linkcode Type}
 *
 * @param value value to check.
 * @returns whether `value` is of type {@linkcode Type}
 */
export declare function instanceOf(value: unknown): value is ReturnValue;
/**
 * Create an empty return value.
 * @returns {ReturnValue} An empty return value.
 */
export declare function empty(): ReturnValue;
/**
 * Create a return type from invoking a smart contract entrypoint.
 * @param {ArrayBuffer} buffer The buffer of bytes representing the return value.
 * @returns {ReturnValue}
 */
export declare function fromBuffer(buffer: ArrayBuffer): ReturnValue;
/**
 * Create a return type from invoking a smart contract entrypoint from a hex string.
 * @param {HexString} hex The hex string representing the return value.
 * @returns {ReturnValue}
 */
export declare function fromHexString(hex: HexString): ReturnValue;
/**
 * Convert a return value into a hex string.
 * @param {ReturnValue} returnValue The return value to encode in a hex string.
 * @returns {HexString} The return value encoded in hex.
 */
export declare function toHexString(returnValue: ReturnValue): HexString;
/**
 * Convert a return value into a buffer.
 * @param {ReturnValue} parameter The return value to get the buffer from.
 * @returns {Uint8Array}
 */
export declare function toBuffer(parameter: ReturnValue): Uint8Array;
/**
 * Convert a return value into a more structured representation using a schema type.
 * @param {ReturnValue} returnValue The return value.
 * @param {SchemaType} schemaType The schema type for the return value.
 * @returns {SmartContractTypeValues}
 */
export declare function parseWithSchemaType(returnValue: ReturnValue, schemaType: SchemaType): SmartContractTypeValues;
/**
 * Convert a return value into a more structured representation using a schema type.
 * @param {ReturnValue} returnValue The return value.
 * @param {Base64String} schemaBase64 The schema type for the return value.
 * @returns {SmartContractTypeValues}
 */
export declare function parseWithSchemaTypeBase64(returnValue: ReturnValue, schemaBase64: Base64String): SmartContractTypeValues;
/**
 * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
 * @deprecated Use the {@linkcode ReturnValue.toJSON} method instead.
 * @param {Type} value - The account address instance to transform.
 * @returns {TypedJson} The transformed object.
 */
export declare function toTypedJSON(value: ReturnValue): TypedJson<Serializable>;
/**
 * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.
 * @deprecated Use the {@linkcode fromJSON} function instead.
 * @param {TypedJson} json - The typed JSON to convert.
 * @throws {TypedJsonParseError} - If unexpected JSON string is passed.
 * @returns {Type} The parsed instance.
 */
export declare const fromTypedJSON: ({ ["@type"]: type, value }: TypedJson<string>) => string | ReturnValue;
export {};
