import { HexString } from '../types.js';
import { TypedJson, TypedJsonDiscriminator } from './util.js';
/**
 * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.
 * @deprecated
 */
export declare const JSON_DISCRIMINATOR = TypedJsonDiscriminator.CredentialRegistrationId;
/**
 * @deprecated
 */
export type Serializable = string;
/**
 * Representation of a credential registration id, which enforces that it:
 * - Is a valid Hex string
 * - Has length exactly 96, because a credId is 48 bytes.
 * - Checks the first bit is 1, which indicates that the value represents a compressed BLS12-381 curve point.
 */
declare class CredentialRegistrationId {
    /** Representation of a credential registration id */
    readonly credId: string;
    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
    private __type;
    constructor(
    /** Representation of a credential registration id */
    credId: string);
    /**
     * Get a string representation of the credential registration id.
     * @returns {string} The string representation.
     */
    toString(): string;
    /**
     * Get a JSON-serializable representation of the credential registration id.
     * @returns {string} The JSON-serializable representation.
     */
    toJSON(): string;
}
/**
 * Converts a `string` to a credential registration id.
 * @param {string} json The JSON representation of the credential registration id.
 * @throws If the provided input is: not a valid hex string, not of exactly 96 characters, the first bit is not 1.
 * @returns {CredentialRegistrationId} The credential registration id.
 */
export declare function fromJSON(json: string): CredentialRegistrationId;
/**
 * Representation of a credential registration id, which enforces that it:
 * - Is a valid Hex string
 * - Has length exactly 96, because a credId is 48 bytes.
 * - Checks the first bit is 1, which indicates that the value represents a compressed BLS12-381 curve point.
 */
export type Type = CredentialRegistrationId;
/**
 * Type predicate for {@linkcode Type}
 *
 * @param value value to check.
 * @returns whether `value` is of type {@linkcode Type}
 */
export declare function instanceOf(value: unknown): value is CredentialRegistrationId;
/**
 * Construct a CredentialRegistrationId from a hex string.
 * @param {HexString} credId The hex encoding of the credential registration id.
 * @throws If the provided input is: not a valid hex string, not of exactly 96 characters, the first bit is not 1.
 * @returns {CredentialRegistrationId}
 */
export declare function fromHexString(credId: HexString): CredentialRegistrationId;
/**
 * Get the hex string representation of the credential registatration ID.
 * @param {CredentialRegistrationId} cred The credential registration ID.
 * @returns {HexString} The hex encoding.
 */
export declare function toHexString(cred: CredentialRegistrationId): HexString;
/**
 * Get the byte representation of the credential registatration ID.
 * @param {CredentialRegistrationId} cred The credential registration ID.
 * @returns {Uint8Array} Buffer with byte representation.
 */
export declare function toBuffer(cred: CredentialRegistrationId): Uint8Array;
/**
 * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
 * @deprecated Use the {@linkcode CredentialRegistrationId.toJSON} method instead.
 * @param {Type} value - The account address instance to transform.
 * @returns {TypedJson} The transformed object.
 */
export declare function toTypedJSON(value: CredentialRegistrationId): TypedJson<Serializable>;
/**
 * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.
 * @deprecated Use the {@linkcode fromJSON} function instead.
 * @param {TypedJson} json - The typed JSON to convert.
 * @throws {TypedJsonParseError} - If unexpected JSON string is passed.
 * @returns {Type} The parsed instance.
 */
export declare const fromTypedJSON: ({ ["@type"]: type, value }: TypedJson<string>) => string | CredentialRegistrationId;
export {};
