import type * as Proto from '../grpc-api/v2/concordium/types.js';
import { TypedJson, TypedJsonDiscriminator } from './util.js';
/**
 * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.
 * @deprecated
 */
export declare const JSON_DISCRIMINATOR = TypedJsonDiscriminator.SequenceNumber;
/**
 * @deprecated
 */
export type Serializable = string;
/** Transaction sequence number. (Formerly refered as Nonce) */
declare class SequenceNumber {
    /** Internal value representing the sequence number. */
    readonly value: bigint;
    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
    private __type;
    constructor(
    /** Internal value representing the sequence number. */
    value: bigint);
    /**
     * Get a string representation of the sequence number.
     * @returns {string} The string representation.
     */
    toString(): string;
    /**
     * Get a JSON-serializable representation of the sequence number.
     * @returns {bigint} The JSON-serializable representation.
     */
    toJSON(): bigint;
}
/**
 * Converts a `bigint` to sequence number.
 * @param {bigint} json The JSON representation of the sequence number.
 * @returns {SequenceNumber} The sequence number.
 */
export declare function fromJSON(json: bigint): SequenceNumber;
/**
 * Unwraps {@linkcode Type} value
 * @deprecated Use the {@linkcode SequenceNumber.toJSON} method instead.
 * @param value value to unwrap.
 * @returns the unwrapped {@linkcode bigint} value
 */
export declare function toUnwrappedJSON(value: Type): bigint;
/** A transaction sequence number. (Formerly refered as Nonce) */
export type Type = SequenceNumber;
/**
 * Type predicate for {@linkcode Type}
 *
 * @param value value to check.
 * @returns whether `value` is of type {@linkcode Type}
 */
export declare function instanceOf(value: unknown): value is SequenceNumber;
/**
 * Construct an SequenceNumber type.
 * @param {bigint | number} sequenceNumber The account sequence number.
 * @throws If `sequenceNumber` is not at least 1.
 * @returns {SequenceNumber}
 */
export declare function create(sequenceNumber: bigint | number): SequenceNumber;
/**
 * Convert a SequenceNumber from its protobuf encoding.
 * @param {Proto.SequenceNumber} sequenceNumber The sequence number in protobuf.
 * @returns {SequenceNumber} The sequence number.
 */
export declare function fromProto(sequenceNumber: Proto.SequenceNumber): SequenceNumber;
/**
 * Convert a sequence number into its protobuf encoding.
 * @param {SequenceNumber} sequenceNumber The duration.
 * @returns {Proto.SequenceNumber} The protobuf encoding.
 */
export declare function toProto(sequenceNumber: SequenceNumber): Proto.SequenceNumber;
/**
 * Constructs a {@linkcode Type} from {@linkcode Serializable}.
 * @deprecated Use the {@linkcode SequenceNumber.fromJSON} method instead.
 * @param {Serializable} value
 * @returns {Type} The duration.
 */
export declare function fromSerializable(value: Serializable): Type;
/**
 * Converts {@linkcode Type} into {@linkcode Serializable}.
 * @deprecated Use the {@linkcode SequenceNumber.toJSON} method instead.
 * @param {Type} value
 * @returns {Serializable} The serializable value
 */
export declare function toSerializable(value: Type): Serializable;
/**
 * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
 * @deprecated Use the {@linkcode SequenceNumber.toJSON} method instead.
 * @param {Type} value - The account address instance to transform.
 * @returns {TypedJson} The transformed object.
 */
export declare function toTypedJSON(value: SequenceNumber): TypedJson<Serializable>;
/**
 * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.
 * @deprecated Use the {@linkcode fromJSON} function instead.
 * @param {TypedJson} json - The typed JSON to convert.
 * @throws {TypedJsonParseError} - If unexpected JSON string is passed.
 * @returns {Type} The parsed instance.
 */
export declare const fromTypedJSON: ({ ["@type"]: type, value }: TypedJson<string>) => string | SequenceNumber;
export {};
