import JSONBigInt from 'json-bigint';
/**
 * Type predicate to check if the proof is a {@linkcode VerifiableCredentialProofWeb3Id}, or consequently a {@linkcode VerifiableCredentialProofAccount}
 */
export function isWeb3IdProof(proof) {
    return proof.credentialSubject.proof.commitments !== undefined;
}
/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */
/**
 * Replacer to ensure dates are stringified to the timestamp attribute format.
 */
export function replaceDateWithTimeStampAttribute(k, value) {
    const rawValue = this[k];
    if (rawValue instanceof Date) {
        return { type: 'date-time', timestamp: rawValue.toISOString() };
    }
    return value;
}
/**
 * Reviver to ensure dates are parsed from the timestamp attribute format.
 */
export function reviveDateFromTimeStampAttribute(_key, value) {
    if (value.type === 'date-time' && typeof value.timestamp === 'string' && Object.keys(value).length === 2) {
        return new Date(Date.parse(value.timestamp));
    }
    return value;
}
export class VerifiablePresentation {
    constructor(presentationContext, proof, type, verifiableCredential) {
        this.presentationContext = presentationContext;
        this.proof = proof;
        this.type = type;
        this.verifiableCredential = verifiableCredential;
    }
    toString() {
        return JSONBigInt({
            alwaysParseAsBig: true,
            useNativeBigInt: true,
        }).stringify(this);
    }
    static fromString(json) {
        // We allow all numbers to be parsed as bigints to avoid lossy conversion of attribute values. The structure does not contain any other numbers.
        const parsed = JSONBigInt({
            alwaysParseAsBig: true,
            useNativeBigInt: true,
        }).parse(json);
        return new VerifiablePresentation(parsed.presentationContext, parsed.proof, parsed.type, parsed.verifiableCredential);
    }
}
//# sourceMappingURL=VerifiablePresentation.js.map