import type * as Proto from '../grpc-api/v2/concordium/types.js';
import { Base58String } from '../types.js';
import { TypedJson, TypedJsonDiscriminator } from './util.js';
/**
 * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.
 * @deprecated
 */
export declare const JSON_DISCRIMINATOR = TypedJsonDiscriminator.AccountAddress;
/**
 * @deprecated
 */
export type Serializable = Base58String;
/**
 * Representation of an account address, which enforces that it:
 * - Is a valid base58 string with version byte of 1.
 * - The base58 string is a length of 50 (encoding exactly 32 bytes).
 */
declare class AccountAddress {
    /** The account address represented in base58check. */
    readonly address: string;
    /** The account address represented in bytes. */
    readonly decodedAddress: Uint8Array;
    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
    private __type;
    constructor(
    /** The account address represented in base58check. */
    address: string, 
    /** The account address represented in bytes. */
    decodedAddress: Uint8Array);
    /**
     * Get a string representation of the account address.
     *
     * @returns {string} The string representation.
     */
    toString(): string;
    /**
     * Get a JSON-serializable representation of the account address.
     * @returns {Base58String} The JSON-serializable representation.
     */
    toJSON(): Base58String;
}
/**
 * Converts a {@linkcode Base58String} to an account address.
 * @param {Base58String} json The JSON representation of the account address.
 * @returns {AccountAddress} The account address.
 */
export declare function fromJSON(json: Base58String): AccountAddress;
/**
 * Unwraps {@linkcode Type} value.
 * @deprecated Use the {@linkcode AccountAddress.toJSON} method instead.
 * @param value value to unwrap.
 * @returns the unwrapped {@linkcode Serializable} value
 */
export declare function toUnwrappedJSON(value: Type): Serializable;
/**
 * Representation of an account address, which enforces that it:
 * - Is a valid base58 string with version byte of 1.
 * - The base58 string is a length of 50 (encoding exactly 32 bytes).
 */
export type Type = AccountAddress;
/**
 * Type predicate for {@linkcode Type}
 *
 * @param value value to check.
 * @returns whether `value` is of type {@linkcode Type}
 */
export declare function instanceOf(value: unknown): value is AccountAddress;
/**
 * Construct an AccountAddress from a buffer of bytes.
 * @param {ArrayBuffer} buffer Buffer containing exactly 32 bytes representing the address of the account.
 * @throws If the provided buffer does not contain exactly 32 bytes.
 * @returns {AccountAddress} The AccountAddress.
 */
export declare function fromBuffer(buffer: ArrayBuffer): AccountAddress;
/**
 * Construct an AccountAddress from a base58check string.
 * @param {string} address String of base58check encoded account address, must use a byte version of 1.
 * @throws If the provided string is not: exactly 50 characters, a valid base58check encoding using version byte 1.
 * @returns {AccountAddress} The AccountAddress.
 */
export declare function fromBase58(address: string): AccountAddress;
/**
 * Get the bytes corresponding to the account address.
 * @param {AccountAddress} accountAddress The account address.
 */
export declare function toBuffer(accountAddress: AccountAddress): Uint8Array;
/**
 * Get a base58check string of the account address.
 * @param {AccountAddress} accountAddress The account address.
 */
export declare function toBase58(accountAddress: AccountAddress): string;
/** Type used when encoding an account address in the JSON format used when serializing using a smart contract schema type. */
export type SchemaValue = string;
/**
 * Get account address in the JSON format used when serializing using a smart contract schema type.
 * @param {AccountAddress} accountAddress The account address.
 * @returns {SchemaValue} The schema JSON representation.
 */
export declare function toSchemaValue(accountAddress: AccountAddress): SchemaValue;
/**
 * Convert to account address from JSON format used when serializing using a smart contract schema type.
 * @param {SchemaValue} accountAddress The account address in schema JSON format.
 * @returns {AccountAddress} The account address.
 */
export declare function fromSchemaValue(accountAddress: SchemaValue): AccountAddress;
/**
 * Given two accountAddresses, return whether they are aliases.
 * @param address an AccountAddress
 * @param alias another AccountAddress
 * @returns boolean that indicates whether address and alias are aliases
 */
export declare function isAlias(address: AccountAddress, alias: AccountAddress): boolean;
/**
 * Given an AccountAddress and a counter, returns an alias for the address.
 * @param address the account address for which the function should get an alias for
 * @param counter number s.t. 0 <= counter < 2^24, decides which alias is returned.
 * If a counter outside this scope is given, then the function will throw an exception
 * @returns an AccountAddress, which is an alias to the given address
 */
export declare function getAlias(address: AccountAddress, counter: number): AccountAddress;
/**
 * Convert an account address from its protobuf encoding.
 * @param {Proto.AccountAddress} accountAddress The account address in protobuf.
 * @returns {AccountAddress} The account address
 */
export declare function fromProto(accountAddress: Proto.AccountAddress): AccountAddress;
/**
 * Convert an account address into its protobuf encoding.
 * @param {AccountAddress} accountAddress The account address.
 * @returns {Proto.AccountAddress} The protobuf encoding.
 */
export declare function toProto(accountAddress: AccountAddress): Proto.AccountAddress;
/**
 * Check if two account addresses are the exact same. This will not consider different aliases for the same account as equal.
 * @param {AccountAddress} left
 * @param {AccountAddress} right
 * @returns {boolean} True if they are equal.
 */
export declare function equals(left: AccountAddress, right: AccountAddress): boolean;
/**
 * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
 * @deprecated Use the {@linkcode AccountAddress.toJSON} method instead.
 * @param {Type} value - The account address instance to transform.
 * @returns {TypedJson} The transformed object.
 */
export declare function toTypedJSON(value: AccountAddress): TypedJson<Serializable>;
/**
 * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.
 * @deprecated Use the {@linkcode fromJSON} function instead.
 * @param {TypedJson} json - The typed JSON to convert.
 * @throws {TypedJsonParseError} - If unexpected JSON string is passed.
 * @returns {Type} The parsed instance.
 */
export declare const fromTypedJSON: ({ ["@type"]: type, value }: TypedJson<string>) => string | AccountAddress;
export {};
