import { TypedJsonDiscriminator, makeFromTypedJson } from './util.js';
/**
 * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.
 * @deprecated
 */
export const JSON_DISCRIMINATOR = TypedJsonDiscriminator.Energy;
/** Energy measure. Used as part of cost calculations for transactions. */
class Energy {
    get serializable() {
        return this.value.toString();
    }
    constructor(
    /** The internal value for representing the energy. */
    value) {
        this.value = value;
        /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
        this.__type = JSON_DISCRIMINATOR;
    }
    /**
     * Get a string representation of the energy.
     * @returns {string} The string representation.
     */
    toString() {
        return this.value.toString();
    }
}
/**
 * Unwraps {@linkcode Type} value
 * @param value value to unwrap.
 * @returns the unwrapped {@linkcode bigint} value
 */
export function toUnwrappedJSON(value) {
    return value.value;
}
/**
 * Type predicate for {@linkcode Type}
 *
 * @param value value to check.
 * @returns whether `value` is of type {@linkcode Type}
 */
export function instanceOf(value) {
    return value instanceof Energy;
}
/**
 * Construct an Energy type.
 * @param {bigint | number} value The measure of energy.
 * @throws If the provided value is a negative number.
 * @returns {Energy}
 */
export function create(value) {
    if (value < 0) {
        throw new Error('Invalid energy: The value cannot be a negative number.');
    }
    return new Energy(BigInt(value));
}
/**
 * Convert energy from its protobuf encoding.
 * @param {Proto.Energy} energy The energy in protobuf.
 * @returns {Energy} The energy.
 */
export function fromProto(energy) {
    return new Energy(energy.value);
}
/**
 * Convert energy into its protobuf encoding.
 * @param {Energy} energy The energy.
 * @returns {Proto.Energy} The protobuf encoding.
 */
export function toProto(energy) {
    return {
        value: energy.value,
    };
}
/**
 * Constructs a {@linkcode Type} from {@linkcode Serializable}.
 * @param {Serializable} value
 * @returns {Type} The duration.
 */
export function fromSerializable(value) {
    return create(BigInt(value));
}
/**
 * Converts {@linkcode Type} into {@linkcode Serializable}
 * @param {Type} energy
 * @returns {Serializable} The serializable value
 */
export function toSerializable(energy) {
    return energy.value.toString();
}
/**
 * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
 * @deprecated Use the {@linkcode toSerializable} function instead.
 * @param {Type} value - The account address instance to transform.
 * @returns {TypedJson} The transformed object.
 */
export function toTypedJSON(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR,
        value: toSerializable(value),
    };
}
/**
 * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.
 * @deprecated Use the {@linkcode fromSerializable} function instead.
 * @param {TypedJson} json - The typed JSON to convert.
 * @throws {TypedJsonParseError} - If unexpected JSON string is passed.
 * @returns {Type} The parsed instance.
 */
export const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromSerializable);
//# sourceMappingURL=Energy.js.map