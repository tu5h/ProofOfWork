/**
 * Acts as an inverse for {@linkcode jsonStringify}.
 * @deprecated Manually convert the JSON structure instead. For account transactions,
 * parse the output with something that handles deserializing`bigint`s, e.g. the
 * `json-bigint` dependency, and use `AccountTransactionHandler.fromJSON`.
 */
export declare function jsonParse(input: string, reviver?: (this: any, key: string, value: any) => any): any;
type ReplacerFun = (this: any, key: string, value: any) => any;
/**
 * Stringify, which ensures concordium domain types are stringified in a restorable fashion.
 * This should be used if you want to be able to restore the concordium domain types in the JSON to its original types.
 * @deprecated Manually convert the object to the preferred JSON structure instead. For account transactions,
 * use `AccountTransactionHandler.toJSON` prior to invoking `JSON.stringify`. It's up to the developer to
 * handle serialization of `bigints`, e.g. with the `json-bigint` dependency.
 *
 * @param value A JavaScript value, usually an object or array, to be converted.
 * @param replacer A function that transforms the results.
 * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
 */
export declare function jsonStringify(input: any, replacer?: ReplacerFun, space?: string | number): string;
/**
 * Describes how bigints encountered in {@linkcode jsonUnwrapStringify} are handled by default.
 */
export declare const enum BigintFormatType {
    /** Use 'json-bigint' to safely convert `bigint`s to integers */
    Integer = 0,
    /** Convert `bigint`s to strings */
    String = 1,
    /** Do nothing, i.e. must be handled manually in replacer function. */
    None = 2
}
/**
 * Stringify, which ensures concordium domain types are unwrapped to their inner type before stringified.
 * This should be used if you want to manually deserialize the inner property values, as the serialization is irreversible.
 * @deprecated Manually convert the object to the preferred JSON structure instead. For account transactions,
 * use `AccountTransactionHandler.toJSON` prior to invoking `JSON.stringify`. It's up to the developer to
 * handle serialization of `bigints`, e.g. with the `json-bigint` dependency.
 *
 * @param value A JavaScript value, usually an object or array, to be converted.
 * @param bigintFormat Determines how to handle bigints. Can be set to either:
 * - `BigintFormatType.Number`: uses 'json-bigint to safely serialize,
 * - `BigintFormatType.String`: converts `bigint` to strings
 * - `BigintFormatType.None`: must be taken care of manually, e.g. in replacer function.
 * Defaults to BigintFormatType.None
 * @param replacer A function that transforms the results.
 * This overrides `bigintFormat`, and will also run on primitive values passed as `value.`
 * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
 *
 * @example
 * jsonUnwrapStringify(100n) => throws `TypeError`, as bigints cannot be serialized.
 * jsonUnwrapStringify(100n, BigintFormatType.None) => throws `TypeError`
 * jsonUnwrapStringify(100n, BigintFormatType.None, (_key, value) => 'replaced') => '"replaced"'
 *
 * jsonUnwrapStringify(100n, BigintFormatType.Number) => '100'
 * jsonUnwrapStringify(100n, BigintFormatType.Number, (_key, value) => -value) => '-100' // runs both replacer and bigintFormat
 * jsonUnwrapStringify(100n, BigintFormatType.Number, (_key, value) => 'replaced') => '"replaced"' // replacer takes precedence
 *
 * jsonUnwrapStringify(100n, BigintFormatType.String) => '"100"'
 * jsonUnwrapStringify(100n, BigintFormatType.String, (_key, value) => -value) => '"-100"' // runs both replacer and bigintFormat
 * jsonUnwrapStringify(100n, BigintFormatType.String, (_key, value) => 10) => '10' // replacer takes precedence
 */
export declare function jsonUnwrapStringify(input: any, bigintFormat?: BigintFormatType, replacer?: ReplacerFun, space?: string | number): string;
export {};
