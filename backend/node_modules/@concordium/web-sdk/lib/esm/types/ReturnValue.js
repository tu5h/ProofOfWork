import { Buffer } from 'buffer/index.js';
import { deserializeTypeValue } from '../schema.js';
import { serializeSchemaType } from '../schemaTypes.js';
import { TypedJsonDiscriminator, makeFromTypedJson } from './util.js';
/**
 * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.
 * @deprecated
 */
export const JSON_DISCRIMINATOR = TypedJsonDiscriminator.ReturnValue;
/** Return value from invoking a smart contract entrypoint. */
class ReturnValue {
    constructor(
    /** Internal buffer of bytes representing the return type. */
    buffer) {
        this.buffer = buffer;
        /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
        this.__type = JSON_DISCRIMINATOR;
    }
    /**
     * Get a string representation of the return value.
     * @returns {string} The string representation.
     */
    toString() {
        return toHexString(this);
    }
    /**
     * Get a JSON-serializable representation of the return value.
     * @returns {HexString} The JSON-serializable representation.
     */
    toJSON() {
        return toHexString(this);
    }
}
/**
 * Converts a {@linkcode HexString} to a return value.
 * @param {HexString} json The JSON representation of the return value.
 * @returns {ReturnValue} The return value.
 */
export function fromJSON(json) {
    return fromHexString(json);
}
/**
 * Unwraps {@linkcode Type} value
 * @deprecated Use the {@linkcode ReturnValue.toJSON} method instead.
 * @param value value to unwrap.
 * @returns the unwrapped {@linkcode Serializable} value
 */
export function toUnwrappedJSON(value) {
    return toHexString(value);
}
/**
 * Type predicate for {@linkcode Type}
 *
 * @param value value to check.
 * @returns whether `value` is of type {@linkcode Type}
 */
export function instanceOf(value) {
    return value instanceof ReturnValue;
}
/**
 * Create an empty return value.
 * @returns {ReturnValue} An empty return value.
 */
export function empty() {
    return fromBuffer(new ArrayBuffer(0));
}
/**
 * Create a return type from invoking a smart contract entrypoint.
 * @param {ArrayBuffer} buffer The buffer of bytes representing the return value.
 * @returns {ReturnValue}
 */
export function fromBuffer(buffer) {
    return new ReturnValue(new Uint8Array(buffer));
}
/**
 * Create a return type from invoking a smart contract entrypoint from a hex string.
 * @param {HexString} hex The hex string representing the return value.
 * @returns {ReturnValue}
 */
export function fromHexString(hex) {
    return new ReturnValue(new Uint8Array(Buffer.from(hex, 'hex')));
}
/**
 * Convert a return value into a hex string.
 * @param {ReturnValue} returnValue The return value to encode in a hex string.
 * @returns {HexString} The return value encoded in hex.
 */
export function toHexString(returnValue) {
    return Buffer.from(returnValue.buffer).toString('hex');
}
/**
 * Convert a return value into a buffer.
 * @param {ReturnValue} parameter The return value to get the buffer from.
 * @returns {Uint8Array}
 */
export function toBuffer(parameter) {
    return parameter.buffer;
}
/**
 * Convert a return value into a more structured representation using a schema type.
 * @param {ReturnValue} returnValue The return value.
 * @param {SchemaType} schemaType The schema type for the return value.
 * @returns {SmartContractTypeValues}
 */
export function parseWithSchemaType(returnValue, schemaType) {
    const schemaBytes = serializeSchemaType(schemaType);
    return deserializeTypeValue(returnValue.buffer, schemaBytes);
}
/**
 * Convert a return value into a more structured representation using a schema type.
 * @param {ReturnValue} returnValue The return value.
 * @param {Base64String} schemaBase64 The schema type for the return value.
 * @returns {SmartContractTypeValues}
 */
export function parseWithSchemaTypeBase64(returnValue, schemaBase64) {
    const schemaBytes = Buffer.from(schemaBase64, 'base64');
    return deserializeTypeValue(returnValue.buffer, schemaBytes);
}
/**
 * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
 * @deprecated Use the {@linkcode ReturnValue.toJSON} method instead.
 * @param {Type} value - The account address instance to transform.
 * @returns {TypedJson} The transformed object.
 */
export function toTypedJSON(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR,
        value: toHexString(value),
    };
}
/**
 * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.
 * @deprecated Use the {@linkcode fromJSON} function instead.
 * @param {TypedJson} json - The typed JSON to convert.
 * @throws {TypedJsonParseError} - If unexpected JSON string is passed.
 * @returns {Type} The parsed instance.
 */
export const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromHexString);
//# sourceMappingURL=ReturnValue.js.map