import type * as Proto from '../grpc-api/v2/concordium/types.js';
import { TypedJson, TypedJsonDiscriminator } from './util.js';
/**
 * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.
 * @deprecated
 */
export declare const JSON_DISCRIMINATOR = TypedJsonDiscriminator.Duration;
export type Serializable = string;
/**
 * Type representing a duration of time down to milliseconds.
 * Can not be negative.
 */
declare class Duration {
    /** The internal value for representing a duration in milliseconds. */
    readonly value: bigint;
    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
    private __type;
    constructor(
    /** The internal value for representing a duration in milliseconds. */
    value: bigint);
    /**
     * Get a string representation of the duration in milliseconds.
     * @returns {string} The string representation.
     */
    toString(): string;
}
/**
 * Unwraps {@linkcode Type} value
 * @param value value to unwrap.
 * @returns the unwrapped {@linkcode bigint} value
 */
export declare function toUnwrappedJSON(value: Type): bigint;
/**
 * Type representing a duration of time down to milliseconds.
 * Can not be negative.
 */
export type Type = Duration;
/**
 * Type predicate for {@linkcode Type}
 *
 * @param value value to check.
 * @returns whether `value` is of type {@linkcode Type}
 */
export declare function instanceOf(value: unknown): value is Duration;
/**
 * Construct a Duration from a given number of milliseconds.
 * @param {number} value Number of milliseconds
 * @throws If a negative value is provided.
 * @returns {Duration} Duration corresponding to the provided value.
 */
export declare function fromMillis(value: number | bigint): Duration;
/**
 * Parse a string containing a list of duration measures separated by whitespaces.
 *
 * A measure is a number followed by the unit (no whitespace
 * between is allowed). Every measure is accumulated into a duration. The
 * string is allowed to contain any number of measures with the same unit in no
 * particular order.
 *
 * The supported units are:
 * - `ms` for milliseconds
 * - `s` for seconds
 * - `m` for minutes
 * - `h` for hours
 * - `d` for days
 *
 * # Example
 * The duration of 10 days, 1 hour, 2 minutes and 7 seconds is:
 * ```text
 * "10d 1h 2m 7s"
 * ```
 * @param {string} durationString string representing a duration.
 * @throws The format of the string is not matching the format.
 * @returns {Duration}
 */
export declare function fromString(durationString: string): Duration;
/**
 * Get the duration in milliseconds.
 * @param {Duration} duration The duration.
 * @returns {bigint} The duration represented in milliseconds.
 */
export declare function toMillis(duration: Duration): bigint;
/** Type used when encoding a duration in the JSON format used when serializing using a smart contract schema type. */
export type SchemaValue = string;
/**
 * Get duration in the JSON format used when serializing using a smart contract schema type.
 * @param {Duration} duration The duration.
 * @returns {SchemaValue} The schema JSON representation.
 */
export declare function toSchemaValue(duration: Duration): SchemaValue;
/**
 * Convert to duration from JSON format used when serializing using a smart contract schema type.
 * @param {SchemaValue} duration The duration in schema JSON format.
 * @returns {Duration} The duration.
 */
export declare function fromSchemaValue(duration: SchemaValue): Duration;
/**
 * Convert a duration from its protobuf encoding.
 * @param {Proto.Duration} duration The duration in protobuf.
 * @returns {Duration} The duration.
 */
export declare function fromProto(duration: Proto.Duration): Duration;
/**
 * Convert a duration into its protobuf encoding.
 * @param {Duration} duration The duration.
 * @returns {Proto.Duration} The protobuf encoding.
 */
export declare function toProto(duration: Duration): Proto.Duration;
/**
 * Constructs a {@linkcode Duration} from {@linkcode Serializable}.
 * @param {Serializable} value
 * @returns {Duration} The duration.
 */
export declare function fromSerializable(value: Serializable): Duration;
/**
 * Converts {@linkcode Duration} into {@linkcode Serializable}
 * @param {Duration} duration
 * @returns {Serializable} The serializable value
 */
export declare function toSerializable(duration: Duration): Serializable;
/**
 * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
 * @deprecated Use the {@linkcode toSerializable} function instead.
 * @param {Type} value - The account address instance to transform.
 * @returns {TypedJson} The transformed object.
 */
export declare function toTypedJSON(value: Duration): TypedJson<Serializable>;
/**
 * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.
 * @deprecated Use the {@linkcode fromSerializable} function instead.
 * @param {TypedJson} json - The typed JSON to convert.
 * @throws {TypedJsonParseError} - If unexpected JSON string is passed.
 * @returns {Type} The parsed instance.
 */
export declare const fromTypedJSON: ({ ["@type"]: type, value }: TypedJson<string>) => string | Duration;
export {};
