import type * as Proto from '../grpc-api/v2/concordium/types.js';
import { SchemaType } from '../schemaTypes.js';
import type { Base64String, HexString, SmartContractTypeValues } from '../types.js';
/**
 * @deprecated
 */
export type Serializable = HexString;
/**
 * An event logged by a smart contract instance.
 */
declare class ContractEvent {
    /** The internal buffer of bytes representing the event. */
    readonly buffer: Uint8Array;
    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
    private __nominal;
    constructor(
    /** The internal buffer of bytes representing the event. */
    buffer: Uint8Array);
    /**
     * Get a string representation of the contract event.
     * @returns {string} The string representation.
     */
    toString(): string;
    /**
     * Get a JSON-serializable representation of the contract event.
     * @returns {HexString} The JSON-serializable representation.
     */
    toJSON(): HexString;
}
/**
 * Converts a {@linkcode HexString} to a contract event.
 * @param {HexString} json The JSON representation of the contract event.
 * @returns {ContractEvent} The contract event.
 */
export declare function fromJSON(json: HexString): ContractEvent;
/**
 * Unwraps {@linkcode Type} value
 * @deprecated Use the {@linkcode ContractEvent.toJSON} method instead.
 * @param value value to unwrap.
 * @returns the unwrapped {@linkcode Serializable} value
 */
export declare function toUnwrappedJSON(value: Type): Serializable;
/**
 * An event logged by a smart contract instance.
 */
export type Type = ContractEvent;
export declare function fromBuffer(buffer: ArrayBuffer): ContractEvent;
/**
 * Create a ContractEvent from a hex string.
 * @param {HexString} hex Hex encoding of the event.
 * @returns {ContractEvent}
 */
export declare function fromHexString(hex: HexString): ContractEvent;
/**
 * Hex encode a ContractEvent.
 * @param {ContractEvent} event The event to encode.
 * @returns {HexString} String containing the hex encoding.
 */
export declare function toHexString(event: ContractEvent): HexString;
/**
 * Get byte representation of a ContractEvent.
 * @param {ContractEvent} event The event.
 * @returns {ArrayBuffer} Hash represented as bytes.
 */
export declare function toBuffer(event: ContractEvent): Uint8Array;
/**
 * Convert a contract event from its protobuf encoding.
 * @param {Proto.ContractEvent} event The protobuf encoding.
 * @returns {ContractEvent}
 */
export declare function fromProto(event: Proto.ContractEvent): ContractEvent;
/**
 * Convert a contract event into its protobuf encoding.
 * @param {ContractEvent} event The block hash.
 * @returns {Proto.ContractEvent} The protobuf encoding.
 */
export declare function toProto(event: ContractEvent): Proto.ContractEvent;
/**
 * Parse a contract event using a schema type.
 * @param {ContractEvent} value The event.
 * @param {SchemaType} schemaType The schema type for the event.
 * @returns {SmartContractTypeValues}
 */
export declare function parseWithSchemaType(event: ContractEvent, schemaType: SchemaType): SmartContractTypeValues;
/**
 * Parse a contract event using a schema type.
 * @param {ContractEvent} value The event.
 * @param {Base64String} schemaBase64 The schema type for the event encoded as Base64.
 * @returns {SmartContractTypeValues}
 */
export declare function parseWithSchemaTypeBase64(event: ContractEvent, schemaBase64: Base64String): SmartContractTypeValues;
export {};
