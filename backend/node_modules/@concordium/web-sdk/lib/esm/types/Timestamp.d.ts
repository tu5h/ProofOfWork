import type * as Proto from '../grpc-api/v2/concordium/types.js';
import { TypedJson, TypedJsonDiscriminator } from './util.js';
/**
 * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.
 * @deprecated
 */
export declare const JSON_DISCRIMINATOR = TypedJsonDiscriminator.Timestamp;
export type Serializable = string;
/** Represents a timestamp. */
declare class Timestamp {
    /** The internal value for representing the timestamp as milliseconds since Unix epoch. */
    readonly value: bigint;
    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */
    private __type;
    constructor(
    /** The internal value for representing the timestamp as milliseconds since Unix epoch. */
    value: bigint);
    /**
     * Get a string representation of the timestamp as the number of milliseconds since Unix epoch.
     * @returns {string} The string representation.
     */
    toString(): string;
}
/**
 * Unwraps {@linkcode Type} value
 * @param value value to unwrap.
 * @returns the unwrapped {@linkcode bigint} value
 */
export declare function toUnwrappedJSON(value: Type): bigint;
/** Represents a timestamp. */
export type Type = Timestamp;
/**
 * Type predicate for {@linkcode Type}
 *
 * @param value value to check.
 * @returns whether `value` is of type {@linkcode Type}
 */
export declare function instanceOf(value: unknown): value is Timestamp;
/**
 * Create a Timestamp from milliseconds since Unix epoch.
 * @param {number} value Milliseconds since Unix epoch.
 * @throws If the value is negative.
 * @returns {Timestamp} The created timestamp.
 */
export declare function fromMillis(value: number | bigint): Timestamp;
/**
 * Create a Timestamp from a Date object.
 * @param {Date} date Date representing the timestamp.
 * @throws If the date if from before January 1, 1970 UTC.
 * @returns {Timestamp} The created timestamp.
 */
export declare function fromDate(date: Date): Timestamp;
/**
 * Construct a Timestamp minutes in the future from the time of calling this function.
 * @param {number} minutes The number of minutes in the future to set as the expiry time.
 * @returns {Timestamp} The transaction expiry.
 */
export declare function futureMinutes(minutes: number): Timestamp;
/** Type used when encoding a timestamp in the JSON format used when serializing using a smart contract schema type. */
export type SchemaValue = string;
/**
 * Get timestamp in the JSON format used when serializing using a smart contract schema type.
 * @param {Timestamp} timestamp The timestamp.
 * @returns {SchemaValue} The schema value representation.
 */
export declare function toSchemaValue(timestamp: Timestamp): SchemaValue;
/**
 * Convert to timestamp from JSON format used when serializing using a smart contract schema type.
 * @param {SchemaValue} timestamp The timestamp in schema format.
 * @returns {Timestamp} The timestamp
 */
export declare function fromSchemaValue(timestamp: SchemaValue): Timestamp;
/**
 * Get timestamp as a Date.
 * @param {Timestamp} timestamp The timestamp.
 * @returns {Date} Date object.
 */
export declare function toDate(timestamp: Timestamp): Date;
/**
 * Convert a timestamp from its protobuf encoding.
 * @param {Proto.Timestamp} timestamp The timestamp in protobuf.
 * @returns {Timestamp} The timestamp.
 */
export declare function fromProto(timestamp: Proto.Timestamp): Timestamp;
/**
 * Convert a timestamp into its protobuf encoding.
 * @param {Timestamp} timestamp The timestamp.
 * @returns {Proto.Timestamp} The protobuf encoding.
 */
export declare function toProto(timestamp: Timestamp): Proto.Timestamp;
/**
 * Constructs a {@linkcode Type} from {@linkcode Serializable}.
 * @param {Serializable} value
 * @returns {Type} The duration.
 */
export declare function fromSerializable(value: Serializable): Type;
/**
 * Converts {@linkcode Type} into {@linkcode Serializable}
 * @param {Type} value
 * @returns {Serializable} The serializable value
 */
export declare function toSerializable(value: Type): Serializable;
/**
 * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
 * @deprecated Use the {@linkcode toSerializable} function instead.
 * @param {Type} value - The account address instance to transform.
 * @returns {TypedJson} The transformed object.
 */
export declare function toTypedJSON(value: Timestamp): TypedJson<Serializable>;
/**
 * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.
 * @deprecated Use the{@linkcode fromSerializable} function instead.
 * @param {TypedJson} json - The typed JSON to convert.
 * @throws {TypedJsonParseError} - If unexpected JSON string is passed.
 * @returns {Type} The parsed instance.
 */
export declare const fromTypedJSON: ({ ["@type"]: type, value }: TypedJson<string>) => string | Timestamp;
export {};
