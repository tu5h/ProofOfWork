import * as v2 from '../grpc-api/v2/concordium/types.js';
import * as v1 from '../types.js';
import * as BlockHash from '../types/BlockHash.js';
export declare function unwrapValToHex(x: {
    value: Uint8Array;
} | undefined): string;
export declare function unwrapToBase58(address: v2.AccountAddress | undefined): v1.Base58String;
export declare function accountInfo(acc: v2.AccountInfo): v1.AccountInfo;
export declare function nextAccountSequenceNumber(nasn: v2.NextAccountSequenceNumber): v1.NextAccountNonce;
export declare function cryptographicParameters(cp: v2.CryptographicParameters): v1.CryptographicParameters;
export declare function blockChainParameters(params: v2.ChainParameters): v1.ChainParameters;
export declare function bakerPoolInfo(info: v2.PoolInfoResponse): v1.BakerPoolStatus;
export declare function passiveDelegationInfo(info: v2.PassiveDelegationInfo): v1.PassiveDelegationStatus;
export declare function tokenomicsInfo(info: v2.TokenomicsInfo): v1.RewardStatus;
export declare function consensusInfo(ci: v2.ConsensusInfo): v1.ConsensusStatus;
export declare function pendingUpdate(pendingUpdate: v2.PendingUpdate): v1.PendingUpdate;
export declare function trPendingUpdateEffect(pendingUpdate: v2.PendingUpdate): v1.PendingUpdateEffect;
export declare function blockItemSummary(summary: v2.BlockItemSummary): v1.BlockItemSummary;
export declare function blockItemStatus(itemStatus: v2.BlockItemStatus): v1.BlockItemStatus;
export declare function invokeInstanceResponse(invokeResponse: v2.InvokeInstanceResponse): v1.InvokeContractResult;
export declare function instanceInfo(instanceInfo: v2.InstanceInfo): v1.InstanceInfo;
export declare function commonBlockInfo(blockInfo: v2.ArrivedBlockInfo | v2.FinalizedBlockInfo): v1.CommonBlockInfo;
export declare function instanceStateKVPair(state: v2.InstanceStateKVPair): v1.InstanceStateKVPair;
export declare function ipInfo(ip: v2.IpInfo): v1.IpInfo;
export declare function arInfo(ar: v2.ArInfo): v1.ArInfo;
export declare function blocksAtHeightResponse(blocks: v2.BlocksAtHeightResponse): BlockHash.Type[];
export declare function blockInfo(blockInfo: v2.BlockInfo): v1.BlockInfo;
export declare function delegatorInfo(delegatorInfo: v2.DelegatorInfo): v1.DelegatorInfo;
export declare function branch(branchV2: v2.Branch): v1.Branch;
export declare function electionInfo(electionInfo: v2.ElectionInfo): v1.ElectionInfo;
export declare function nextUpdateSequenceNumbers(nextNums: v2.NextUpdateSequenceNumbers): v1.NextUpdateSequenceNumbers;
export declare function trNodeInfo_Node(node: v2.NodeInfo_Node): v1.NodeInfoConsensusStatus;
export declare function nodeInfo(nodeInfo: v2.NodeInfo): v1.NodeInfo;
export declare function peerInfo(peerInfo: v2.PeersInfo_Peer): v1.PeerInfo;
export declare function blockSpecialEvent(specialEvent: v2.BlockSpecialEvent): v1.BlockSpecialEvent;
export declare function blockFinalizationSummary(finalizationSummary: v2.BlockFinalizationSummary): v1.BlockFinalizationSummary;
export declare function blockCertificates(certs: v2.BlockCertificates): v1.BlockCertificates;
export declare function quorumCertificate(cert: v2.QuorumCertificate): v1.QuorumCertificate;
export declare function timeoutCertificate(cert: v2.TimeoutCertificate): v1.TimeoutCertificate;
export declare function epochFinalizationEntry(cert: v2.EpochFinalizationEntry): v1.EpochFinalizationEntry;
export declare function finalizerRound(round: v2.FinalizerRound): v1.FinalizerRound;
export declare function bakerRewardPeriodInfo(bakerRewardPeriod: v2.BakerRewardPeriodInfo): v1.BakerRewardPeriodInfo;
export declare function bakerInfo(bakerInfo: v2.BakerInfo): v1.BakerInfo;
export declare function winningBaker(winningBaker: v2.WinningBaker): v1.WinningBaker;
export declare function accountTransactionSignatureToV2(signature: v1.AccountTransactionSignature): v2.AccountTransactionSignature;
export declare function BlocksAtHeightRequestToV2(request: v1.BlocksAtHeightRequest): v2.BlocksAtHeightRequest;
