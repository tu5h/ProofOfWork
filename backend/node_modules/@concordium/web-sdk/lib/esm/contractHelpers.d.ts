import type * as ContractAddress from './types/ContractAddress.js';
/**
 * Checks if a buffer is larger than what is accepted for smart contract parameters
 *
 * @param {Buffer} buffer - The buffer to check
 *
 * @returns {void} nothing.
 *
 * @throws If buffer exceeds max length allowed for smart contract parameters
 */
export declare const checkParameterLength: (buffer: ArrayBuffer) => void;
/**
 * Whether two {@link ContractAddress} contract addresses are equal.
 */
export declare const isEqualContractAddress: (a: ContractAddress.Type) => (b: ContractAddress.Type) => boolean;
/** The name of a smart contract. Note: This does _not_ including the 'init_' prefix. */
export type ContractName = string;
/** The name of an entrypoint exposed by a smart contract. Note: This does _not_ include the '<contractName>.' prefix. */
export type EntrypointName = string;
/** Check that every character is an Ascii alpha, numeric or punctuation. */
export declare function isAsciiAlphaNumericPunctuation(string: string): boolean;
/** Check if a string is a valid smart contract init name. */
export declare function isInitName(string: string): boolean;
/** Get the contract name from a string. Assumes the string is a valid init name. */
export declare function getContractNameFromInit(initName: string): ContractName;
/** Check if a string is a valid smart contract receive name. */
export declare function isReceiveName(string: string): boolean;
/** Get the contract name and entrypoint name from a string. Assumes the string is a valid receive name. */
export declare function getNamesFromReceive(receiveName: string): {
    contractName: ContractName;
    entrypointName: EntrypointName;
};
